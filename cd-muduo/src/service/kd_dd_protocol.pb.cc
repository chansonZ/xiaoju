// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kd_dd_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kd_dd_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DdKd {

namespace {

const ::google::protobuf::Descriptor* UserAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* KDLocationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KDLocationInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KDLocationInfo_WorkState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Constants_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KDMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_kd_5fdd_5fprotocol_2eproto() {
  protobuf_AddDesc_kd_5fdd_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kd_dd_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  UserAgent_descriptor_ = file->message_type(0);
  static const int UserAgent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, os_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, client_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, carrier_operator_),
  };
  UserAgent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAgent_descriptor_,
      UserAgent::default_instance_,
      UserAgent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAgent));
  Header_descriptor_ = file->message_type(1);
  static const int Header_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, auth_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, user_agent_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  KDLocationInfo_descriptor_ = file->message_type(2);
  static const int KDLocationInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, driverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, spd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, work_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, location_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, location_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, direction_),
  };
  KDLocationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KDLocationInfo_descriptor_,
      KDLocationInfo::default_instance_,
      KDLocationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDLocationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KDLocationInfo));
  KDLocationInfo_WorkState_descriptor_ = KDLocationInfo_descriptor_->enum_type(0);
  Constants_descriptor_ = file->enum_type(0);
  KDMsgType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kd_5fdd_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAgent_descriptor_, &UserAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KDLocationInfo_descriptor_, &KDLocationInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kd_5fdd_5fprotocol_2eproto() {
  delete UserAgent::default_instance_;
  delete UserAgent_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete KDLocationInfo::default_instance_;
  delete KDLocationInfo_reflection_;
}

void protobuf_AddDesc_kd_5fdd_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024kd_dd_protocol.proto\022\004DdKd\"\214\001\n\tUserAge"
    "nt\022\017\n\007os_type\030\001 \001(\t\022\016\n\006os_ver\030\002 \001(\t\022\r\n\005m"
    "odel\030\003 \001(\t\022\022\n\nclient_ver\030\004 \001(\t\022\017\n\007networ"
    "k\030\005 \001(\t\022\020\n\010location\030\006 \001(\t\022\030\n\020carrier_ope"
    "rator\030\007 \001(\t\"\202\001\n\006Header\022\035\n\004type\030\001 \002(\0162\017.D"
    "dKd.KDMsgType\022\016\n\006msg_id\030\002 \001(\004\022\024\n\014auth_us"
    "er_id\030\003 \001(\004\022\016\n\006log_id\030\004 \001(\014\022#\n\nuser_agen"
    "t\030\005 \001(\0132\017.DdKd.UserAgent\"\341\001\n\016KDLocationI"
    "nfo\022\020\n\010driverid\030\001 \002(\004\022\013\n\003lat\030\002 \002(\001\022\013\n\003ln"
    "g\030\003 \002(\001\022\013\n\003spd\030\004 \002(\001\022,\n\004work\030\005 \002(\0162\036.DdK"
    "d.KDLocationInfo.WorkState\022\032\n\022location_t"
    "imestamp\030\006 \002(\004\022\025\n\rlocation_type\030\007 \002(\r\022\021\n"
    "\tdirection\030\010 \002(\001\"\"\n\tWorkState\022\010\n\004WORK\020\001\022"
    "\013\n\007OFFWORK\020\002*\031\n\tConstants\022\014\n\006kMagic\020\325\260\001*"
    "\"\n\tKDMsgType\022\025\n\021KDMsgTypeLocPoint\020\001", 595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kd_dd_protocol.proto", &protobuf_RegisterTypes);
  UserAgent::default_instance_ = new UserAgent();
  Header::default_instance_ = new Header();
  KDLocationInfo::default_instance_ = new KDLocationInfo();
  UserAgent::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  KDLocationInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kd_5fdd_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kd_5fdd_5fprotocol_2eproto {
  StaticDescriptorInitializer_kd_5fdd_5fprotocol_2eproto() {
    protobuf_AddDesc_kd_5fdd_5fprotocol_2eproto();
  }
} static_descriptor_initializer_kd_5fdd_5fprotocol_2eproto_;
const ::google::protobuf::EnumDescriptor* Constants_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Constants_descriptor_;
}
bool Constants_IsValid(int value) {
  switch(value) {
    case 22613:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KDMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KDMsgType_descriptor_;
}
bool KDMsgType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserAgent::kOsTypeFieldNumber;
const int UserAgent::kOsVerFieldNumber;
const int UserAgent::kModelFieldNumber;
const int UserAgent::kClientVerFieldNumber;
const int UserAgent::kNetworkFieldNumber;
const int UserAgent::kLocationFieldNumber;
const int UserAgent::kCarrierOperatorFieldNumber;
#endif  // !_MSC_VER

UserAgent::UserAgent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserAgent::InitAsDefaultInstance() {
}

UserAgent::UserAgent(const UserAgent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserAgent::SharedCtor() {
  _cached_size_ = 0;
  os_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carrier_operator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAgent::~UserAgent() {
  SharedDtor();
}

void UserAgent::SharedDtor() {
  if (os_type_ != &::google::protobuf::internal::kEmptyString) {
    delete os_type_;
  }
  if (os_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete os_ver_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (client_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ver_;
  }
  if (network_ != &::google::protobuf::internal::kEmptyString) {
    delete network_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (carrier_operator_ != &::google::protobuf::internal::kEmptyString) {
    delete carrier_operator_;
  }
  if (this != default_instance_) {
  }
}

void UserAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAgent_descriptor_;
}

const UserAgent& UserAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kd_5fdd_5fprotocol_2eproto();
  return *default_instance_;
}

UserAgent* UserAgent::default_instance_ = NULL;

UserAgent* UserAgent::New() const {
  return new UserAgent;
}

void UserAgent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_os_type()) {
      if (os_type_ != &::google::protobuf::internal::kEmptyString) {
        os_type_->clear();
      }
    }
    if (has_os_ver()) {
      if (os_ver_ != &::google::protobuf::internal::kEmptyString) {
        os_ver_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_client_ver()) {
      if (client_ver_ != &::google::protobuf::internal::kEmptyString) {
        client_ver_->clear();
      }
    }
    if (has_network()) {
      if (network_ != &::google::protobuf::internal::kEmptyString) {
        network_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    if (has_carrier_operator()) {
      if (carrier_operator_ != &::google::protobuf::internal::kEmptyString) {
        carrier_operator_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string os_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_type().data(), this->os_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_os_ver;
        break;
      }

      // optional string os_ver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_ver().data(), this->os_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_ver;
        break;
      }

      // optional string client_ver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ver().data(), this->client_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_network;
        break;
      }

      // optional string network = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }

      // optional string location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_carrier_operator;
        break;
      }

      // optional string carrier_operator = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carrier_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrier_operator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carrier_operator().data(), this->carrier_operator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string os_type = 1;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_type().data(), this->os_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->os_type(), output);
  }

  // optional string os_ver = 2;
  if (has_os_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_ver().data(), this->os_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->os_ver(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->model(), output);
  }

  // optional string client_ver = 4;
  if (has_client_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ver().data(), this->client_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_ver(), output);
  }

  // optional string network = 5;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->network(), output);
  }

  // optional string location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->location(), output);
  }

  // optional string carrier_operator = 7;
  if (has_carrier_operator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrier_operator().data(), this->carrier_operator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->carrier_operator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string os_type = 1;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_type().data(), this->os_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->os_type(), target);
  }

  // optional string os_ver = 2;
  if (has_os_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_ver().data(), this->os_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->os_ver(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string client_ver = 4;
  if (has_client_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ver().data(), this->client_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_ver(), target);
  }

  // optional string network = 5;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->network(), target);
  }

  // optional string location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->location(), target);
  }

  // optional string carrier_operator = 7;
  if (has_carrier_operator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrier_operator().data(), this->carrier_operator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->carrier_operator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAgent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string os_type = 1;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_type());
    }

    // optional string os_ver = 2;
    if (has_os_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_ver());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string client_ver = 4;
    if (has_client_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ver());
    }

    // optional string network = 5;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional string location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional string carrier_operator = 7;
    if (has_carrier_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrier_operator());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAgent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAgent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAgent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAgent::MergeFrom(const UserAgent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_os_ver()) {
      set_os_ver(from.os_ver());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_client_ver()) {
      set_client_ver(from.client_ver());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_carrier_operator()) {
      set_carrier_operator(from.carrier_operator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAgent::CopyFrom(const UserAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAgent::IsInitialized() const {

  return true;
}

void UserAgent::Swap(UserAgent* other) {
  if (other != this) {
    std::swap(os_type_, other->os_type_);
    std::swap(os_ver_, other->os_ver_);
    std::swap(model_, other->model_);
    std::swap(client_ver_, other->client_ver_);
    std::swap(network_, other->network_);
    std::swap(location_, other->location_);
    std::swap(carrier_operator_, other->carrier_operator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAgent_descriptor_;
  metadata.reflection = UserAgent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kTypeFieldNumber;
const int Header::kMsgIdFieldNumber;
const int Header::kAuthUserIdFieldNumber;
const int Header::kLogIdFieldNumber;
const int Header::kUserAgentFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
  user_agent_ = const_cast< ::DdKd::UserAgent*>(&::DdKd::UserAgent::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  msg_id_ = GOOGLE_ULONGLONG(0);
  auth_user_id_ = GOOGLE_ULONGLONG(0);
  log_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (log_id_ != &::google::protobuf::internal::kEmptyString) {
    delete log_id_;
  }
  if (this != default_instance_) {
    delete user_agent_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kd_5fdd_5fprotocol_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    msg_id_ = GOOGLE_ULONGLONG(0);
    auth_user_id_ = GOOGLE_ULONGLONG(0);
    if (has_log_id()) {
      if (log_id_ != &::google::protobuf::internal::kEmptyString) {
        log_id_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != NULL) user_agent_->::DdKd::UserAgent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DdKd.KDMsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DdKd::KDMsgType_IsValid(value)) {
            set_type(static_cast< ::DdKd::KDMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auth_user_id;
        break;
      }

      // optional uint64 auth_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auth_user_id_)));
          set_has_auth_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_log_id;
        break;
      }

      // optional bytes log_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_agent;
        break;
      }

      // optional .DdKd.UserAgent user_agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_agent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DdKd.KDMsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  // optional uint64 auth_user_id = 3;
  if (has_auth_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->auth_user_id(), output);
  }

  // optional bytes log_id = 4;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->log_id(), output);
  }

  // optional .DdKd.UserAgent user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user_agent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DdKd.KDMsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  // optional uint64 auth_user_id = 3;
  if (has_auth_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->auth_user_id(), target);
  }

  // optional bytes log_id = 4;
  if (has_log_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->log_id(), target);
  }

  // optional .DdKd.UserAgent user_agent = 5;
  if (has_user_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_agent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DdKd.KDMsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint64 auth_user_id = 3;
    if (has_auth_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auth_user_id());
    }

    // optional bytes log_id = 4;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->log_id());
    }

    // optional .DdKd.UserAgent user_agent = 5;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_agent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_auth_user_id()) {
      set_auth_user_id(from.auth_user_id());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_user_agent()) {
      mutable_user_agent()->::DdKd::UserAgent::MergeFrom(from.user_agent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(auth_user_id_, other->auth_user_id_);
    std::swap(log_id_, other->log_id_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* KDLocationInfo_WorkState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KDLocationInfo_WorkState_descriptor_;
}
bool KDLocationInfo_WorkState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KDLocationInfo_WorkState KDLocationInfo::WORK;
const KDLocationInfo_WorkState KDLocationInfo::OFFWORK;
const KDLocationInfo_WorkState KDLocationInfo::WorkState_MIN;
const KDLocationInfo_WorkState KDLocationInfo::WorkState_MAX;
const int KDLocationInfo::WorkState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int KDLocationInfo::kDriveridFieldNumber;
const int KDLocationInfo::kLatFieldNumber;
const int KDLocationInfo::kLngFieldNumber;
const int KDLocationInfo::kSpdFieldNumber;
const int KDLocationInfo::kWorkFieldNumber;
const int KDLocationInfo::kLocationTimestampFieldNumber;
const int KDLocationInfo::kLocationTypeFieldNumber;
const int KDLocationInfo::kDirectionFieldNumber;
#endif  // !_MSC_VER

KDLocationInfo::KDLocationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KDLocationInfo::InitAsDefaultInstance() {
}

KDLocationInfo::KDLocationInfo(const KDLocationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KDLocationInfo::SharedCtor() {
  _cached_size_ = 0;
  driverid_ = GOOGLE_ULONGLONG(0);
  lat_ = 0;
  lng_ = 0;
  spd_ = 0;
  work_ = 1;
  location_timestamp_ = GOOGLE_ULONGLONG(0);
  location_type_ = 0u;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KDLocationInfo::~KDLocationInfo() {
  SharedDtor();
}

void KDLocationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KDLocationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KDLocationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KDLocationInfo_descriptor_;
}

const KDLocationInfo& KDLocationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kd_5fdd_5fprotocol_2eproto();
  return *default_instance_;
}

KDLocationInfo* KDLocationInfo::default_instance_ = NULL;

KDLocationInfo* KDLocationInfo::New() const {
  return new KDLocationInfo;
}

void KDLocationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    driverid_ = GOOGLE_ULONGLONG(0);
    lat_ = 0;
    lng_ = 0;
    spd_ = 0;
    work_ = 1;
    location_timestamp_ = GOOGLE_ULONGLONG(0);
    location_type_ = 0u;
    direction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KDLocationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 driverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &driverid_)));
          set_has_driverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // required double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_lng;
        break;
      }

      // required double lng = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_spd;
        break;
      }

      // required double spd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spd_)));
          set_has_spd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_work;
        break;
      }

      // required .DdKd.KDLocationInfo.WorkState work = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_work:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DdKd::KDLocationInfo_WorkState_IsValid(value)) {
            set_work(static_cast< ::DdKd::KDLocationInfo_WorkState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_location_timestamp;
        break;
      }

      // required uint64 location_timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &location_timestamp_)));
          set_has_location_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_location_type;
        break;
      }

      // required uint32 location_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_type_)));
          set_has_location_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_direction;
        break;
      }

      // required double direction = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KDLocationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 driverid = 1;
  if (has_driverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->driverid(), output);
  }

  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // required double lng = 3;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lng(), output);
  }

  // required double spd = 4;
  if (has_spd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->spd(), output);
  }

  // required .DdKd.KDLocationInfo.WorkState work = 5;
  if (has_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->work(), output);
  }

  // required uint64 location_timestamp = 6;
  if (has_location_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->location_timestamp(), output);
  }

  // required uint32 location_type = 7;
  if (has_location_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->location_type(), output);
  }

  // required double direction = 8;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KDLocationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 driverid = 1;
  if (has_driverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->driverid(), target);
  }

  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // required double lng = 3;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lng(), target);
  }

  // required double spd = 4;
  if (has_spd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->spd(), target);
  }

  // required .DdKd.KDLocationInfo.WorkState work = 5;
  if (has_work()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->work(), target);
  }

  // required uint64 location_timestamp = 6;
  if (has_location_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->location_timestamp(), target);
  }

  // required uint32 location_type = 7;
  if (has_location_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->location_type(), target);
  }

  // required double direction = 8;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KDLocationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 driverid = 1;
    if (has_driverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->driverid());
    }

    // required double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lng = 3;
    if (has_lng()) {
      total_size += 1 + 8;
    }

    // required double spd = 4;
    if (has_spd()) {
      total_size += 1 + 8;
    }

    // required .DdKd.KDLocationInfo.WorkState work = 5;
    if (has_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->work());
    }

    // required uint64 location_timestamp = 6;
    if (has_location_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->location_timestamp());
    }

    // required uint32 location_type = 7;
    if (has_location_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location_type());
    }

    // required double direction = 8;
    if (has_direction()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KDLocationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KDLocationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KDLocationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KDLocationInfo::MergeFrom(const KDLocationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driverid()) {
      set_driverid(from.driverid());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_spd()) {
      set_spd(from.spd());
    }
    if (from.has_work()) {
      set_work(from.work());
    }
    if (from.has_location_timestamp()) {
      set_location_timestamp(from.location_timestamp());
    }
    if (from.has_location_type()) {
      set_location_type(from.location_type());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KDLocationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KDLocationInfo::CopyFrom(const KDLocationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KDLocationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void KDLocationInfo::Swap(KDLocationInfo* other) {
  if (other != this) {
    std::swap(driverid_, other->driverid_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(spd_, other->spd_);
    std::swap(work_, other->work_);
    std::swap(location_timestamp_, other->location_timestamp_);
    std::swap(location_type_, other->location_type_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KDLocationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KDLocationInfo_descriptor_;
  metadata.reflection = KDLocationInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DdKd

// @@protoc_insertion_point(global_scope)
