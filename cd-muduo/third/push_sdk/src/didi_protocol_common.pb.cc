// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: didi_protocol_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "didi_protocol_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DidiPush {

namespace {

const ::google::protobuf::Descriptor* LocationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrivingFeeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrivingFeeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DriverBroadcastOrderExtraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DriverBroadcastOrderExtraInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LocationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DriverOrderFilterType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_didi_5fprotocol_5fcommon_2eproto() {
  protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "didi_protocol_common.proto");
  GOOGLE_CHECK(file != NULL);
  LocationInfo_descriptor_ = file->message_type(0);
  static const int LocationInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, acceleratedspeedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, acceleratedspeedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, acceleratedspeedz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, includedangleyaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, includedangleroll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, includedanglepitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, loctype_),
  };
  LocationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocationInfo_descriptor_,
      LocationInfo::default_instance_,
      LocationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocationInfo));
  DrivingFeeInfo_descriptor_ = file->message_type(1);
  static const int DrivingFeeInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, normal_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, cur_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, empty_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, night_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, slow_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, slow_cur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, normal_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, normal_act_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, empty_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, empty_act_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, night_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, night_act_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, slow_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, display_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, actual_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, start_fee_),
  };
  DrivingFeeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrivingFeeInfo_descriptor_,
      DrivingFeeInfo::default_instance_,
      DrivingFeeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrivingFeeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrivingFeeInfo));
  DriverBroadcastOrderExtraInfo_descriptor_ = file->message_type(2);
  static const int DriverBroadcastOrderExtraInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverBroadcastOrderExtraInfo, send_num_),
  };
  DriverBroadcastOrderExtraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DriverBroadcastOrderExtraInfo_descriptor_,
      DriverBroadcastOrderExtraInfo::default_instance_,
      DriverBroadcastOrderExtraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverBroadcastOrderExtraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverBroadcastOrderExtraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DriverBroadcastOrderExtraInfo));
  LocationType_descriptor_ = file->enum_type(0);
  DriverOrderFilterType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_didi_5fprotocol_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocationInfo_descriptor_, &LocationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrivingFeeInfo_descriptor_, &DrivingFeeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DriverBroadcastOrderExtraInfo_descriptor_, &DriverBroadcastOrderExtraInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_didi_5fprotocol_5fcommon_2eproto() {
  delete LocationInfo::default_instance_;
  delete LocationInfo_reflection_;
  delete DrivingFeeInfo::default_instance_;
  delete DrivingFeeInfo_reflection_;
  delete DriverBroadcastOrderExtraInfo::default_instance_;
  delete DriverBroadcastOrderExtraInfo_reflection_;
}

void protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DidiPush::protobuf_AddDesc_didi_5fprotocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032didi_protocol_common.proto\022\010DidiPush\032\023"
    "didi_protocol.proto\"\336\002\n\014LocationInfo\022\t\n\001"
    "x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022&\n\004type\030\003 \002(\0162\030.DidiP"
    "ush.CoordinateType\022\020\n\010accuracy\030\004 \002(\001\022\021\n\t"
    "direction\030\005 \002(\001\022\r\n\005speed\030\006 \002(\001\022\031\n\021accele"
    "ratedSpeedX\030\007 \002(\002\022\031\n\021acceleratedSpeedY\030\010"
    " \002(\002\022\031\n\021acceleratedSpeedZ\030\t \002(\002\022\030\n\020inclu"
    "dedAngleYaw\030\n \002(\002\022\031\n\021includedAngleRoll\030\013"
    " \002(\002\022\032\n\022includedAnglePitch\030\014 \002(\002\022\021\n\ttime"
    "stamp\030\r \002(\005\022\'\n\007locType\030\016 \001(\0162\026.DidiPush."
    "LocationType\"\372\002\n\016DrivingFeeInfo\022\027\n\017norma"
    "l_distance\030\001 \002(\002\022\024\n\014cur_distance\030\002 \002(\002\022\026"
    "\n\016empty_distance\030\003 \002(\002\022\026\n\016night_distance"
    "\030\004 \002(\002\022\021\n\tslow_time\030\005 \002(\005\022\025\n\rslow_cur_ti"
    "me\030\006 \002(\005\022\022\n\nnormal_fee\030\007 \002(\002\022\026\n\016normal_a"
    "ct_fee\030\010 \002(\002\022\021\n\tempty_fee\030\t \002(\002\022\025\n\rempty"
    "_act_fee\030\n \002(\002\022\021\n\tnight_fee\030\013 \002(\002\022\025\n\rnig"
    "ht_act_fee\030\014 \002(\002\022\020\n\010slow_fee\030\r \002(\002\022\023\n\013di"
    "splay_fee\030\016 \002(\002\022\022\n\nactual_fee\030\017 \002(\002\022\021\n\tt"
    "imestamp\030\020 \002(\005\022\021\n\tstart_fee\030\021 \002(\002\"1\n\035Dri"
    "verBroadcastOrderExtraInfo\022\020\n\010send_num\030\001"
    " \001(\005*7\n\014LocationType\022\013\n\007LOC_GPS\020\001\022\013\n\007LOC"
    "_NET\020\002\022\r\n\tLOC_OTHER\020\003*\211\002\n\025DriverOrderFil"
    "terType\022#\n\037DriverOrderFilterType_OnCalli"
    "ng\020\001\022(\n$DriverOrderFilterType_OnOrderSho"
    "wing\020\002\022\'\n#DriverOrderFilterType_OnSettin"
    "gMode\020\003\022&\n\"DriverOrderFilterType_ModeCon"
    "flict\020\004\022!\n\035DriverOrderFilterType_Offline"
    "\020\005\022-\n)DriverOrderFilterType_ViewCanNotSh"
    "owOrder\020\006B/\n\025com.sdu.didi.protobufB\026DiDi"
    "UserCommonProtobuf", 1218);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "didi_protocol_common.proto", &protobuf_RegisterTypes);
  LocationInfo::default_instance_ = new LocationInfo();
  DrivingFeeInfo::default_instance_ = new DrivingFeeInfo();
  DriverBroadcastOrderExtraInfo::default_instance_ = new DriverBroadcastOrderExtraInfo();
  LocationInfo::default_instance_->InitAsDefaultInstance();
  DrivingFeeInfo::default_instance_->InitAsDefaultInstance();
  DriverBroadcastOrderExtraInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_didi_5fprotocol_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_didi_5fprotocol_5fcommon_2eproto {
  StaticDescriptorInitializer_didi_5fprotocol_5fcommon_2eproto() {
    protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
  }
} static_descriptor_initializer_didi_5fprotocol_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* LocationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationType_descriptor_;
}
bool LocationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DriverOrderFilterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriverOrderFilterType_descriptor_;
}
bool DriverOrderFilterType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LocationInfo::kXFieldNumber;
const int LocationInfo::kYFieldNumber;
const int LocationInfo::kTypeFieldNumber;
const int LocationInfo::kAccuracyFieldNumber;
const int LocationInfo::kDirectionFieldNumber;
const int LocationInfo::kSpeedFieldNumber;
const int LocationInfo::kAcceleratedSpeedXFieldNumber;
const int LocationInfo::kAcceleratedSpeedYFieldNumber;
const int LocationInfo::kAcceleratedSpeedZFieldNumber;
const int LocationInfo::kIncludedAngleYawFieldNumber;
const int LocationInfo::kIncludedAngleRollFieldNumber;
const int LocationInfo::kIncludedAnglePitchFieldNumber;
const int LocationInfo::kTimestampFieldNumber;
const int LocationInfo::kLocTypeFieldNumber;
#endif  // !_MSC_VER

LocationInfo::LocationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocationInfo::InitAsDefaultInstance() {
}

LocationInfo::LocationInfo(const LocationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocationInfo::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  type_ = 1;
  accuracy_ = 0;
  direction_ = 0;
  speed_ = 0;
  acceleratedspeedx_ = 0;
  acceleratedspeedy_ = 0;
  acceleratedspeedz_ = 0;
  includedangleyaw_ = 0;
  includedangleroll_ = 0;
  includedanglepitch_ = 0;
  timestamp_ = 0;
  loctype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationInfo::~LocationInfo() {
  SharedDtor();
}

void LocationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationInfo_descriptor_;
}

const LocationInfo& LocationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
  return *default_instance_;
}

LocationInfo* LocationInfo::default_instance_ = NULL;

LocationInfo* LocationInfo::New() const {
  return new LocationInfo;
}

void LocationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    type_ = 1;
    accuracy_ = 0;
    direction_ = 0;
    speed_ = 0;
    acceleratedspeedx_ = 0;
    acceleratedspeedy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    acceleratedspeedz_ = 0;
    includedangleyaw_ = 0;
    includedangleroll_ = 0;
    includedanglepitch_ = 0;
    timestamp_ = 0;
    loctype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .DidiPush.CoordinateType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::CoordinateType_IsValid(value)) {
            set_type(static_cast< ::DidiPush::CoordinateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_accuracy;
        break;
      }

      // required double accuracy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_direction;
        break;
      }

      // required double direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_speed;
        break;
      }

      // required double speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_acceleratedSpeedX;
        break;
      }

      // required float acceleratedSpeedX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acceleratedSpeedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleratedspeedx_)));
          set_has_acceleratedspeedx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_acceleratedSpeedY;
        break;
      }

      // required float acceleratedSpeedY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acceleratedSpeedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleratedspeedy_)));
          set_has_acceleratedspeedy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_acceleratedSpeedZ;
        break;
      }

      // required float acceleratedSpeedZ = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acceleratedSpeedZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleratedspeedz_)));
          set_has_acceleratedspeedz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_includedAngleYaw;
        break;
      }

      // required float includedAngleYaw = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_includedAngleYaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &includedangleyaw_)));
          set_has_includedangleyaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_includedAngleRoll;
        break;
      }

      // required float includedAngleRoll = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_includedAngleRoll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &includedangleroll_)));
          set_has_includedangleroll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_includedAnglePitch;
        break;
      }

      // required float includedAnglePitch = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_includedAnglePitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &includedanglepitch_)));
          set_has_includedanglepitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_timestamp;
        break;
      }

      // required int32 timestamp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_locType;
        break;
      }

      // optional .DidiPush.LocationType locType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::LocationType_IsValid(value)) {
            set_loctype(static_cast< ::DidiPush::LocationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required double accuracy = 4;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->accuracy(), output);
  }

  // required double direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->direction(), output);
  }

  // required double speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed(), output);
  }

  // required float acceleratedSpeedX = 7;
  if (has_acceleratedspeedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->acceleratedspeedx(), output);
  }

  // required float acceleratedSpeedY = 8;
  if (has_acceleratedspeedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->acceleratedspeedy(), output);
  }

  // required float acceleratedSpeedZ = 9;
  if (has_acceleratedspeedz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->acceleratedspeedz(), output);
  }

  // required float includedAngleYaw = 10;
  if (has_includedangleyaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->includedangleyaw(), output);
  }

  // required float includedAngleRoll = 11;
  if (has_includedangleroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->includedangleroll(), output);
  }

  // required float includedAnglePitch = 12;
  if (has_includedanglepitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->includedanglepitch(), output);
  }

  // required int32 timestamp = 13;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->timestamp(), output);
  }

  // optional .DidiPush.LocationType locType = 14;
  if (has_loctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->loctype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required double accuracy = 4;
  if (has_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->accuracy(), target);
  }

  // required double direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->direction(), target);
  }

  // required double speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed(), target);
  }

  // required float acceleratedSpeedX = 7;
  if (has_acceleratedspeedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->acceleratedspeedx(), target);
  }

  // required float acceleratedSpeedY = 8;
  if (has_acceleratedspeedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->acceleratedspeedy(), target);
  }

  // required float acceleratedSpeedZ = 9;
  if (has_acceleratedspeedz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->acceleratedspeedz(), target);
  }

  // required float includedAngleYaw = 10;
  if (has_includedangleyaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->includedangleyaw(), target);
  }

  // required float includedAngleRoll = 11;
  if (has_includedangleroll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->includedangleroll(), target);
  }

  // required float includedAnglePitch = 12;
  if (has_includedanglepitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->includedanglepitch(), target);
  }

  // required int32 timestamp = 13;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->timestamp(), target);
  }

  // optional .DidiPush.LocationType locType = 14;
  if (has_loctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->loctype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required .DidiPush.CoordinateType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required double accuracy = 4;
    if (has_accuracy()) {
      total_size += 1 + 8;
    }

    // required double direction = 5;
    if (has_direction()) {
      total_size += 1 + 8;
    }

    // required double speed = 6;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // required float acceleratedSpeedX = 7;
    if (has_acceleratedspeedx()) {
      total_size += 1 + 4;
    }

    // required float acceleratedSpeedY = 8;
    if (has_acceleratedspeedy()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float acceleratedSpeedZ = 9;
    if (has_acceleratedspeedz()) {
      total_size += 1 + 4;
    }

    // required float includedAngleYaw = 10;
    if (has_includedangleyaw()) {
      total_size += 1 + 4;
    }

    // required float includedAngleRoll = 11;
    if (has_includedangleroll()) {
      total_size += 1 + 4;
    }

    // required float includedAnglePitch = 12;
    if (has_includedanglepitch()) {
      total_size += 1 + 4;
    }

    // required int32 timestamp = 13;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional .DidiPush.LocationType locType = 14;
    if (has_loctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loctype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocationInfo::MergeFrom(const LocationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_acceleratedspeedx()) {
      set_acceleratedspeedx(from.acceleratedspeedx());
    }
    if (from.has_acceleratedspeedy()) {
      set_acceleratedspeedy(from.acceleratedspeedy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_acceleratedspeedz()) {
      set_acceleratedspeedz(from.acceleratedspeedz());
    }
    if (from.has_includedangleyaw()) {
      set_includedangleyaw(from.includedangleyaw());
    }
    if (from.has_includedangleroll()) {
      set_includedangleroll(from.includedangleroll());
    }
    if (from.has_includedanglepitch()) {
      set_includedanglepitch(from.includedanglepitch());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_loctype()) {
      set_loctype(from.loctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationInfo::CopyFrom(const LocationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void LocationInfo::Swap(LocationInfo* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(type_, other->type_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(direction_, other->direction_);
    std::swap(speed_, other->speed_);
    std::swap(acceleratedspeedx_, other->acceleratedspeedx_);
    std::swap(acceleratedspeedy_, other->acceleratedspeedy_);
    std::swap(acceleratedspeedz_, other->acceleratedspeedz_);
    std::swap(includedangleyaw_, other->includedangleyaw_);
    std::swap(includedangleroll_, other->includedangleroll_);
    std::swap(includedanglepitch_, other->includedanglepitch_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(loctype_, other->loctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationInfo_descriptor_;
  metadata.reflection = LocationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrivingFeeInfo::kNormalDistanceFieldNumber;
const int DrivingFeeInfo::kCurDistanceFieldNumber;
const int DrivingFeeInfo::kEmptyDistanceFieldNumber;
const int DrivingFeeInfo::kNightDistanceFieldNumber;
const int DrivingFeeInfo::kSlowTimeFieldNumber;
const int DrivingFeeInfo::kSlowCurTimeFieldNumber;
const int DrivingFeeInfo::kNormalFeeFieldNumber;
const int DrivingFeeInfo::kNormalActFeeFieldNumber;
const int DrivingFeeInfo::kEmptyFeeFieldNumber;
const int DrivingFeeInfo::kEmptyActFeeFieldNumber;
const int DrivingFeeInfo::kNightFeeFieldNumber;
const int DrivingFeeInfo::kNightActFeeFieldNumber;
const int DrivingFeeInfo::kSlowFeeFieldNumber;
const int DrivingFeeInfo::kDisplayFeeFieldNumber;
const int DrivingFeeInfo::kActualFeeFieldNumber;
const int DrivingFeeInfo::kTimestampFieldNumber;
const int DrivingFeeInfo::kStartFeeFieldNumber;
#endif  // !_MSC_VER

DrivingFeeInfo::DrivingFeeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrivingFeeInfo::InitAsDefaultInstance() {
}

DrivingFeeInfo::DrivingFeeInfo(const DrivingFeeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrivingFeeInfo::SharedCtor() {
  _cached_size_ = 0;
  normal_distance_ = 0;
  cur_distance_ = 0;
  empty_distance_ = 0;
  night_distance_ = 0;
  slow_time_ = 0;
  slow_cur_time_ = 0;
  normal_fee_ = 0;
  normal_act_fee_ = 0;
  empty_fee_ = 0;
  empty_act_fee_ = 0;
  night_fee_ = 0;
  night_act_fee_ = 0;
  slow_fee_ = 0;
  display_fee_ = 0;
  actual_fee_ = 0;
  timestamp_ = 0;
  start_fee_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrivingFeeInfo::~DrivingFeeInfo() {
  SharedDtor();
}

void DrivingFeeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrivingFeeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrivingFeeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrivingFeeInfo_descriptor_;
}

const DrivingFeeInfo& DrivingFeeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
  return *default_instance_;
}

DrivingFeeInfo* DrivingFeeInfo::default_instance_ = NULL;

DrivingFeeInfo* DrivingFeeInfo::New() const {
  return new DrivingFeeInfo;
}

void DrivingFeeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    normal_distance_ = 0;
    cur_distance_ = 0;
    empty_distance_ = 0;
    night_distance_ = 0;
    slow_time_ = 0;
    slow_cur_time_ = 0;
    normal_fee_ = 0;
    normal_act_fee_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    empty_fee_ = 0;
    empty_act_fee_ = 0;
    night_fee_ = 0;
    night_act_fee_ = 0;
    slow_fee_ = 0;
    display_fee_ = 0;
    actual_fee_ = 0;
    timestamp_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    start_fee_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrivingFeeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float normal_distance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normal_distance_)));
          set_has_normal_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_cur_distance;
        break;
      }

      // required float cur_distance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cur_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_distance_)));
          set_has_cur_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_empty_distance;
        break;
      }

      // required float empty_distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_empty_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &empty_distance_)));
          set_has_empty_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_night_distance;
        break;
      }

      // required float night_distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_night_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &night_distance_)));
          set_has_night_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_slow_time;
        break;
      }

      // required int32 slow_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slow_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slow_time_)));
          set_has_slow_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slow_cur_time;
        break;
      }

      // required int32 slow_cur_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slow_cur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slow_cur_time_)));
          set_has_slow_cur_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_normal_fee;
        break;
      }

      // required float normal_fee = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normal_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normal_fee_)));
          set_has_normal_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_normal_act_fee;
        break;
      }

      // required float normal_act_fee = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normal_act_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normal_act_fee_)));
          set_has_normal_act_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_empty_fee;
        break;
      }

      // required float empty_fee = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_empty_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &empty_fee_)));
          set_has_empty_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_empty_act_fee;
        break;
      }

      // required float empty_act_fee = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_empty_act_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &empty_act_fee_)));
          set_has_empty_act_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_night_fee;
        break;
      }

      // required float night_fee = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_night_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &night_fee_)));
          set_has_night_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_night_act_fee;
        break;
      }

      // required float night_act_fee = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_night_act_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &night_act_fee_)));
          set_has_night_act_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_slow_fee;
        break;
      }

      // required float slow_fee = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_slow_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slow_fee_)));
          set_has_slow_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_display_fee;
        break;
      }

      // required float display_fee = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_display_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &display_fee_)));
          set_has_display_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_actual_fee;
        break;
      }

      // required float actual_fee = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_actual_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &actual_fee_)));
          set_has_actual_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_timestamp;
        break;
      }

      // required int32 timestamp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_start_fee;
        break;
      }

      // required float start_fee = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_fee_)));
          set_has_start_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrivingFeeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float normal_distance = 1;
  if (has_normal_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->normal_distance(), output);
  }

  // required float cur_distance = 2;
  if (has_cur_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cur_distance(), output);
  }

  // required float empty_distance = 3;
  if (has_empty_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->empty_distance(), output);
  }

  // required float night_distance = 4;
  if (has_night_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->night_distance(), output);
  }

  // required int32 slow_time = 5;
  if (has_slow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->slow_time(), output);
  }

  // required int32 slow_cur_time = 6;
  if (has_slow_cur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->slow_cur_time(), output);
  }

  // required float normal_fee = 7;
  if (has_normal_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->normal_fee(), output);
  }

  // required float normal_act_fee = 8;
  if (has_normal_act_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->normal_act_fee(), output);
  }

  // required float empty_fee = 9;
  if (has_empty_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->empty_fee(), output);
  }

  // required float empty_act_fee = 10;
  if (has_empty_act_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->empty_act_fee(), output);
  }

  // required float night_fee = 11;
  if (has_night_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->night_fee(), output);
  }

  // required float night_act_fee = 12;
  if (has_night_act_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->night_act_fee(), output);
  }

  // required float slow_fee = 13;
  if (has_slow_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->slow_fee(), output);
  }

  // required float display_fee = 14;
  if (has_display_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->display_fee(), output);
  }

  // required float actual_fee = 15;
  if (has_actual_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->actual_fee(), output);
  }

  // required int32 timestamp = 16;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->timestamp(), output);
  }

  // required float start_fee = 17;
  if (has_start_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->start_fee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrivingFeeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float normal_distance = 1;
  if (has_normal_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->normal_distance(), target);
  }

  // required float cur_distance = 2;
  if (has_cur_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cur_distance(), target);
  }

  // required float empty_distance = 3;
  if (has_empty_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->empty_distance(), target);
  }

  // required float night_distance = 4;
  if (has_night_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->night_distance(), target);
  }

  // required int32 slow_time = 5;
  if (has_slow_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->slow_time(), target);
  }

  // required int32 slow_cur_time = 6;
  if (has_slow_cur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->slow_cur_time(), target);
  }

  // required float normal_fee = 7;
  if (has_normal_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->normal_fee(), target);
  }

  // required float normal_act_fee = 8;
  if (has_normal_act_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->normal_act_fee(), target);
  }

  // required float empty_fee = 9;
  if (has_empty_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->empty_fee(), target);
  }

  // required float empty_act_fee = 10;
  if (has_empty_act_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->empty_act_fee(), target);
  }

  // required float night_fee = 11;
  if (has_night_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->night_fee(), target);
  }

  // required float night_act_fee = 12;
  if (has_night_act_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->night_act_fee(), target);
  }

  // required float slow_fee = 13;
  if (has_slow_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->slow_fee(), target);
  }

  // required float display_fee = 14;
  if (has_display_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->display_fee(), target);
  }

  // required float actual_fee = 15;
  if (has_actual_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->actual_fee(), target);
  }

  // required int32 timestamp = 16;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->timestamp(), target);
  }

  // required float start_fee = 17;
  if (has_start_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->start_fee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrivingFeeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float normal_distance = 1;
    if (has_normal_distance()) {
      total_size += 1 + 4;
    }

    // required float cur_distance = 2;
    if (has_cur_distance()) {
      total_size += 1 + 4;
    }

    // required float empty_distance = 3;
    if (has_empty_distance()) {
      total_size += 1 + 4;
    }

    // required float night_distance = 4;
    if (has_night_distance()) {
      total_size += 1 + 4;
    }

    // required int32 slow_time = 5;
    if (has_slow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slow_time());
    }

    // required int32 slow_cur_time = 6;
    if (has_slow_cur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slow_cur_time());
    }

    // required float normal_fee = 7;
    if (has_normal_fee()) {
      total_size += 1 + 4;
    }

    // required float normal_act_fee = 8;
    if (has_normal_act_fee()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float empty_fee = 9;
    if (has_empty_fee()) {
      total_size += 1 + 4;
    }

    // required float empty_act_fee = 10;
    if (has_empty_act_fee()) {
      total_size += 1 + 4;
    }

    // required float night_fee = 11;
    if (has_night_fee()) {
      total_size += 1 + 4;
    }

    // required float night_act_fee = 12;
    if (has_night_act_fee()) {
      total_size += 1 + 4;
    }

    // required float slow_fee = 13;
    if (has_slow_fee()) {
      total_size += 1 + 4;
    }

    // required float display_fee = 14;
    if (has_display_fee()) {
      total_size += 1 + 4;
    }

    // required float actual_fee = 15;
    if (has_actual_fee()) {
      total_size += 1 + 4;
    }

    // required int32 timestamp = 16;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required float start_fee = 17;
    if (has_start_fee()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrivingFeeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrivingFeeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrivingFeeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrivingFeeInfo::MergeFrom(const DrivingFeeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normal_distance()) {
      set_normal_distance(from.normal_distance());
    }
    if (from.has_cur_distance()) {
      set_cur_distance(from.cur_distance());
    }
    if (from.has_empty_distance()) {
      set_empty_distance(from.empty_distance());
    }
    if (from.has_night_distance()) {
      set_night_distance(from.night_distance());
    }
    if (from.has_slow_time()) {
      set_slow_time(from.slow_time());
    }
    if (from.has_slow_cur_time()) {
      set_slow_cur_time(from.slow_cur_time());
    }
    if (from.has_normal_fee()) {
      set_normal_fee(from.normal_fee());
    }
    if (from.has_normal_act_fee()) {
      set_normal_act_fee(from.normal_act_fee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_empty_fee()) {
      set_empty_fee(from.empty_fee());
    }
    if (from.has_empty_act_fee()) {
      set_empty_act_fee(from.empty_act_fee());
    }
    if (from.has_night_fee()) {
      set_night_fee(from.night_fee());
    }
    if (from.has_night_act_fee()) {
      set_night_act_fee(from.night_act_fee());
    }
    if (from.has_slow_fee()) {
      set_slow_fee(from.slow_fee());
    }
    if (from.has_display_fee()) {
      set_display_fee(from.display_fee());
    }
    if (from.has_actual_fee()) {
      set_actual_fee(from.actual_fee());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_start_fee()) {
      set_start_fee(from.start_fee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrivingFeeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrivingFeeInfo::CopyFrom(const DrivingFeeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrivingFeeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void DrivingFeeInfo::Swap(DrivingFeeInfo* other) {
  if (other != this) {
    std::swap(normal_distance_, other->normal_distance_);
    std::swap(cur_distance_, other->cur_distance_);
    std::swap(empty_distance_, other->empty_distance_);
    std::swap(night_distance_, other->night_distance_);
    std::swap(slow_time_, other->slow_time_);
    std::swap(slow_cur_time_, other->slow_cur_time_);
    std::swap(normal_fee_, other->normal_fee_);
    std::swap(normal_act_fee_, other->normal_act_fee_);
    std::swap(empty_fee_, other->empty_fee_);
    std::swap(empty_act_fee_, other->empty_act_fee_);
    std::swap(night_fee_, other->night_fee_);
    std::swap(night_act_fee_, other->night_act_fee_);
    std::swap(slow_fee_, other->slow_fee_);
    std::swap(display_fee_, other->display_fee_);
    std::swap(actual_fee_, other->actual_fee_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(start_fee_, other->start_fee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrivingFeeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrivingFeeInfo_descriptor_;
  metadata.reflection = DrivingFeeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DriverBroadcastOrderExtraInfo::kSendNumFieldNumber;
#endif  // !_MSC_VER

DriverBroadcastOrderExtraInfo::DriverBroadcastOrderExtraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DriverBroadcastOrderExtraInfo::InitAsDefaultInstance() {
}

DriverBroadcastOrderExtraInfo::DriverBroadcastOrderExtraInfo(const DriverBroadcastOrderExtraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DriverBroadcastOrderExtraInfo::SharedCtor() {
  _cached_size_ = 0;
  send_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DriverBroadcastOrderExtraInfo::~DriverBroadcastOrderExtraInfo() {
  SharedDtor();
}

void DriverBroadcastOrderExtraInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DriverBroadcastOrderExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriverBroadcastOrderExtraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriverBroadcastOrderExtraInfo_descriptor_;
}

const DriverBroadcastOrderExtraInfo& DriverBroadcastOrderExtraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
  return *default_instance_;
}

DriverBroadcastOrderExtraInfo* DriverBroadcastOrderExtraInfo::default_instance_ = NULL;

DriverBroadcastOrderExtraInfo* DriverBroadcastOrderExtraInfo::New() const {
  return new DriverBroadcastOrderExtraInfo;
}

void DriverBroadcastOrderExtraInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    send_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DriverBroadcastOrderExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 send_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_num_)));
          set_has_send_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DriverBroadcastOrderExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 send_num = 1;
  if (has_send_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->send_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DriverBroadcastOrderExtraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 send_num = 1;
  if (has_send_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->send_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DriverBroadcastOrderExtraInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 send_num = 1;
    if (has_send_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriverBroadcastOrderExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DriverBroadcastOrderExtraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DriverBroadcastOrderExtraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DriverBroadcastOrderExtraInfo::MergeFrom(const DriverBroadcastOrderExtraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_send_num()) {
      set_send_num(from.send_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DriverBroadcastOrderExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverBroadcastOrderExtraInfo::CopyFrom(const DriverBroadcastOrderExtraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverBroadcastOrderExtraInfo::IsInitialized() const {

  return true;
}

void DriverBroadcastOrderExtraInfo::Swap(DriverBroadcastOrderExtraInfo* other) {
  if (other != this) {
    std::swap(send_num_, other->send_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DriverBroadcastOrderExtraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DriverBroadcastOrderExtraInfo_descriptor_;
  metadata.reflection = DriverBroadcastOrderExtraInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DidiPush

// @@protoc_insertion_point(global_scope)
