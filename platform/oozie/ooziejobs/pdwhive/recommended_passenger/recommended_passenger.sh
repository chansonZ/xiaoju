#function description: 
#procedure name: P_DM_RECOMMENDED_PASSENGER
#creator:MARS
#created:
#!/bin/bash
#today date
V_DATE=$1

if [ -z ${V_DATE} ];then
        V_DATE=`date +%Y-%m-%d`
fi

#yesterday data partition
V_PARYEAR=`date --date="$V_DATE-1 day" +%Y`
V_PARMONTH=`date --date="$V_DATE-1 day" +%m`
V_PARDAY=`date --date="$V_DATE-1 day" +%d`
V_PARYESTERDAY=`date --date="$V_DATE-1 day" +%Y%m%d`
#today,yesterday,7 day  ago,30 days ago,2 days ago  date
V_TODAY=`date -d $V_DATE "+%Y-%m-%d"`
V_YESTERDAY=`date --date="$V_DATE-1 day" +%Y-%m-%d`
V_7DAYS=`date --date="$V_DATE-7 day" +%Y-%m-%d`
V_WEEK=`date --date="$V_DATE-7 day" +%Y-%m-%d`
V_THREEWEEKS=`date --date="$V_DATE-21 day" +%Y-%m-%d`
V_THREEMONTHS=`date --date="$V_DATE-90 day" +%Y-%m-%d`
V_SIXMONTHS=`date --date="$V_DATE-180 day" +%Y-%m-%d`
V_15DAYS=`date --date="$V_DATE-15 day" +%Y-%m-%d`
V_30DAYS=`date --date="$V_DATE-30 day" +%Y-%m-%d`
V_TWODAYS=`date --date="$V_DATE-2 day" +%Y-%m-%d`
#30 days ago, 2 days ago data partition 
V_PAR7DAYS=`date --date="$V_DATE-7 day" +%Y%m%d`
V_PAR15DAYS=`date --date="$V_DATE-15 day" +%Y%m%d`
V_PAR30DAYS=`date --date="$V_DATE-30 day" +%Y%m%d`
V_PAR2DAYS=`date --date="$V_DATE-2 day" +%Y%m%d`
# 被推荐乘客数 		:RECOMMENDED_PASSENGER_CNT
# 新增呼叫乘客人数	:NEW_REGANDCALL_PASSENGERCNT 
# 被推荐乘客注册数	:RECOMMENDED_REG_PASSENGERCNT
# 被推荐乘客注册占比 :RECOMMENDED_REG_PASSENGERCNT/RECOMMENDED_PASSENGER_CNT
# 被推荐乘客一次呼叫占比（分母是推荐人数） 			:RECOMMENDED_CALL_PASSENGERCNT/RECOMMENDED_PASSENGER_CNT
# 被推荐乘客注册后一次呼叫数占比（分母是注册人数）  :RECOMMENDED_CALL_PASSENGERCNT/RECOMMENDED_REG_PASSENGERCNT
# 被推荐注册乘客占总新增注册比例 :  RECOMMENDED_REG_PASSENGERCNT/NEW_REG_PASSENGER
# 被推荐呼叫乘客占总新增呼叫比例 :  RECOMMENDED_CALL_PASSENGERCNT/NEW_REGANDCALL_PASSENGERCNT
/home/xiaoju/hive-0.10.0/bin/hive -e"use app;
set hive.optimize.cp=true;
set hive.map.aggr=true;
set hive.groupby.mapaggr.checkinterval = 100000;
set hive.exec.parallel=true;
INSERT OVERWRITE TABLE RECOMMENDED_PASSENGER PARTITION(YEAR='$V_PARYEAR',MONTH='$V_PARMONTH',DAY='$V_PARDAY')
SELECT 0 STATID,
	   '$V_YESTERDAY' STATDATE,
	   A.AREA,
	   0 CHANNEL,
	   (CASE WHEN B.RECOMMENDED_PASSENGER_CNT IS NOT NULL THEN B.RECOMMENDED_PASSENGER_CNT ELSE CAST(0 AS BIGINT) END) RECOMMENDED_PASSENGER_CNT,
	   (CASE WHEN D.NEW_REGANDCALL_PASSENGERCNT IS NOT NULL THEN  D.NEW_REGANDCALL_PASSENGERCNT ELSE CAST(0 AS BIGINT) END) NEW_REGANDCALL_PASSENGERCNT,
	   (CASE WHEN B.RECOMMENDED_REG_PASSENGERCNT IS NOT NULL THEN B.RECOMMENDED_REG_PASSENGERCNT  ELSE CAST(0 AS BIGINT) END) RECOMMENDED_REG_PASSENGERCNT ,
	   (CASE WHEN B.RECOMMENDED_REG_PASSENGERCNT IS NOT NULL AND B.RECOMMENDED_PASSENGER_CNT IS NOT NULL AND B.RECOMMENDED_PASSENGER_CNT <>0
					THEN ROUND(B.RECOMMENDED_REG_PASSENGERCNT/B.RECOMMENDED_PASSENGER_CNT,3)
				ELSE 0.00 END) RECOMMENDED_REG_RATE,
	   (CASE WHEN C.RECOMMENDED_CALL_PASSENGERCNT IS NOT NULL AND B.RECOMMENDED_PASSENGER_CNT IS NOT NULL AND B.RECOMMENDED_PASSENGER_CNT <>0
					THEN ROUND(C.RECOMMENDED_CALL_PASSENGERCNT/B.RECOMMENDED_PASSENGER_CNT,3)
				ELSE 0.00 END) RECOMMENDED_CALL_REATE,
	   (CASE WHEN C.RECOMMENDED_CALL_PASSENGERCNT IS NOT NULL AND B.RECOMMENDED_REG_PASSENGERCNT IS NOT NULL AND B.RECOMMENDED_REG_PASSENGERCNT<>0
					THEN ROUND(C.RECOMMENDED_CALL_PASSENGERCNT/B.RECOMMENDED_REG_PASSENGERCNT,3)
				ELSE 0.00 END) RECOMMENDED_REGCALL_REATE,
	   (CASE WHEN B.RECOMMENDED_REG_PASSENGERCNT IS NOT NULL AND D.NEW_REG_PASSENGER IS NOT NULL AND D.NEW_REG_PASSENGER <>0
					THEN ROUND(B.RECOMMENDED_REG_PASSENGERCNT/D.NEW_REG_PASSENGER,3) 
				ELSE 0.00 END) RECOMMENDED_REG_NEWADD_RATE,
	   (CASE WHEN C.RECOMMENDED_CALL_PASSENGERCNT IS NOT NULL AND D.NEW_REGANDCALL_PASSENGERCNT IS NOT NULL AND D.NEW_REGANDCALL_PASSENGERCNT<>0
					THEN ROUND(C.RECOMMENDED_CALL_PASSENGERCNT/D.NEW_REGANDCALL_PASSENGERCNT,3)
				ELSE 0.00 END) RECOMMENDED_CALL_NEWADD_RATE
  FROM (SELECT CITYID AREA FROM PDW.CITY WHERE YEAR='$V_PARYEAR' AND MONTH='$V_PARMONTH' AND DAY='$V_PARDAY') A
LEFT OUTER JOIN
(
		SELECT (CASE WHEN AREA IS NULL THEN 10000 ELSE CAST(AREA AS INT) END) AREA,
			   COUNT(DISTINCT PHONE) RECOMMENDED_PASSENGER_CNT, 
			   COUNT(DISTINCT (CASE WHEN REGTIME='$V_YESTERDAY' THEN PHONE ELSE '0' END)) RECOMMENDED_REG_PASSENGERCNT
		  FROM PDW.RECOMMEND
		 WHERE YEAR='$V_PARYEAR'
		   AND MONTH='$V_PARMONTH'
		   AND DAY='$V_PARDAY'
		GROUP BY AREA
		GROUPING SETS (AREA,())
) B
ON (A.AREA=B.AREA)
LEFT OUTER JOIN
(
		SELECT (CASE WHEN AREA IS NULL THEN 10000 ELSE CAST(AREA AS INT) END) AREA,
				COUNT(DISTINCT PASSENGERID) RECOMMENDED_CALL_PASSENGERCNT  
		  FROM (SELECT DISTINCT PHONE
				  FROM PDW.RECOMMEND
				 WHERE YEAR='$V_PARYEAR'
				   AND MONTH='$V_PARMONTH'
				   AND DAY='$V_PARDAY'
				) A
		 JOIN  (SELECT PID,
					   PHONE
				  FROM PDW.PASSENGER
				 WHERE YEAR='$V_PARYEAR'
				   AND MONTH='$V_PARMONTH'
				   AND DAY='$V_PARDAY'
				) B
		   ON (A.PHONE=B.PHONE)
		 JOIN  (SELECT AREA,
					   PASSENGERID
				  FROM PDW.DW_ORDER
				 WHERE YEAR='$V_PARYEAR'
				   AND MONTH='$V_PARMONTH'
				   AND DAY='$V_PARDAY'
				) C
		  ON (B.PID = C.PASSENGERID)
		GROUP BY AREA
		GROUPING SETS(AREA,())
) C
ON (A.AREA=C.AREA)
LEFT OUTER JOIN
(
		SELECT (CASE WHEN AREA IS NULL THEN 10000 ELSE CAST(AREA AS INT) END) AREA,
			   COUNT(DISTINCT A.PID) NEW_REG_PASSENGER, 
			   COUNT(DISTINCT (CASE WHEN B.PASSENGERID IS NOT NULL THEN B.PASSENGERID ELSE 0 END)) NEW_REGANDCALL_PASSENGERCNT 
		  FROM
		(
		SELECT AREA,
		       PID
		  FROM PDW.PASSENGER
		 WHERE YEAR='$V_PARYEAR'
		   AND MONTH='$V_PARMONTH'
		   AND DAY='$V_PARDAY'
		   AND REGTIME>='$V_YESTERDAY'
		   AND REGTIME<'$V_TODAY'
		) A
		LEFT OUTER JOIN
		(
		SELECT PASSENGERID
		  FROM PDW.DW_ORDER
		 WHERE YEAR='$V_PARYEAR'
		   AND MONTH='$V_PARMONTH'
		   AND DAY='$V_PARDAY'
		) B
		ON (A.PID = B.PASSENGERID)
		GROUP BY AREA
		GROUPING SETS (AREA,())
) D
ON (A.AREA=D.AREA)
;"
/home/xiaoju/hadoop-1.0.4/bin/hadoop fs -touchz /user/xiaoju/data/bi/app/recommended_passenger/$V_PARYEAR/$V_PARMONTH/$V_PARDAY/_SUCCESS