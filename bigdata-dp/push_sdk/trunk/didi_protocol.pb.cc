// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: didi_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "didi_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DidiPush {

namespace {

const ::google::protobuf::Descriptor* UserAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrConnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrConnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrConnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrConnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrDisconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrDisconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrHeartbeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrHeartbeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrGetOnlineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrGetOnlineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrGetOnlineRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrGetOnlineRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrGetOnlineCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrGetOnlineCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrGetOnlineCountRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrGetOnlineCountRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrGetIfOnlineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrGetIfOnlineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrGetIfOnlineRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrGetIfOnlineRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrKickNoRspReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrKickNoRspReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterKickReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterKickReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterKickRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterKickRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterGetIfOnlineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterGetIfOnlineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterGetIfOnlineRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterGetIfOnlineRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterGetRouteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterGetRouteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterGetRouteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterGetRouteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterDelRouteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterDelRouteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterGetOnlineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterGetOnlineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterGetOnlineRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterGetOnlineRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterGetOnlineCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterGetOnlineCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMasterGetOnlineCountRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMasterGetOnlineCountRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthSvrAddUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthSvrAddUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthSvrDelUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthSvrDelUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthSvrLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthSvrLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthSvrLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthSvrLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthSvrQueryUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthSvrQueryUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthSvrQueryUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthSvrQueryUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthSvrSignReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthSvrSignReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthSvrSignRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthSvrSignRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coordinate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerCoordinateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerCoordinateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerCoordinateRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerCoordinateRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrSetRelationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrSetRelationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrSetRelationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrSetRelationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrAddRelationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrAddRelationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrAddRelationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrAddRelationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrDelRelationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrDelRelationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrDelRelationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrDelRelationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrGetRelationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrGetRelationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrGetRelationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrGetRelationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectSvrHeartbeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectSvrHeartbeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectSvrHeartbeatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectSvrHeartbeatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectSvrDelayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectSvrDelayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushSvrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushSvrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushSvrMultiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushSvrMultiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushSvrMultiReq_UserId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushSvrMultiReq_UserId_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushSvrMultiRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushSvrMultiRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushSvrRetryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushSvrRetryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Param_reflection_ = NULL;
const ::google::protobuf::Descriptor* DispatchSvrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DispatchSvrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DispatchSvrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DispatchSvrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSvrConnectChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSvrConnectChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppHeartbeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppHeartbeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdntSvrDownReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdntSvrDownReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushStatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushStatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushStatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushStatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatLogReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Constants_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OldRole_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Role_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Business_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RspCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CoordinateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RelationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PushStrategy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatEvent_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_didi_5fprotocol_2eproto() {
  protobuf_AddDesc_didi_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "didi_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  UserAgent_descriptor_ = file->message_type(0);
  static const int UserAgent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, os_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, client_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, carrier_operator_),
  };
  UserAgent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAgent_descriptor_,
      UserAgent::default_instance_,
      UserAgent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAgent));
  Header_descriptor_ = file->message_type(1);
  static const int Header_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, auth_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, user_agent_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  RspMsg_descriptor_ = file->message_type(2);
  static const int RspMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsg, rsp_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsg, rsp_msg_),
  };
  RspMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspMsg_descriptor_,
      RspMsg::default_instance_,
      RspMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspMsg));
  BinaryMsg_descriptor_ = file->message_type(3);
  static const int BinaryMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryMsg, payload_),
  };
  BinaryMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryMsg_descriptor_,
      BinaryMsg::default_instance_,
      BinaryMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryMsg));
  PushMsg_descriptor_ = file->message_type(4);
  static const int PushMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, need_rsp_),
  };
  PushMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMsg_descriptor_,
      PushMsg::default_instance_,
      PushMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMsg));
  ConnSvrConnectReq_descriptor_ = file->message_type(5);
  static const int ConnSvrConnectReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectReq, old_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectReq, secret_chap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectReq, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectReq, role_),
  };
  ConnSvrConnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrConnectReq_descriptor_,
      ConnSvrConnectReq::default_instance_,
      ConnSvrConnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrConnectReq));
  ConnSvrConnectRsp_descriptor_ = file->message_type(6);
  static const int ConnSvrConnectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectRsp, rsp_msg_),
  };
  ConnSvrConnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrConnectRsp_descriptor_,
      ConnSvrConnectRsp::default_instance_,
      ConnSvrConnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrConnectRsp));
  ConnSvrDisconnectReq_descriptor_ = file->message_type(7);
  static const int ConnSvrDisconnectReq_offsets_[1] = {
  };
  ConnSvrDisconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrDisconnectReq_descriptor_,
      ConnSvrDisconnectReq::default_instance_,
      ConnSvrDisconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrDisconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrDisconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrDisconnectReq));
  ConnSvrHeartbeatReq_descriptor_ = file->message_type(8);
  static const int ConnSvrHeartbeatReq_offsets_[1] = {
  };
  ConnSvrHeartbeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrHeartbeatReq_descriptor_,
      ConnSvrHeartbeatReq::default_instance_,
      ConnSvrHeartbeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrHeartbeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrHeartbeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrHeartbeatReq));
  ConnSvrGetOnlineReq_descriptor_ = file->message_type(9);
  static const int ConnSvrGetOnlineReq_offsets_[1] = {
  };
  ConnSvrGetOnlineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrGetOnlineReq_descriptor_,
      ConnSvrGetOnlineReq::default_instance_,
      ConnSvrGetOnlineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrGetOnlineReq));
  ConnSvrGetOnlineRsp_descriptor_ = file->message_type(10);
  static const int ConnSvrGetOnlineRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineRsp, user_id_),
  };
  ConnSvrGetOnlineRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrGetOnlineRsp_descriptor_,
      ConnSvrGetOnlineRsp::default_instance_,
      ConnSvrGetOnlineRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrGetOnlineRsp));
  ConnSvrGetOnlineCountReq_descriptor_ = file->message_type(11);
  static const int ConnSvrGetOnlineCountReq_offsets_[1] = {
  };
  ConnSvrGetOnlineCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrGetOnlineCountReq_descriptor_,
      ConnSvrGetOnlineCountReq::default_instance_,
      ConnSvrGetOnlineCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrGetOnlineCountReq));
  ConnSvrGetOnlineCountRsp_descriptor_ = file->message_type(12);
  static const int ConnSvrGetOnlineCountRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineCountRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineCountRsp, count_),
  };
  ConnSvrGetOnlineCountRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrGetOnlineCountRsp_descriptor_,
      ConnSvrGetOnlineCountRsp::default_instance_,
      ConnSvrGetOnlineCountRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineCountRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetOnlineCountRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrGetOnlineCountRsp));
  ConnSvrGetIfOnlineReq_descriptor_ = file->message_type(13);
  static const int ConnSvrGetIfOnlineReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetIfOnlineReq, user_id_),
  };
  ConnSvrGetIfOnlineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrGetIfOnlineReq_descriptor_,
      ConnSvrGetIfOnlineReq::default_instance_,
      ConnSvrGetIfOnlineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetIfOnlineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetIfOnlineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrGetIfOnlineReq));
  ConnSvrGetIfOnlineRsp_descriptor_ = file->message_type(14);
  static const int ConnSvrGetIfOnlineRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetIfOnlineRsp, user_id_),
  };
  ConnSvrGetIfOnlineRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrGetIfOnlineRsp_descriptor_,
      ConnSvrGetIfOnlineRsp::default_instance_,
      ConnSvrGetIfOnlineRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetIfOnlineRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrGetIfOnlineRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrGetIfOnlineRsp));
  ConnSvrKickNoRspReq_descriptor_ = file->message_type(15);
  static const int ConnSvrKickNoRspReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrKickNoRspReq, timestamp_),
  };
  ConnSvrKickNoRspReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrKickNoRspReq_descriptor_,
      ConnSvrKickNoRspReq::default_instance_,
      ConnSvrKickNoRspReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrKickNoRspReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrKickNoRspReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrKickNoRspReq));
  Address_descriptor_ = file->message_type(16);
  static const int Address_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, should_stat_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  ConnMasterKickReq_descriptor_ = file->message_type(17);
  static const int ConnMasterKickReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterKickReq, user_id_),
  };
  ConnMasterKickReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterKickReq_descriptor_,
      ConnMasterKickReq::default_instance_,
      ConnMasterKickReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterKickReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterKickReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterKickReq));
  ConnMasterKickRsp_descriptor_ = file->message_type(18);
  static const int ConnMasterKickRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterKickRsp, rc_),
  };
  ConnMasterKickRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterKickRsp_descriptor_,
      ConnMasterKickRsp::default_instance_,
      ConnMasterKickRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterKickRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterKickRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterKickRsp));
  ConnMasterGetIfOnlineReq_descriptor_ = file->message_type(19);
  static const int ConnMasterGetIfOnlineReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetIfOnlineReq, user_id_),
  };
  ConnMasterGetIfOnlineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterGetIfOnlineReq_descriptor_,
      ConnMasterGetIfOnlineReq::default_instance_,
      ConnMasterGetIfOnlineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetIfOnlineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetIfOnlineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterGetIfOnlineReq));
  ConnMasterGetIfOnlineRsp_descriptor_ = file->message_type(20);
  static const int ConnMasterGetIfOnlineRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetIfOnlineRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetIfOnlineRsp, user_id_),
  };
  ConnMasterGetIfOnlineRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterGetIfOnlineRsp_descriptor_,
      ConnMasterGetIfOnlineRsp::default_instance_,
      ConnMasterGetIfOnlineRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetIfOnlineRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetIfOnlineRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterGetIfOnlineRsp));
  ConnMasterGetRouteReq_descriptor_ = file->message_type(21);
  static const int ConnMasterGetRouteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetRouteReq, user_id_),
  };
  ConnMasterGetRouteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterGetRouteReq_descriptor_,
      ConnMasterGetRouteReq::default_instance_,
      ConnMasterGetRouteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetRouteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetRouteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterGetRouteReq));
  ConnMasterGetRouteRsp_descriptor_ = file->message_type(22);
  static const int ConnMasterGetRouteRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetRouteRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetRouteRsp, conn_svr_),
  };
  ConnMasterGetRouteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterGetRouteRsp_descriptor_,
      ConnMasterGetRouteRsp::default_instance_,
      ConnMasterGetRouteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetRouteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetRouteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterGetRouteRsp));
  ConnMasterDelRouteReq_descriptor_ = file->message_type(23);
  static const int ConnMasterDelRouteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterDelRouteReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterDelRouteReq, timestamp_),
  };
  ConnMasterDelRouteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterDelRouteReq_descriptor_,
      ConnMasterDelRouteReq::default_instance_,
      ConnMasterDelRouteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterDelRouteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterDelRouteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterDelRouteReq));
  ConnMasterGetOnlineReq_descriptor_ = file->message_type(24);
  static const int ConnMasterGetOnlineReq_offsets_[1] = {
  };
  ConnMasterGetOnlineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterGetOnlineReq_descriptor_,
      ConnMasterGetOnlineReq::default_instance_,
      ConnMasterGetOnlineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterGetOnlineReq));
  ConnMasterGetOnlineRsp_descriptor_ = file->message_type(25);
  static const int ConnMasterGetOnlineRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineRsp, user_id_),
  };
  ConnMasterGetOnlineRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterGetOnlineRsp_descriptor_,
      ConnMasterGetOnlineRsp::default_instance_,
      ConnMasterGetOnlineRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterGetOnlineRsp));
  ConnMasterGetOnlineCountReq_descriptor_ = file->message_type(26);
  static const int ConnMasterGetOnlineCountReq_offsets_[1] = {
  };
  ConnMasterGetOnlineCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterGetOnlineCountReq_descriptor_,
      ConnMasterGetOnlineCountReq::default_instance_,
      ConnMasterGetOnlineCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterGetOnlineCountReq));
  ConnMasterGetOnlineCountRsp_descriptor_ = file->message_type(27);
  static const int ConnMasterGetOnlineCountRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineCountRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineCountRsp, count_),
  };
  ConnMasterGetOnlineCountRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMasterGetOnlineCountRsp_descriptor_,
      ConnMasterGetOnlineCountRsp::default_instance_,
      ConnMasterGetOnlineCountRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineCountRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMasterGetOnlineCountRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMasterGetOnlineCountRsp));
  AuthSvrAddUserReq_descriptor_ = file->message_type(28);
  static const int AuthSvrAddUserReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrAddUserReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrAddUserReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrAddUserReq, phone_num_),
  };
  AuthSvrAddUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthSvrAddUserReq_descriptor_,
      AuthSvrAddUserReq::default_instance_,
      AuthSvrAddUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrAddUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrAddUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthSvrAddUserReq));
  AuthSvrDelUserReq_descriptor_ = file->message_type(29);
  static const int AuthSvrDelUserReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrDelUserReq, user_id_),
  };
  AuthSvrDelUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthSvrDelUserReq_descriptor_,
      AuthSvrDelUserReq::default_instance_,
      AuthSvrDelUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrDelUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrDelUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthSvrDelUserReq));
  AuthSvrLoginReq_descriptor_ = file->message_type(30);
  static const int AuthSvrLoginReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginReq, secret_chap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginReq, random_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginReq, role_),
  };
  AuthSvrLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthSvrLoginReq_descriptor_,
      AuthSvrLoginReq::default_instance_,
      AuthSvrLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthSvrLoginReq));
  AuthSvrLoginRsp_descriptor_ = file->message_type(31);
  static const int AuthSvrLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginRsp, user_id_),
  };
  AuthSvrLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthSvrLoginRsp_descriptor_,
      AuthSvrLoginRsp::default_instance_,
      AuthSvrLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthSvrLoginRsp));
  AuthSvrQueryUserReq_descriptor_ = file->message_type(32);
  static const int AuthSvrQueryUserReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrQueryUserReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrQueryUserReq, role_),
  };
  AuthSvrQueryUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthSvrQueryUserReq_descriptor_,
      AuthSvrQueryUserReq::default_instance_,
      AuthSvrQueryUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrQueryUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrQueryUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthSvrQueryUserReq));
  AuthSvrQueryUserRsp_descriptor_ = file->message_type(33);
  static const int AuthSvrQueryUserRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrQueryUserRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrQueryUserRsp, user_id_),
  };
  AuthSvrQueryUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthSvrQueryUserRsp_descriptor_,
      AuthSvrQueryUserRsp::default_instance_,
      AuthSvrQueryUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrQueryUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrQueryUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthSvrQueryUserRsp));
  AuthSvrSignReq_descriptor_ = file->message_type(34);
  static const int AuthSvrSignReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrSignReq, content_),
  };
  AuthSvrSignReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthSvrSignReq_descriptor_,
      AuthSvrSignReq::default_instance_,
      AuthSvrSignReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrSignReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrSignReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthSvrSignReq));
  AuthSvrSignRsp_descriptor_ = file->message_type(35);
  static const int AuthSvrSignRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrSignRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrSignRsp, hmac_),
  };
  AuthSvrSignRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthSvrSignRsp_descriptor_,
      AuthSvrSignRsp::default_instance_,
      AuthSvrSignRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrSignRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSvrSignRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthSvrSignRsp));
  Coordinate_descriptor_ = file->message_type(36);
  static const int Coordinate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, dy_),
  };
  Coordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coordinate_descriptor_,
      Coordinate::default_instance_,
      Coordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coordinate));
  CdntSvrUpReq_descriptor_ = file->message_type(37);
  static const int CdntSvrUpReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrUpReq, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrUpReq, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrUpReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrUpReq, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrUpReq, pull_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrUpReq, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrUpReq, dy_),
  };
  CdntSvrUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrUpReq_descriptor_,
      CdntSvrUpReq::default_instance_,
      CdntSvrUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrUpReq));
  PeerCoordinateInfo_descriptor_ = file->message_type(38);
  static const int PeerCoordinateInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateInfo, local_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateInfo, coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateInfo, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateInfo, wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateInfo, is_arrived_limited_),
  };
  PeerCoordinateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerCoordinateInfo_descriptor_,
      PeerCoordinateInfo::default_instance_,
      PeerCoordinateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerCoordinateInfo));
  PeerCoordinateRelation_descriptor_ = file->message_type(39);
  static const int PeerCoordinateRelation_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateRelation, local_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateRelation, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateRelation, inactive_expire_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateRelation, last_active_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateRelation, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateRelation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateRelation, biz_type_),
  };
  PeerCoordinateRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerCoordinateRelation_descriptor_,
      PeerCoordinateRelation::default_instance_,
      PeerCoordinateRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCoordinateRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerCoordinateRelation));
  CdntSvrSetRelationReq_descriptor_ = file->message_type(40);
  static const int CdntSvrSetRelationReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrSetRelationReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrSetRelationReq, relations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrSetRelationReq, type_),
  };
  CdntSvrSetRelationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrSetRelationReq_descriptor_,
      CdntSvrSetRelationReq::default_instance_,
      CdntSvrSetRelationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrSetRelationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrSetRelationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrSetRelationReq));
  CdntSvrSetRelationRsp_descriptor_ = file->message_type(41);
  static const int CdntSvrSetRelationRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrSetRelationRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrSetRelationRsp, relations_),
  };
  CdntSvrSetRelationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrSetRelationRsp_descriptor_,
      CdntSvrSetRelationRsp::default_instance_,
      CdntSvrSetRelationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrSetRelationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrSetRelationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrSetRelationRsp));
  CdntSvrAddRelationReq_descriptor_ = file->message_type(42);
  static const int CdntSvrAddRelationReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrAddRelationReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrAddRelationReq, relations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrAddRelationReq, type_),
  };
  CdntSvrAddRelationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrAddRelationReq_descriptor_,
      CdntSvrAddRelationReq::default_instance_,
      CdntSvrAddRelationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrAddRelationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrAddRelationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrAddRelationReq));
  CdntSvrAddRelationRsp_descriptor_ = file->message_type(43);
  static const int CdntSvrAddRelationRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrAddRelationRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrAddRelationRsp, relations_),
  };
  CdntSvrAddRelationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrAddRelationRsp_descriptor_,
      CdntSvrAddRelationRsp::default_instance_,
      CdntSvrAddRelationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrAddRelationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrAddRelationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrAddRelationRsp));
  CdntSvrDelRelationReq_descriptor_ = file->message_type(44);
  static const int CdntSvrDelRelationReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDelRelationReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDelRelationReq, local_ids_),
  };
  CdntSvrDelRelationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrDelRelationReq_descriptor_,
      CdntSvrDelRelationReq::default_instance_,
      CdntSvrDelRelationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDelRelationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDelRelationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrDelRelationReq));
  CdntSvrDelRelationRsp_descriptor_ = file->message_type(45);
  static const int CdntSvrDelRelationRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDelRelationRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDelRelationRsp, relations_),
  };
  CdntSvrDelRelationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrDelRelationRsp_descriptor_,
      CdntSvrDelRelationRsp::default_instance_,
      CdntSvrDelRelationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDelRelationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDelRelationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrDelRelationRsp));
  CdntSvrGetRelationReq_descriptor_ = file->message_type(46);
  static const int CdntSvrGetRelationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrGetRelationReq, user_id_),
  };
  CdntSvrGetRelationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrGetRelationReq_descriptor_,
      CdntSvrGetRelationReq::default_instance_,
      CdntSvrGetRelationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrGetRelationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrGetRelationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrGetRelationReq));
  CdntSvrGetRelationRsp_descriptor_ = file->message_type(47);
  static const int CdntSvrGetRelationRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrGetRelationRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrGetRelationRsp, relations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrGetRelationRsp, type_),
  };
  CdntSvrGetRelationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrGetRelationRsp_descriptor_,
      CdntSvrGetRelationRsp::default_instance_,
      CdntSvrGetRelationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrGetRelationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrGetRelationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrGetRelationRsp));
  CollectSvrHeartbeatReq_descriptor_ = file->message_type(48);
  static const int CollectSvrHeartbeatReq_offsets_[1] = {
  };
  CollectSvrHeartbeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectSvrHeartbeatReq_descriptor_,
      CollectSvrHeartbeatReq::default_instance_,
      CollectSvrHeartbeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrHeartbeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrHeartbeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectSvrHeartbeatReq));
  CollectSvrHeartbeatRsp_descriptor_ = file->message_type(49);
  static const int CollectSvrHeartbeatRsp_offsets_[1] = {
  };
  CollectSvrHeartbeatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectSvrHeartbeatRsp_descriptor_,
      CollectSvrHeartbeatRsp::default_instance_,
      CollectSvrHeartbeatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrHeartbeatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrHeartbeatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectSvrHeartbeatRsp));
  CollectSvrDelayReq_descriptor_ = file->message_type(50);
  static const int CollectSvrDelayReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrDelayReq, time_),
  };
  CollectSvrDelayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectSvrDelayReq_descriptor_,
      CollectSvrDelayReq::default_instance_,
      CollectSvrDelayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrDelayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrDelayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectSvrDelayReq));
  PushSvrReq_descriptor_ = file->message_type(51);
  static const int PushSvrReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, old_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, push_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, push_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, expire_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, log_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, sms_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, timeout_to_sms_),
  };
  PushSvrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushSvrReq_descriptor_,
      PushSvrReq::default_instance_,
      PushSvrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushSvrReq));
  PushSvrMultiReq_descriptor_ = file->message_type(52);
  static const int PushSvrMultiReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq, push_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq, push_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq, expire_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq, log_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq, sms_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq, timeout_to_sms_),
  };
  PushSvrMultiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushSvrMultiReq_descriptor_,
      PushSvrMultiReq::default_instance_,
      PushSvrMultiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushSvrMultiReq));
  PushSvrMultiReq_UserId_descriptor_ = PushSvrMultiReq_descriptor_->nested_type(0);
  static const int PushSvrMultiReq_UserId_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq_UserId, old_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq_UserId, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq_UserId, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq_UserId, role_),
  };
  PushSvrMultiReq_UserId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushSvrMultiReq_UserId_descriptor_,
      PushSvrMultiReq_UserId::default_instance_,
      PushSvrMultiReq_UserId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq_UserId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiReq_UserId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushSvrMultiReq_UserId));
  PushSvrMultiRsp_descriptor_ = file->message_type(53);
  static const int PushSvrMultiRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiRsp, rsps_),
  };
  PushSvrMultiRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushSvrMultiRsp_descriptor_,
      PushSvrMultiRsp::default_instance_,
      PushSvrMultiRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrMultiRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushSvrMultiRsp));
  PushSvrRetryReq_descriptor_ = file->message_type(54);
  static const int PushSvrRetryReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrRetryReq, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrRetryReq, message_id_),
  };
  PushSvrRetryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushSvrRetryReq_descriptor_,
      PushSvrRetryReq::default_instance_,
      PushSvrRetryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrRetryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushSvrRetryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushSvrRetryReq));
  Param_descriptor_ = file->message_type(55);
  static const int Param_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, data_),
  };
  Param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Param_descriptor_,
      Param::default_instance_,
      Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Param));
  DispatchSvrReq_descriptor_ = file->message_type(56);
  static const int DispatchSvrReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrReq, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrReq, query_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrReq, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrReq, post_data_),
  };
  DispatchSvrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DispatchSvrReq_descriptor_,
      DispatchSvrReq::default_instance_,
      DispatchSvrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DispatchSvrReq));
  DispatchSvrRsp_descriptor_ = file->message_type(57);
  static const int DispatchSvrRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrRsp, sys_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrRsp, http_status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrRsp, body_),
  };
  DispatchSvrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DispatchSvrRsp_descriptor_,
      DispatchSvrRsp::default_instance_,
      DispatchSvrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchSvrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DispatchSvrRsp));
  ConnSvrConnectChallenge_descriptor_ = file->message_type(58);
  static const int ConnSvrConnectChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectChallenge, random_msg_),
  };
  ConnSvrConnectChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSvrConnectChallenge_descriptor_,
      ConnSvrConnectChallenge::default_instance_,
      ConnSvrConnectChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSvrConnectChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSvrConnectChallenge));
  AppHeartbeatReq_descriptor_ = file->message_type(59);
  static const int AppHeartbeatReq_offsets_[1] = {
  };
  AppHeartbeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppHeartbeatReq_descriptor_,
      AppHeartbeatReq::default_instance_,
      AppHeartbeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppHeartbeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppHeartbeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppHeartbeatReq));
  CdntSvrDownReq_descriptor_ = file->message_type(60);
  static const int CdntSvrDownReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDownReq, peer_coordinate_infos_),
  };
  CdntSvrDownReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdntSvrDownReq_descriptor_,
      CdntSvrDownReq::default_instance_,
      CdntSvrDownReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDownReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdntSvrDownReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdntSvrDownReq));
  PushStatReq_descriptor_ = file->message_type(61);
  static const int PushStatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStatReq, task_ids_),
  };
  PushStatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushStatReq_descriptor_,
      PushStatReq::default_instance_,
      PushStatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushStatReq));
  PushStat_descriptor_ = file->message_type(62);
  static const int PushStat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, send_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, recv_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, in1s_recv_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, in3s_recv_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, in6s_recv_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, in10s_recv_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, in30s_recv_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, in60s_recv_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, gt60s_recv_cnt_),
  };
  PushStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushStat_descriptor_,
      PushStat::default_instance_,
      PushStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushStat));
  PushStatRsp_descriptor_ = file->message_type(63);
  static const int PushStatRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStatRsp, stats_),
  };
  PushStatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushStatRsp_descriptor_,
      PushStatRsp::default_instance_,
      PushStatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushStatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushStatRsp));
  StatLogReq_descriptor_ = file->message_type(64);
  static const int StatLogReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatLogReq, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatLogReq, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatLogReq, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatLogReq, gap_us_),
  };
  StatLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatLogReq_descriptor_,
      StatLogReq::default_instance_,
      StatLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatLogReq));
  Constants_descriptor_ = file->enum_type(0);
  NodeType_descriptor_ = file->enum_type(1);
  MsgType_descriptor_ = file->enum_type(2);
  OldRole_descriptor_ = file->enum_type(3);
  Role_descriptor_ = file->enum_type(4);
  Business_descriptor_ = file->enum_type(5);
  RspCode_descriptor_ = file->enum_type(6);
  CoordinateType_descriptor_ = file->enum_type(7);
  RelationType_descriptor_ = file->enum_type(8);
  PushStrategy_descriptor_ = file->enum_type(9);
  StatEvent_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_didi_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAgent_descriptor_, &UserAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspMsg_descriptor_, &RspMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryMsg_descriptor_, &BinaryMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMsg_descriptor_, &PushMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrConnectReq_descriptor_, &ConnSvrConnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrConnectRsp_descriptor_, &ConnSvrConnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrDisconnectReq_descriptor_, &ConnSvrDisconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrHeartbeatReq_descriptor_, &ConnSvrHeartbeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrGetOnlineReq_descriptor_, &ConnSvrGetOnlineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrGetOnlineRsp_descriptor_, &ConnSvrGetOnlineRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrGetOnlineCountReq_descriptor_, &ConnSvrGetOnlineCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrGetOnlineCountRsp_descriptor_, &ConnSvrGetOnlineCountRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrGetIfOnlineReq_descriptor_, &ConnSvrGetIfOnlineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrGetIfOnlineRsp_descriptor_, &ConnSvrGetIfOnlineRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrKickNoRspReq_descriptor_, &ConnSvrKickNoRspReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterKickReq_descriptor_, &ConnMasterKickReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterKickRsp_descriptor_, &ConnMasterKickRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterGetIfOnlineReq_descriptor_, &ConnMasterGetIfOnlineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterGetIfOnlineRsp_descriptor_, &ConnMasterGetIfOnlineRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterGetRouteReq_descriptor_, &ConnMasterGetRouteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterGetRouteRsp_descriptor_, &ConnMasterGetRouteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterDelRouteReq_descriptor_, &ConnMasterDelRouteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterGetOnlineReq_descriptor_, &ConnMasterGetOnlineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterGetOnlineRsp_descriptor_, &ConnMasterGetOnlineRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterGetOnlineCountReq_descriptor_, &ConnMasterGetOnlineCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMasterGetOnlineCountRsp_descriptor_, &ConnMasterGetOnlineCountRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthSvrAddUserReq_descriptor_, &AuthSvrAddUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthSvrDelUserReq_descriptor_, &AuthSvrDelUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthSvrLoginReq_descriptor_, &AuthSvrLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthSvrLoginRsp_descriptor_, &AuthSvrLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthSvrQueryUserReq_descriptor_, &AuthSvrQueryUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthSvrQueryUserRsp_descriptor_, &AuthSvrQueryUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthSvrSignReq_descriptor_, &AuthSvrSignReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthSvrSignRsp_descriptor_, &AuthSvrSignRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coordinate_descriptor_, &Coordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrUpReq_descriptor_, &CdntSvrUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerCoordinateInfo_descriptor_, &PeerCoordinateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerCoordinateRelation_descriptor_, &PeerCoordinateRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrSetRelationReq_descriptor_, &CdntSvrSetRelationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrSetRelationRsp_descriptor_, &CdntSvrSetRelationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrAddRelationReq_descriptor_, &CdntSvrAddRelationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrAddRelationRsp_descriptor_, &CdntSvrAddRelationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrDelRelationReq_descriptor_, &CdntSvrDelRelationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrDelRelationRsp_descriptor_, &CdntSvrDelRelationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrGetRelationReq_descriptor_, &CdntSvrGetRelationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrGetRelationRsp_descriptor_, &CdntSvrGetRelationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectSvrHeartbeatReq_descriptor_, &CollectSvrHeartbeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectSvrHeartbeatRsp_descriptor_, &CollectSvrHeartbeatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectSvrDelayReq_descriptor_, &CollectSvrDelayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushSvrReq_descriptor_, &PushSvrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushSvrMultiReq_descriptor_, &PushSvrMultiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushSvrMultiReq_UserId_descriptor_, &PushSvrMultiReq_UserId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushSvrMultiRsp_descriptor_, &PushSvrMultiRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushSvrRetryReq_descriptor_, &PushSvrRetryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Param_descriptor_, &Param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DispatchSvrReq_descriptor_, &DispatchSvrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DispatchSvrRsp_descriptor_, &DispatchSvrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSvrConnectChallenge_descriptor_, &ConnSvrConnectChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppHeartbeatReq_descriptor_, &AppHeartbeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdntSvrDownReq_descriptor_, &CdntSvrDownReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushStatReq_descriptor_, &PushStatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushStat_descriptor_, &PushStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushStatRsp_descriptor_, &PushStatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatLogReq_descriptor_, &StatLogReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_didi_5fprotocol_2eproto() {
  delete UserAgent::default_instance_;
  delete UserAgent_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete RspMsg::default_instance_;
  delete RspMsg_reflection_;
  delete BinaryMsg::default_instance_;
  delete BinaryMsg_reflection_;
  delete PushMsg::default_instance_;
  delete PushMsg_reflection_;
  delete ConnSvrConnectReq::default_instance_;
  delete ConnSvrConnectReq_reflection_;
  delete ConnSvrConnectRsp::default_instance_;
  delete ConnSvrConnectRsp_reflection_;
  delete ConnSvrDisconnectReq::default_instance_;
  delete ConnSvrDisconnectReq_reflection_;
  delete ConnSvrHeartbeatReq::default_instance_;
  delete ConnSvrHeartbeatReq_reflection_;
  delete ConnSvrGetOnlineReq::default_instance_;
  delete ConnSvrGetOnlineReq_reflection_;
  delete ConnSvrGetOnlineRsp::default_instance_;
  delete ConnSvrGetOnlineRsp_reflection_;
  delete ConnSvrGetOnlineCountReq::default_instance_;
  delete ConnSvrGetOnlineCountReq_reflection_;
  delete ConnSvrGetOnlineCountRsp::default_instance_;
  delete ConnSvrGetOnlineCountRsp_reflection_;
  delete ConnSvrGetIfOnlineReq::default_instance_;
  delete ConnSvrGetIfOnlineReq_reflection_;
  delete ConnSvrGetIfOnlineRsp::default_instance_;
  delete ConnSvrGetIfOnlineRsp_reflection_;
  delete ConnSvrKickNoRspReq::default_instance_;
  delete ConnSvrKickNoRspReq_reflection_;
  delete Address::default_instance_;
  delete Address_reflection_;
  delete ConnMasterKickReq::default_instance_;
  delete ConnMasterKickReq_reflection_;
  delete ConnMasterKickRsp::default_instance_;
  delete ConnMasterKickRsp_reflection_;
  delete ConnMasterGetIfOnlineReq::default_instance_;
  delete ConnMasterGetIfOnlineReq_reflection_;
  delete ConnMasterGetIfOnlineRsp::default_instance_;
  delete ConnMasterGetIfOnlineRsp_reflection_;
  delete ConnMasterGetRouteReq::default_instance_;
  delete ConnMasterGetRouteReq_reflection_;
  delete ConnMasterGetRouteRsp::default_instance_;
  delete ConnMasterGetRouteRsp_reflection_;
  delete ConnMasterDelRouteReq::default_instance_;
  delete ConnMasterDelRouteReq_reflection_;
  delete ConnMasterGetOnlineReq::default_instance_;
  delete ConnMasterGetOnlineReq_reflection_;
  delete ConnMasterGetOnlineRsp::default_instance_;
  delete ConnMasterGetOnlineRsp_reflection_;
  delete ConnMasterGetOnlineCountReq::default_instance_;
  delete ConnMasterGetOnlineCountReq_reflection_;
  delete ConnMasterGetOnlineCountRsp::default_instance_;
  delete ConnMasterGetOnlineCountRsp_reflection_;
  delete AuthSvrAddUserReq::default_instance_;
  delete AuthSvrAddUserReq_reflection_;
  delete AuthSvrDelUserReq::default_instance_;
  delete AuthSvrDelUserReq_reflection_;
  delete AuthSvrLoginReq::default_instance_;
  delete AuthSvrLoginReq_reflection_;
  delete AuthSvrLoginRsp::default_instance_;
  delete AuthSvrLoginRsp_reflection_;
  delete AuthSvrQueryUserReq::default_instance_;
  delete AuthSvrQueryUserReq_reflection_;
  delete AuthSvrQueryUserRsp::default_instance_;
  delete AuthSvrQueryUserRsp_reflection_;
  delete AuthSvrSignReq::default_instance_;
  delete AuthSvrSignReq_reflection_;
  delete AuthSvrSignRsp::default_instance_;
  delete AuthSvrSignRsp_reflection_;
  delete Coordinate::default_instance_;
  delete Coordinate_reflection_;
  delete CdntSvrUpReq::default_instance_;
  delete CdntSvrUpReq_reflection_;
  delete PeerCoordinateInfo::default_instance_;
  delete PeerCoordinateInfo_reflection_;
  delete PeerCoordinateRelation::default_instance_;
  delete PeerCoordinateRelation_reflection_;
  delete CdntSvrSetRelationReq::default_instance_;
  delete CdntSvrSetRelationReq_reflection_;
  delete CdntSvrSetRelationRsp::default_instance_;
  delete CdntSvrSetRelationRsp_reflection_;
  delete CdntSvrAddRelationReq::default_instance_;
  delete CdntSvrAddRelationReq_reflection_;
  delete CdntSvrAddRelationRsp::default_instance_;
  delete CdntSvrAddRelationRsp_reflection_;
  delete CdntSvrDelRelationReq::default_instance_;
  delete CdntSvrDelRelationReq_reflection_;
  delete CdntSvrDelRelationRsp::default_instance_;
  delete CdntSvrDelRelationRsp_reflection_;
  delete CdntSvrGetRelationReq::default_instance_;
  delete CdntSvrGetRelationReq_reflection_;
  delete CdntSvrGetRelationRsp::default_instance_;
  delete CdntSvrGetRelationRsp_reflection_;
  delete CollectSvrHeartbeatReq::default_instance_;
  delete CollectSvrHeartbeatReq_reflection_;
  delete CollectSvrHeartbeatRsp::default_instance_;
  delete CollectSvrHeartbeatRsp_reflection_;
  delete CollectSvrDelayReq::default_instance_;
  delete CollectSvrDelayReq_reflection_;
  delete PushSvrReq::default_instance_;
  delete PushSvrReq_reflection_;
  delete PushSvrMultiReq::default_instance_;
  delete PushSvrMultiReq_reflection_;
  delete PushSvrMultiReq_UserId::default_instance_;
  delete PushSvrMultiReq_UserId_reflection_;
  delete PushSvrMultiRsp::default_instance_;
  delete PushSvrMultiRsp_reflection_;
  delete PushSvrRetryReq::default_instance_;
  delete PushSvrRetryReq_reflection_;
  delete Param::default_instance_;
  delete Param_reflection_;
  delete DispatchSvrReq::default_instance_;
  delete DispatchSvrReq_reflection_;
  delete DispatchSvrRsp::default_instance_;
  delete DispatchSvrRsp_reflection_;
  delete ConnSvrConnectChallenge::default_instance_;
  delete ConnSvrConnectChallenge_reflection_;
  delete AppHeartbeatReq::default_instance_;
  delete AppHeartbeatReq_reflection_;
  delete CdntSvrDownReq::default_instance_;
  delete CdntSvrDownReq_reflection_;
  delete PushStatReq::default_instance_;
  delete PushStatReq_reflection_;
  delete PushStat::default_instance_;
  delete PushStat_reflection_;
  delete PushStatRsp::default_instance_;
  delete PushStatRsp_reflection_;
  delete StatLogReq::default_instance_;
  delete StatLogReq_reflection_;
}

void protobuf_AddDesc_didi_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023didi_protocol.proto\022\010DidiPush\"\214\001\n\tUser"
    "Agent\022\017\n\007os_type\030\001 \001(\t\022\016\n\006os_ver\030\002 \001(\t\022\r"
    "\n\005model\030\003 \001(\t\022\022\n\nclient_ver\030\004 \001(\t\022\017\n\007net"
    "work\030\005 \001(\t\022\020\n\010location\030\006 \001(\t\022\030\n\020carrier_"
    "operator\030\007 \001(\t\"\210\001\n\006Header\022\037\n\004type\030\001 \002(\0162"
    "\021.DidiPush.MsgType\022\016\n\006msg_id\030\002 \001(\004\022\024\n\014au"
    "th_user_id\030\003 \001(\004\022\016\n\006log_id\030\004 \001(\014\022\'\n\nuser"
    "_agent\030\005 \001(\0132\023.DidiPush.UserAgent\"+\n\006Rsp"
    "Msg\022\020\n\010rsp_code\030\001 \002(\005\022\017\n\007rsp_msg\030\002 \001(\t\"*"
    "\n\tBinaryMsg\022\014\n\004type\030\001 \002(\r\022\017\n\007payload\030\002 \001"
    "(\014\"[\n\007PushMsg\022\014\n\004type\030\001 \002(\r\022\017\n\007payload\030\002"
    " \001(\014\022\017\n\007task_id\030\003 \001(\004\022\016\n\006msg_id\030\004 \001(\014\022\020\n"
    "\010need_rsp\030\005 \001(\010\"\202\001\n\021ConnSvrConnectReq\022\021\n"
    "\tphone_num\030\001 \002(\t\022#\n\010old_role\030\002 \001(\0162\021.Did"
    "iPush.OldRole\022\023\n\013secret_chap\030\003 \002(\014\022\022\n\nus"
    "er_agent\030\004 \001(\014\022\014\n\004role\030\005 \001(\005\"6\n\021ConnSvrC"
    "onnectRsp\022!\n\007rsp_msg\030\001 \002(\0132\020.DidiPush.Rs"
    "pMsg\"\026\n\024ConnSvrDisconnectReq\"\025\n\023ConnSvrH"
    "eartbeatReq\"\025\n\023ConnSvrGetOnlineReq\"I\n\023Co"
    "nnSvrGetOnlineRsp\022!\n\007rsp_msg\030\001 \002(\0132\020.Did"
    "iPush.RspMsg\022\017\n\007user_id\030\002 \003(\004\"\032\n\030ConnSvr"
    "GetOnlineCountReq\"L\n\030ConnSvrGetOnlineCou"
    "ntRsp\022!\n\007rsp_msg\030\001 \002(\0132\020.DidiPush.RspMsg"
    "\022\r\n\005count\030\002 \002(\004\"(\n\025ConnSvrGetIfOnlineReq"
    "\022\017\n\007user_id\030\001 \003(\004\"(\n\025ConnSvrGetIfOnlineR"
    "sp\022\017\n\007user_id\030\001 \003(\004\"(\n\023ConnSvrKickNoRspR"
    "eq\022\021\n\ttimestamp\030\001 \001(\004\"U\n\007Address\022\n\n\002ip\030\001"
    " \002(\t\022\014\n\004port\030\002 \002(\r\022\024\n\ttimestamp\030\003 \001(\004:\0010"
    "\022\032\n\013should_stat\030\004 \001(\010:\005false\"$\n\021ConnMast"
    "erKickReq\022\017\n\007user_id\030\001 \002(\004\"\037\n\021ConnMaster"
    "KickRsp\022\n\n\002rc\030\001 \002(\005\"+\n\030ConnMasterGetIfOn"
    "lineReq\022\017\n\007user_id\030\001 \003(\004\"N\n\030ConnMasterGe"
    "tIfOnlineRsp\022!\n\007rsp_msg\030\001 \002(\0132\020.DidiPush"
    ".RspMsg\022\017\n\007user_id\030\002 \003(\004\"(\n\025ConnMasterGe"
    "tRouteReq\022\017\n\007user_id\030\001 \002(\004\"_\n\025ConnMaster"
    "GetRouteRsp\022!\n\007rsp_msg\030\001 \002(\0132\020.DidiPush."
    "RspMsg\022#\n\010conn_svr\030\002 \001(\0132\021.DidiPush.Addr"
    "ess\">\n\025ConnMasterDelRouteReq\022\017\n\007user_id\030"
    "\001 \002(\004\022\024\n\ttimestamp\030\002 \001(\004:\0010\"\030\n\026ConnMaste"
    "rGetOnlineReq\"L\n\026ConnMasterGetOnlineRsp\022"
    "!\n\007rsp_msg\030\001 \002(\0132\020.DidiPush.RspMsg\022\017\n\007us"
    "er_id\030\002 \003(\004\"\035\n\033ConnMasterGetOnlineCountR"
    "eq\"O\n\033ConnMasterGetOnlineCountRsp\022!\n\007rsp"
    "_msg\030\001 \002(\0132\020.DidiPush.RspMsg\022\r\n\005count\030\002 "
    "\002(\004\"F\n\021AuthSvrAddUserReq\022\017\n\007user_id\030\001 \002("
    "\004\022\r\n\005token\030\002 \002(\014\022\021\n\tphone_num\030\003 \002(\t\"$\n\021A"
    "uthSvrDelUserReq\022\017\n\007user_id\030\001 \002(\004\"[\n\017Aut"
    "hSvrLoginReq\022\021\n\tphone_num\030\001 \002(\t\022\023\n\013secre"
    "t_chap\030\003 \002(\014\022\022\n\nrandom_msg\030\004 \002(\014\022\014\n\004role"
    "\030\005 \002(\005\"E\n\017AuthSvrLoginRsp\022!\n\007rsp_msg\030\001 \002"
    "(\0132\020.DidiPush.RspMsg\022\017\n\007user_id\030\002 \002(\004\"6\n"
    "\023AuthSvrQueryUserReq\022\021\n\tphone_num\030\001 \002(\t\022"
    "\014\n\004role\030\003 \002(\005\"I\n\023AuthSvrQueryUserRsp\022!\n\007"
    "rsp_msg\030\001 \002(\0132\020.DidiPush.RspMsg\022\017\n\007user_"
    "id\030\002 \001(\004\"!\n\016AuthSvrSignReq\022\017\n\007content\030\001 "
    "\002(\014\"A\n\016AuthSvrSignRsp\022!\n\007rsp_msg\030\001 \002(\0132\020"
    ".DidiPush.RspMsg\022\014\n\004hmac\030\002 \001(\t\"u\n\nCoordi"
    "nate\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022&\n\004type\030\003 \002(\016"
    "2\030.DidiPush.CoordinateType\022\021\n\ttimestamp\030"
    "\004 \001(\r\022\n\n\002dx\030\005 \001(\001\022\n\n\002dy\030\006 \001(\001\"\212\001\n\014CdntSv"
    "rUpReq\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022&\n\004type\030\003 \002"
    "(\0162\030.DidiPush.CoordinateType\022\021\n\ttimestam"
    "p\030\004 \001(\r\022\021\n\tpull_peer\030\005 \001(\010\022\n\n\002dx\030\006 \001(\001\022\n"
    "\n\002dy\030\007 \001(\001\"\221\001\n\022PeerCoordinateInfo\022\020\n\010loc"
    "al_id\030\001 \002(\t\022(\n\ncoordinate\030\002 \002(\0132\024.DidiPu"
    "sh.Coordinate\022\020\n\010distance\030\003 \002(\r\022\021\n\twait_"
    "time\030\004 \002(\r\022\032\n\022is_arrived_limited\030\005 \001(\010\"\310"
    "\001\n\026PeerCoordinateRelation\022\020\n\010local_id\030\001 "
    "\002(\t\022\017\n\007user_id\030\002 \002(\004\022\037\n\027inactive_expire_"
    "seconds\030\003 \002(\r\022\035\n\025last_active_timestamp\030\004"
    " \001(\r\022\023\n\013create_time\030\005 \001(\r\022$\n\004type\030\006 \001(\0162"
    "\026.DidiPush.RelationType\022\020\n\010biz_type\030\007 \001("
    "\r\"\205\001\n\025CdntSvrSetRelationReq\022\017\n\007user_id\030\001"
    " \002(\004\0223\n\trelations\030\002 \003(\0132 .DidiPush.PeerC"
    "oordinateRelation\022&\n\004type\030\003 \001(\0162\030.DidiPu"
    "sh.CoordinateType\"o\n\025CdntSvrSetRelationR"
    "sp\022!\n\007rsp_msg\030\001 \002(\0132\020.DidiPush.RspMsg\0223\n"
    "\trelations\030\002 \003(\0132 .DidiPush.PeerCoordina"
    "teRelation\"\205\001\n\025CdntSvrAddRelationReq\022\017\n\007"
    "user_id\030\001 \002(\004\0223\n\trelations\030\002 \003(\0132 .DidiP"
    "ush.PeerCoordinateRelation\022&\n\004type\030\003 \001(\016"
    "2\030.DidiPush.CoordinateType\"o\n\025CdntSvrAdd"
    "RelationRsp\022!\n\007rsp_msg\030\001 \002(\0132\020.DidiPush."
    "RspMsg\0223\n\trelations\030\002 \003(\0132 .DidiPush.Pee"
    "rCoordinateRelation\";\n\025CdntSvrDelRelatio"
    "nReq\022\017\n\007user_id\030\001 \002(\004\022\021\n\tlocal_ids\030\002 \003(\t"
    "\"o\n\025CdntSvrDelRelationRsp\022!\n\007rsp_msg\030\001 \002"
    "(\0132\020.DidiPush.RspMsg\0223\n\trelations\030\002 \003(\0132"
    " .DidiPush.PeerCoordinateRelation\"(\n\025Cdn"
    "tSvrGetRelationReq\022\017\n\007user_id\030\001 \002(\004\"\227\001\n\025"
    "CdntSvrGetRelationRsp\022!\n\007rsp_msg\030\001 \002(\0132\020"
    ".DidiPush.RspMsg\0223\n\trelations\030\002 \003(\0132 .Di"
    "diPush.PeerCoordinateRelation\022&\n\004type\030\003 "
    "\001(\0162\030.DidiPush.CoordinateType\"\030\n\026Collect"
    "SvrHeartbeatReq\"\030\n\026CollectSvrHeartbeatRs"
    "p\"\"\n\022CollectSvrDelayReq\022\014\n\004time\030\001 \001(\003\"\211\002"
    "\n\nPushSvrReq\022#\n\010old_role\030\001 \001(\0162\021.DidiPus"
    "h.OldRole\022\021\n\tphone_num\030\002 \001(\t\022#\n\010push_msg"
    "\030\003 \002(\0132\021.DidiPush.PushMsg\022-\n\rpush_strate"
    "gy\030\004 \002(\0162\026.DidiPush.PushStrategy\022\017\n\007user"
    "_id\030\005 \001(\004\022\026\n\016expire_seconds\030\006 \001(\r\022\017\n\007log"
    "_str\030\007 \001(\t\022\014\n\004role\030\010 \001(\005\022\017\n\007sms_msg\030\t \001("
    "\t\022\026\n\016timeout_to_sms\030\n \001(\r\"\311\002\n\017PushSvrMul"
    "tiReq\022/\n\005users\030\001 \003(\0132 .DidiPush.PushSvrM"
    "ultiReq.UserId\022#\n\010push_msg\030\002 \002(\0132\021.DidiP"
    "ush.PushMsg\022-\n\rpush_strategy\030\003 \002(\0162\026.Did"
    "iPush.PushStrategy\022\026\n\016expire_seconds\030\004 \001"
    "(\r\022\017\n\007log_str\030\005 \001(\t\022\017\n\007sms_msg\030\006 \001(\t\022\026\n\016"
    "timeout_to_sms\030\007 \001(\r\032_\n\006UserId\022#\n\010old_ro"
    "le\030\001 \001(\0162\021.DidiPush.OldRole\022\021\n\tphone_num"
    "\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\004\022\014\n\004role\030\004 \001(\005\"1\n"
    "\017PushSvrMultiRsp\022\036\n\004rsps\030\001 \003(\0132\020.DidiPus"
    "h.RspMsg\"H\n\017PushSvrRetryReq\022!\n\003msg\030\001 \002(\013"
    "2\024.DidiPush.PushSvrReq\022\022\n\nmessage_id\030\002 \002"
    "(\004\"\"\n\005Param\022\013\n\003key\030\001 \002(\014\022\014\n\004data\030\002 \002(\014\"n"
    "\n\016DispatchSvrReq\022\014\n\004path\030\001 \002(\t\022%\n\014query_"
    "params\030\002 \003(\0132\017.DidiPush.Param\022\024\n\014content"
    "_type\030\003 \001(\t\022\021\n\tpost_data\030\004 \001(\014\"J\n\016Dispat"
    "chSvrRsp\022\020\n\010sys_code\030\001 \002(\005\022\030\n\020http_statu"
    "s_code\030\002 \001(\005\022\014\n\004body\030\003 \001(\014\"-\n\027ConnSvrCon"
    "nectChallenge\022\022\n\nrandom_msg\030\001 \002(\014\"\021\n\017App"
    "HeartbeatReq\"M\n\016CdntSvrDownReq\022;\n\025peer_c"
    "oordinate_infos\030\001 \003(\0132\034.DidiPush.PeerCoo"
    "rdinateInfo\"\037\n\013PushStatReq\022\020\n\010task_ids\030\001"
    " \003(\004\"\344\001\n\010PushStat\022\017\n\007task_id\030\001 \002(\004\022\020\n\010se"
    "nd_cnt\030\002 \001(\r\022\020\n\010recv_cnt\030\003 \001(\r\022\025\n\rin1s_r"
    "ecv_cnt\030\004 \001(\r\022\025\n\rin3s_recv_cnt\030\005 \001(\r\022\025\n\r"
    "in6s_recv_cnt\030\006 \001(\r\022\026\n\016in10s_recv_cnt\030\007 "
    "\001(\r\022\026\n\016in30s_recv_cnt\030\010 \001(\r\022\026\n\016in60s_rec"
    "v_cnt\030\t \001(\r\022\026\n\016gt60s_recv_cnt\030\n \001(\r\"0\n\013P"
    "ushStatRsp\022!\n\005stats\030\001 \003(\0132\022.DidiPush.Pus"
    "hStat\"N\n\nStatLogReq\022\r\n\005event\030\001 \002(\r\022\017\n\007ta"
    "sk_id\030\002 \002(\004\022\020\n\010msg_type\030\003 \001(\r\022\016\n\006gap_us\030"
    "\004 \001(\004*D\n\tConstants\022\014\n\006kMagic\020\324\260\001\022\021\n\rkNod"
    "eTypeMask\020\017\022\026\n\022kNodeTypeShiftBits\020\010*\333\002\n\010"
    "NodeType\022\020\n\014kNodeTypeMin\020\000\022\020\n\014kNodeTypeA"
    "pp\020\001\022\024\n\020kNodeTypeConnSvr\020\002\022\032\n\026kNodeTypeC"
    "onnMasterSvr\020\003\022\024\n\020kNodeTypeCdntSvr\020\004\022\024\n\020"
    "kNodeTypeAuthSvr\020\005\022\024\n\020kNodeTypePushSvr\020\006"
    "\022\027\n\023kNodeTypeCollectSvr\020\007\022\030\n\024kNodeTypeDi"
    "spatchSvr\020\010\022\027\n\023kNodeTypeMessageSvr\020\t\022\027\n\023"
    "kNodeTypeSessionSvr\020\n\022\024\n\020kNodeTypeFileSv"
    "r\020\013\022\026\n\022kNodeTypeRepushSvr\020\014\022\022\n\016kNodeType"
    "DbSvr\020\r\022\020\n\014kNodeTypeMax\020\017*\317#\n\007MsgType\022\017\n"
    "\013kMsgTypeMin\020\000\022\027\n\022kMsgTypeAppTypeMin\020\200\002\022"
    "$\n\037kMsgTypeConnSvrConnectChallenge\020\201\002\022\034\n"
    "\027kMsgTypeAppHeartbeatReq\020\203\002\022\034\n\027kMsgTypeA"
    "ppHeartbeatRsp\020\204\002\022\033\n\026kMsgTypeCdntSvrDown"
    "Req\020\205\002\022\033\n\026kMsgTypeCdntSvrDownRsp\020\206\002\022\036\n\031k"
    "MsgTypeAppPushMessageReq\020\207\002\022\036\n\031kMsgTypeA"
    "ppPushMessageRsp\020\210\002\022\027\n\022kMsgTypeAppTypeMa"
    "x\020\377\003\022\033\n\026kMsgTypeConnSvrTypeMin\020\200\004\022\036\n\031kMs"
    "gTypeConnSvrConnectReq\020\201\004\022\036\n\031kMsgTypeCon"
    "nSvrConnectRsp\020\202\004\022!\n\034kMsgTypeConnSvrDisc"
    "onnectReq\020\203\004\022!\n\034kMsgTypeConnSvrDisconnec"
    "tRsp\020\204\004\022 \n\033kMsgTypeConnSvrGetOnlineReq\020\205"
    "\004\022 \n\033kMsgTypeConnSvrGetOnlineRsp\020\206\004\022%\n k"
    "MsgTypeConnSvrGetOnlineCountReq\020\207\004\022%\n kM"
    "sgTypeConnSvrGetOnlineCountRsp\020\210\004\022 \n\033kMs"
    "gTypeConnSvrHeartbeatReq\020\211\004\022 \n\033kMsgTypeC"
    "onnSvrHeartbeatRsp\020\212\004\022\"\n\035kMsgTypeConnSvr"
    "GetIfOnlineReq\020\213\004\022\"\n\035kMsgTypeConnSvrGetI"
    "fOnlineRsp\020\214\004\022 \n\033kMsgTypeConnSvrKickNoRs"
    "pReq\020\215\004\022\033\n\026kMsgTypeConnSvrTypeMax\020\377\005\022\036\n\031"
    "kMsgTypeConnMasterTypeMin\020\200\006\022\"\n\035kMsgType"
    "ConnMasterGetRouteReq\020\201\006\022\"\n\035kMsgTypeConn"
    "MasterGetRouteRsp\020\202\006\022\"\n\035kMsgTypeConnMast"
    "erSetRouteReq\020\203\006\022\"\n\035kMsgTypeConnMasterSe"
    "tRouteRsp\020\204\006\022\"\n\035kMsgTypeConnMasterDelRou"
    "teReq\020\205\006\022\"\n\035kMsgTypeConnMasterDelRouteRs"
    "p\020\206\006\022#\n\036kMsgTypeConnMasterGetOnlineReq\020\207"
    "\006\022#\n\036kMsgTypeConnMasterGetOnlineRsp\020\210\006\022("
    "\n#kMsgTypeConnMasterGetOnlineCountReq\020\211\006"
    "\022(\n#kMsgTypeConnMasterGetOnlineCountRsp\020"
    "\212\006\022%\n kMsgTypeConnMasterGetIfOnlineReq\020\213"
    "\006\022%\n kMsgTypeConnMasterGetIfOnlineRsp\020\214\006"
    "\022\036\n\031kMsgTypeConnMasterKickReq\020\215\006\022\036\n\031kMsg"
    "TypeConnMasterKickRsp\020\216\006\022\036\n\031kMsgTypeConn"
    "MasterTypeMax\020\377\007\022\033\n\026kMsgTypeCdntSvrTypeM"
    "in\020\200\010\022\031\n\024kMsgTypeCdntSvrUpReq\020\201\010\022\031\n\024kMsg"
    "TypeCdntSvrUpRsp\020\202\010\022\"\n\035kMsgTypeCdntSvrSe"
    "tRelationReq\020\203\010\022\"\n\035kMsgTypeCdntSvrSetRel"
    "ationRsp\020\204\010\022\"\n\035kMsgTypeCdntSvrDelRelatio"
    "nReq\020\205\010\022\"\n\035kMsgTypeCdntSvrDelRelationRsp"
    "\020\206\010\022\"\n\035kMsgTypeCdntSvrGetRelationReq\020\207\010\022"
    "\"\n\035kMsgTypeCdntSvrGetRelationRsp\020\210\010\022\"\n\035k"
    "MsgTypeCdntSvrAddRelationReq\020\211\010\022\"\n\035kMsgT"
    "ypeCdntSvrAddRelationRsp\020\212\010\022\033\n\026kMsgTypeC"
    "dntSvrTypeMax\020\377\t\022\033\n\026kMsgTypeAuthSvrTypeM"
    "in\020\200\n\022\036\n\031kMsgTypeAuthSvrAddUserReq\020\201\n\022\036\n"
    "\031kMsgTypeAuthSvrAddUserRsp\020\202\n\022\036\n\031kMsgTyp"
    "eAuthSvrDelUserReq\020\203\n\022\036\n\031kMsgTypeAuthSvr"
    "DelUserRsp\020\204\n\022\034\n\027kMsgTypeAuthSvrLoginReq"
    "\020\205\n\022\034\n\027kMsgTypeAuthSvrLoginRsp\020\206\n\022 \n\033kMs"
    "gTypeAuthSvrQueryUserReq\020\207\n\022 \n\033kMsgTypeA"
    "uthSvrQueryUserRsp\020\210\n\022\033\n\026kMsgTypeAuthSvr"
    "SignReq\020\211\n\022\033\n\026kMsgTypeAuthSvrSginRsp\020\212\n\022"
    "\033\n\026kMsgTypeAuthSvrTypeMax\020\377\013\022\033\n\026kMsgType"
    "PushSvrTypeMin\020\200\014\022\027\n\022kMsgTypePushSvrReq\020"
    "\201\014\022\027\n\022kMsgTypePushSvrRsp\020\202\014\022\034\n\027kMsgTypeP"
    "ushSvrMultiReq\020\203\014\022\034\n\027kMsgTypePushSvrMult"
    "iRsp\020\204\014\022\035\n\030kMsgTypePushSvrAppRspReq\020\205\014\022\034"
    "\n\027kMsgTypePushSvrRetryReq\020\207\014\022\034\n\027kMsgType"
    "PushSvrRetryRsp\020\210\014\022\030\n\023kMsgTypePushStatRe"
    "q\020\211\014\022\030\n\023kMsgTypePushStatRsp\020\220\014\022\033\n\026kMsgTy"
    "pePushSvrTypeMax\020\377\r\022\036\n\031kMsgTypeCollectSv"
    "rTypeMin\020\200\016\022\037\n\032kMsgTypeCollectSvrNoRspRe"
    "q\020\201\016\022#\n\036kMsgTypeCollectSvrHeartbeatReq\020\203"
    "\016\022#\n\036kMsgTypeCollectSvrHeartbeatRsp\020\204\016\022\037"
    "\n\032kMsgTypeCollectSvrDelayReq\020\376\017\022\036\n\031kMsgT"
    "ypeCollectSvrTypeMax\020\377\017\022\037\n\032kMsgTypeDispa"
    "tchSvrTypeMin\020\200\020\022 \n\033kMsgTypeDispatchSvrN"
    "oRspReq\020\201\020\022\033\n\026kMsgTypeDispatchSvrReq\020\203\020\022"
    "\033\n\026kMsgTypeDispatchSvrRsp\020\204\020\022\037\n\032kMsgType"
    "DispatchSvrTypeMax\020\377\021\022\036\n\031kMsgTypeMessage"
    "SvrTypeMin\020\200\022\022%\n kMsgTypeMessageSvrGetSe"
    "ssionsReq\020\201\022\022%\n kMsgTypeMessageSvrGetSes"
    "sionsRsp\020\202\022\022%\n kMsgTypeMessageSvrGetMess"
    "agesReq\020\203\022\022%\n kMsgTypeMessageSvrGetMessa"
    "gesRsp\020\204\022\022\"\n\035kMsgTypeMessageSvrSendTextR"
    "eq\020\205\022\022\"\n\035kMsgTypeMessageSvrSendTextRsp\020\206"
    "\022\022#\n\036kMsgTypeMessageSvrNewObjectReq\020\207\022\022#"
    "\n\036kMsgTypeMessageSvrNewObjectRsp\020\210\022\022$\n\037k"
    "MsgTypeMessageSvrSendObjectReq\020\211\022\022$\n\037kMs"
    "gTypeMessageSvrSendObjectRsp\020\212\022\022#\n\036kMsgT"
    "ypeMessageSvrNotification\020\213\022\022\036\n\031kMsgType"
    "MessageSvrTypeMax\020\377\023\022\036\n\031kMsgTypeSessionS"
    "vrTypeMin\020\200\024\022 \n\033kMsgTypeSessionSvrCreate"
    "Req\020\201\024\022 \n\033kMsgTypeSessionSvrCreateRsp\020\202\024"
    "\022 \n\033kMsgTypeSessionSvrFreezeReq\020\203\024\022 \n\033kM"
    "sgTypeSessionSvrFreezeRsp\020\204\024\022%\n kMsgType"
    "SessionSvrGetSessionsReq\020\205\024\022%\n kMsgTypeS"
    "essionSvrGetSessionsRsp\020\206\024\022$\n\037kMsgTypeSe"
    "ssionSvrNewMessageReq\020\207\024\022$\n\037kMsgTypeSess"
    "ionSvrNewMessageRsp\020\210\024\022$\n\037kMsgTypeSessio"
    "nSvrGetMessageReq\020\211\024\022$\n\037kMsgTypeSessionS"
    "vrGetMessageRsp\020\212\024\022#\n\036kMsgTypeSessionSvr"
    "NewObjectReq\020\213\024\022#\n\036kMsgTypeSessionSvrNew"
    "ObjectRsp\020\214\024\022$\n\037kMsgTypeSessionSvrSendOb"
    "jectReq\020\215\024\022$\n\037kMsgTypeSessionSvrSendObje"
    "ctRsp\020\216\024\022%\n kMsgTypeSessionSvrCheckObjec"
    "tReq\020\217\024\022%\n kMsgTypeSessionSvrCheckObject"
    "Rsp\020\220\024\022\036\n\031kMsgTypeSessionSvrTypeMax\020\377\025\022\033"
    "\n\026kMsgTypeFileSvrTypeMin\020\200\026\022\035\n\030kMsgTypeF"
    "ileSvrUploadReq\020\201\026\022\035\n\030kMsgTypeFileSvrUpl"
    "oadRsp\020\202\026\022\037\n\032kMsgTypeFileSvrDownloadReq\020"
    "\203\026\022\037\n\032kMsgTypeFileSvrDownloadRsp\020\204\026\022\033\n\026k"
    "MsgTypeFileSvrTypeMax\020\377\027\022\035\n\030kMsgTypeRepu"
    "shSvrTypeMin\020\200\030\022!\n\034kMsgTypeRepushSvrStag"
    "eMsgReq\020\201\030\022!\n\034kMsgTypeRepushSvrStageMsgR"
    "sp\020\202\030\022\035\n\030kMsgTypeRepushSvrTypeMax\020\377\031\022\031\n\024"
    "kMsgTypeDbSvrTypeMin\020\200\032\022\035\n\030kMsgTypeDbSvr"
    "SqlQueryReq\020\201\032\022\035\n\030kMsgTypeDbSvrSqlQueryR"
    "sp\020\202\032\022\034\n\027kMsgTypeDbSvrSqlExecReq\020\203\032\022\034\n\027k"
    "MsgTypeDbSvrSqlExecRsp\020\204\032\022\035\n\030kMsgTypeDbS"
    "vrSelectDbReq\020\205\032\022\035\n\030kMsgTypeDbSvrSelectD"
    "bRsp\020\206\032\022\037\n\032kMsgTypeDbSvrInvalidReqRsp\020\210\032"
    "\022\031\n\024kMsgTypeDbSvrTypeMax\020\377\033*H\n\007OldRole\022\016"
    "\n\nOldUnknown\020\000\022\r\n\tOldDriver\020\001\022\020\n\014OldPass"
    "enger\020\002\022\014\n\010OldPilot\020\003*,\n\004Role\022\n\n\006Driver\020"
    "\000\022\r\n\tPassenger\020\001\022\t\n\005Pilot\020\002*$\n\010Business\022"
    "\010\n\004Taxi\020\000\022\016\n\nGulfStream\020\001*\210\022\n\007RspCode\022\026\n"
    "\022kRspCodeConnSvrMin\020\001\022\033\n\027kRspCodeConnSvr"
    "TimedOut\020\002\022 \n\034kRspCodeConnSvrInternalErr"
    "or\020\003\022\026\n\022kRspCodeConnSvrMax\020c\022\027\n\022kRspCode"
    "CdntSvrMin\020\311\001\022\034\n\027kRspCodeCdntSvrNotExist"
    "\020\312\001\022\"\n\035kRspCodeCdntSvrAccessCkvError\020\313\001\022"
    "\035\n\030kRspCodeCdntSvrArgsError\020\314\001\022\027\n\022kRspCo"
    "deCdntSvrMax\020\253\002\022\032\n\025kRspCodeConnMasterMin"
    "\020\221\003\022\"\n\035kRspCodeConnMasterKeyNotExist\020\222\003\022"
    "\037\n\032kRspCodeConnMasterTimedOut\020\223\003\022(\n#kRsp"
    "CodeConnMasterAccessCkvTimedOut\020\224\003\022$\n\037kR"
    "spCodeConnMasterPbDecodeError\020\225\003\022&\n!kRsp"
    "CodeConnMasterCkvDecodeFailed\020\226\003\022\"\n\035kRsp"
    "CodeConnMasterCkvCasNewer\020\227\003\022&\n!kRspCode"
    "ConnMasterKeyExistWhenAdd\020\230\003\022\'\n\"kRspCode"
    "ConnMasterIfOnlineOutRange\020\231\003\022\032\n\025kRspCod"
    "eConnMasterMax\020\363\003\022\027\n\022kRspCodeAuthSvrMin\020"
    "\331\004\022\037\n\032kRspCodeAuthSvrKeyNotExist\020\332\004\022\036\n\031k"
    "RspCodeAuthSvrParamError\020\333\004\022!\n\034kRspCodeA"
    "uthSvrDelTokenError\020\334\004\022!\n\034kRspCodeAuthSv"
    "rAddTokenError\020\335\004\022\036\n\031kRspCodeAuthSvrLogi"
    "nError\020\336\004\022\"\n\035kRspCodeAuthSvrGetUserIdErr"
    "or\020\337\004\022\037\n\032kRspCodeAuthSvrDecodeError\020\340\004\022#"
    "\n\036kRspCodeAuthSvrHmacEncodeError\020\341\004\022%\n k"
    "RspCodeAuthSvrBase64EncodeError\020\342\004\022\027\n\022kR"
    "spCodeAuthSvrMax\020\273\005\022\027\n\022kRspCodePushSvrMi"
    "n\020\200\014\022!\n\034kRspCodePushSvrInternalError\020\201\014\022"
    "\035\n\030kRspCodePushSvrMsgStaged\020\202\014\022\037\n\032kRspCo"
    "dePushSvrInvalidArgs\020\203\014\022\037\n\032kRspCodePushS"
    "vrKeyNotExist\020\204\014\022\036\n\031kRspCodePushSvrSmsMs"
    "gSend\020\205\014\022\027\n\022kRspCodePushSvrMax\020\377\r\022\032\n\025kRs"
    "pCodeMessageSvrMin\020\200\022\022\036\n\031kRspCodeMessage"
    "SvrTimeOut\020\201\022\022\"\n\035kRspCodeMessageSvrInval"
    "idArgs\020\202\022\022\037\n\032kRspCodeMessageSvrCkvError\020"
    "\203\022\022%\n kRspCodeMessageSvrGetServerError\020\204"
    "\022\022\"\n\035kRspCodeMessageSvrToPushError\020\205\022\022%\n"
    " kRspCodeMessageSvrToSessionError\020\206\022\022)\n$"
    "kRspCodeMessageSvrSessionInvalidArgs\020\207\022\022"
    "\"\n\035kRspCodeMessageSvrDecodeError\020\210\022\022\032\n\025k"
    "RspCodeMessageSvrMax\020\377\023\022\032\n\025kRspCodeSessi"
    "onSvrMin\020\200\024\022\037\n\032kRspCodeSessionSvrTryAgai"
    "n\020\201\024\022\'\n\"kRspCodeSessionSvrInvalidArgumen"
    "ts\020\202\024\022$\n\037kRspCodeSessionSvrNoSuchSession"
    "\020\203\024\022\035\n\030kRspCodeSessionSvrFrozen\020\204\024\022 \n\033kR"
    "spCodeSessionSvrForbidden\020\205\024\022\032\n\025kRspCode"
    "SessionSvrMax\020\377\025\022\027\n\022kRspCodeFileSvrMin\020\200"
    "\026\022\034\n\027kRspCodeFileSvrTimedOut\020\201\026\022\036\n\031kRspC"
    "odeFileSvrStateError\020\202\026\022#\n\036kRspCodeFileS"
    "vrNoSessionServer\020\203\026\022%\n kRspCodeFileSvrV"
    "erificationError\020\204\026\022\037\n\032kRspCodeFileSvrNo"
    "CkvServer\020\205\026\022\037\n\032kRspCodeFileSvrCkvSetErr"
    "or\020\206\026\022\037\n\032kRspCodeFileSvrKeyNotExist\020\207\026\022)"
    "\n$kRspCodeFileSvrSessionNotReturnToken\020\210"
    "\026\022\037\n\032kRspCodeFileSvrKeyHasExist\020\211\026\022#\n\036kR"
    "spCodeFileSvrCkvDecodeFailed\020\212\026\022\027\n\022kRspC"
    "odeFileSvrMax\020\377\027\022\031\n\024kRspCodeRepushSvrMin"
    "\020\200\030\022!\n\034kRspCodeRepushSvrInvalidArgs\020\201\030\022!"
    "\n\034kRspCodeRepushSvrKeyNotExist\020\202\030\022\031\n\024kRs"
    "pCodeRepushSvrMax\020\377\031*3\n\016CoordinateType\022\t"
    "\n\005BD_09\020\001\022\n\n\006GCJ_02\020\002\022\n\n\006WGS_84\020\004*G\n\014Rel"
    "ationType\022\031\n\025kRelationTypeRealTime\020\000\022\034\n\030"
    "kRelationTypeReservation\020\001*\200\001\n\014PushStrat"
    "egy\022\033\n\027kPushStrategyNoResponse\020\001\022\035\n\031kPus"
    "hStrategyStatResponse\020\002\022\030\n\024kPushStrategy"
    "TryBest\020\003\022\032\n\026kPushStrategyMobileMsg\020\004*G\n"
    "\tStatEvent\022\022\n\016kStatEventSend\020\000\022\022\n\016kStatE"
    "ventRecv\020\001\022\022\n\016kStatEventView\020\002B+\n\025com.sd"
    "u.didi.protobufB\022DiDiCommonProtobuf", 13155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "didi_protocol.proto", &protobuf_RegisterTypes);
  UserAgent::default_instance_ = new UserAgent();
  Header::default_instance_ = new Header();
  RspMsg::default_instance_ = new RspMsg();
  BinaryMsg::default_instance_ = new BinaryMsg();
  PushMsg::default_instance_ = new PushMsg();
  ConnSvrConnectReq::default_instance_ = new ConnSvrConnectReq();
  ConnSvrConnectRsp::default_instance_ = new ConnSvrConnectRsp();
  ConnSvrDisconnectReq::default_instance_ = new ConnSvrDisconnectReq();
  ConnSvrHeartbeatReq::default_instance_ = new ConnSvrHeartbeatReq();
  ConnSvrGetOnlineReq::default_instance_ = new ConnSvrGetOnlineReq();
  ConnSvrGetOnlineRsp::default_instance_ = new ConnSvrGetOnlineRsp();
  ConnSvrGetOnlineCountReq::default_instance_ = new ConnSvrGetOnlineCountReq();
  ConnSvrGetOnlineCountRsp::default_instance_ = new ConnSvrGetOnlineCountRsp();
  ConnSvrGetIfOnlineReq::default_instance_ = new ConnSvrGetIfOnlineReq();
  ConnSvrGetIfOnlineRsp::default_instance_ = new ConnSvrGetIfOnlineRsp();
  ConnSvrKickNoRspReq::default_instance_ = new ConnSvrKickNoRspReq();
  Address::default_instance_ = new Address();
  ConnMasterKickReq::default_instance_ = new ConnMasterKickReq();
  ConnMasterKickRsp::default_instance_ = new ConnMasterKickRsp();
  ConnMasterGetIfOnlineReq::default_instance_ = new ConnMasterGetIfOnlineReq();
  ConnMasterGetIfOnlineRsp::default_instance_ = new ConnMasterGetIfOnlineRsp();
  ConnMasterGetRouteReq::default_instance_ = new ConnMasterGetRouteReq();
  ConnMasterGetRouteRsp::default_instance_ = new ConnMasterGetRouteRsp();
  ConnMasterDelRouteReq::default_instance_ = new ConnMasterDelRouteReq();
  ConnMasterGetOnlineReq::default_instance_ = new ConnMasterGetOnlineReq();
  ConnMasterGetOnlineRsp::default_instance_ = new ConnMasterGetOnlineRsp();
  ConnMasterGetOnlineCountReq::default_instance_ = new ConnMasterGetOnlineCountReq();
  ConnMasterGetOnlineCountRsp::default_instance_ = new ConnMasterGetOnlineCountRsp();
  AuthSvrAddUserReq::default_instance_ = new AuthSvrAddUserReq();
  AuthSvrDelUserReq::default_instance_ = new AuthSvrDelUserReq();
  AuthSvrLoginReq::default_instance_ = new AuthSvrLoginReq();
  AuthSvrLoginRsp::default_instance_ = new AuthSvrLoginRsp();
  AuthSvrQueryUserReq::default_instance_ = new AuthSvrQueryUserReq();
  AuthSvrQueryUserRsp::default_instance_ = new AuthSvrQueryUserRsp();
  AuthSvrSignReq::default_instance_ = new AuthSvrSignReq();
  AuthSvrSignRsp::default_instance_ = new AuthSvrSignRsp();
  Coordinate::default_instance_ = new Coordinate();
  CdntSvrUpReq::default_instance_ = new CdntSvrUpReq();
  PeerCoordinateInfo::default_instance_ = new PeerCoordinateInfo();
  PeerCoordinateRelation::default_instance_ = new PeerCoordinateRelation();
  CdntSvrSetRelationReq::default_instance_ = new CdntSvrSetRelationReq();
  CdntSvrSetRelationRsp::default_instance_ = new CdntSvrSetRelationRsp();
  CdntSvrAddRelationReq::default_instance_ = new CdntSvrAddRelationReq();
  CdntSvrAddRelationRsp::default_instance_ = new CdntSvrAddRelationRsp();
  CdntSvrDelRelationReq::default_instance_ = new CdntSvrDelRelationReq();
  CdntSvrDelRelationRsp::default_instance_ = new CdntSvrDelRelationRsp();
  CdntSvrGetRelationReq::default_instance_ = new CdntSvrGetRelationReq();
  CdntSvrGetRelationRsp::default_instance_ = new CdntSvrGetRelationRsp();
  CollectSvrHeartbeatReq::default_instance_ = new CollectSvrHeartbeatReq();
  CollectSvrHeartbeatRsp::default_instance_ = new CollectSvrHeartbeatRsp();
  CollectSvrDelayReq::default_instance_ = new CollectSvrDelayReq();
  PushSvrReq::default_instance_ = new PushSvrReq();
  PushSvrMultiReq::default_instance_ = new PushSvrMultiReq();
  PushSvrMultiReq_UserId::default_instance_ = new PushSvrMultiReq_UserId();
  PushSvrMultiRsp::default_instance_ = new PushSvrMultiRsp();
  PushSvrRetryReq::default_instance_ = new PushSvrRetryReq();
  Param::default_instance_ = new Param();
  DispatchSvrReq::default_instance_ = new DispatchSvrReq();
  DispatchSvrRsp::default_instance_ = new DispatchSvrRsp();
  ConnSvrConnectChallenge::default_instance_ = new ConnSvrConnectChallenge();
  AppHeartbeatReq::default_instance_ = new AppHeartbeatReq();
  CdntSvrDownReq::default_instance_ = new CdntSvrDownReq();
  PushStatReq::default_instance_ = new PushStatReq();
  PushStat::default_instance_ = new PushStat();
  PushStatRsp::default_instance_ = new PushStatRsp();
  StatLogReq::default_instance_ = new StatLogReq();
  UserAgent::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  RspMsg::default_instance_->InitAsDefaultInstance();
  BinaryMsg::default_instance_->InitAsDefaultInstance();
  PushMsg::default_instance_->InitAsDefaultInstance();
  ConnSvrConnectReq::default_instance_->InitAsDefaultInstance();
  ConnSvrConnectRsp::default_instance_->InitAsDefaultInstance();
  ConnSvrDisconnectReq::default_instance_->InitAsDefaultInstance();
  ConnSvrHeartbeatReq::default_instance_->InitAsDefaultInstance();
  ConnSvrGetOnlineReq::default_instance_->InitAsDefaultInstance();
  ConnSvrGetOnlineRsp::default_instance_->InitAsDefaultInstance();
  ConnSvrGetOnlineCountReq::default_instance_->InitAsDefaultInstance();
  ConnSvrGetOnlineCountRsp::default_instance_->InitAsDefaultInstance();
  ConnSvrGetIfOnlineReq::default_instance_->InitAsDefaultInstance();
  ConnSvrGetIfOnlineRsp::default_instance_->InitAsDefaultInstance();
  ConnSvrKickNoRspReq::default_instance_->InitAsDefaultInstance();
  Address::default_instance_->InitAsDefaultInstance();
  ConnMasterKickReq::default_instance_->InitAsDefaultInstance();
  ConnMasterKickRsp::default_instance_->InitAsDefaultInstance();
  ConnMasterGetIfOnlineReq::default_instance_->InitAsDefaultInstance();
  ConnMasterGetIfOnlineRsp::default_instance_->InitAsDefaultInstance();
  ConnMasterGetRouteReq::default_instance_->InitAsDefaultInstance();
  ConnMasterGetRouteRsp::default_instance_->InitAsDefaultInstance();
  ConnMasterDelRouteReq::default_instance_->InitAsDefaultInstance();
  ConnMasterGetOnlineReq::default_instance_->InitAsDefaultInstance();
  ConnMasterGetOnlineRsp::default_instance_->InitAsDefaultInstance();
  ConnMasterGetOnlineCountReq::default_instance_->InitAsDefaultInstance();
  ConnMasterGetOnlineCountRsp::default_instance_->InitAsDefaultInstance();
  AuthSvrAddUserReq::default_instance_->InitAsDefaultInstance();
  AuthSvrDelUserReq::default_instance_->InitAsDefaultInstance();
  AuthSvrLoginReq::default_instance_->InitAsDefaultInstance();
  AuthSvrLoginRsp::default_instance_->InitAsDefaultInstance();
  AuthSvrQueryUserReq::default_instance_->InitAsDefaultInstance();
  AuthSvrQueryUserRsp::default_instance_->InitAsDefaultInstance();
  AuthSvrSignReq::default_instance_->InitAsDefaultInstance();
  AuthSvrSignRsp::default_instance_->InitAsDefaultInstance();
  Coordinate::default_instance_->InitAsDefaultInstance();
  CdntSvrUpReq::default_instance_->InitAsDefaultInstance();
  PeerCoordinateInfo::default_instance_->InitAsDefaultInstance();
  PeerCoordinateRelation::default_instance_->InitAsDefaultInstance();
  CdntSvrSetRelationReq::default_instance_->InitAsDefaultInstance();
  CdntSvrSetRelationRsp::default_instance_->InitAsDefaultInstance();
  CdntSvrAddRelationReq::default_instance_->InitAsDefaultInstance();
  CdntSvrAddRelationRsp::default_instance_->InitAsDefaultInstance();
  CdntSvrDelRelationReq::default_instance_->InitAsDefaultInstance();
  CdntSvrDelRelationRsp::default_instance_->InitAsDefaultInstance();
  CdntSvrGetRelationReq::default_instance_->InitAsDefaultInstance();
  CdntSvrGetRelationRsp::default_instance_->InitAsDefaultInstance();
  CollectSvrHeartbeatReq::default_instance_->InitAsDefaultInstance();
  CollectSvrHeartbeatRsp::default_instance_->InitAsDefaultInstance();
  CollectSvrDelayReq::default_instance_->InitAsDefaultInstance();
  PushSvrReq::default_instance_->InitAsDefaultInstance();
  PushSvrMultiReq::default_instance_->InitAsDefaultInstance();
  PushSvrMultiReq_UserId::default_instance_->InitAsDefaultInstance();
  PushSvrMultiRsp::default_instance_->InitAsDefaultInstance();
  PushSvrRetryReq::default_instance_->InitAsDefaultInstance();
  Param::default_instance_->InitAsDefaultInstance();
  DispatchSvrReq::default_instance_->InitAsDefaultInstance();
  DispatchSvrRsp::default_instance_->InitAsDefaultInstance();
  ConnSvrConnectChallenge::default_instance_->InitAsDefaultInstance();
  AppHeartbeatReq::default_instance_->InitAsDefaultInstance();
  CdntSvrDownReq::default_instance_->InitAsDefaultInstance();
  PushStatReq::default_instance_->InitAsDefaultInstance();
  PushStat::default_instance_->InitAsDefaultInstance();
  PushStatRsp::default_instance_->InitAsDefaultInstance();
  StatLogReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_didi_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_didi_5fprotocol_2eproto {
  StaticDescriptorInitializer_didi_5fprotocol_2eproto() {
    protobuf_AddDesc_didi_5fprotocol_2eproto();
  }
} static_descriptor_initializer_didi_5fprotocol_2eproto_;
const ::google::protobuf::EnumDescriptor* Constants_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Constants_descriptor_;
}
bool Constants_IsValid(int value) {
  switch(value) {
    case 8:
    case 15:
    case 22612:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeType_descriptor_;
}
bool NodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 256:
    case 257:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 767:
    case 768:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 779:
    case 780:
    case 781:
    case 782:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1279:
    case 1280:
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1286:
    case 1287:
    case 1288:
    case 1289:
    case 1290:
    case 1535:
    case 1536:
    case 1537:
    case 1538:
    case 1539:
    case 1540:
    case 1541:
    case 1543:
    case 1544:
    case 1545:
    case 1552:
    case 1791:
    case 1792:
    case 1793:
    case 1795:
    case 1796:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2051:
    case 2052:
    case 2303:
    case 2304:
    case 2305:
    case 2306:
    case 2307:
    case 2308:
    case 2309:
    case 2310:
    case 2311:
    case 2312:
    case 2313:
    case 2314:
    case 2315:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2815:
    case 2816:
    case 2817:
    case 2818:
    case 2819:
    case 2820:
    case 3071:
    case 3072:
    case 3073:
    case 3074:
    case 3327:
    case 3328:
    case 3329:
    case 3330:
    case 3331:
    case 3332:
    case 3333:
    case 3334:
    case 3336:
    case 3583:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OldRole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OldRole_descriptor_;
}
bool OldRole_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Role_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}
bool Role_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Business_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Business_descriptor_;
}
bool Business_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RspCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCode_descriptor_;
}
bool RspCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 99:
    case 201:
    case 202:
    case 203:
    case 204:
    case 299:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 499:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 699:
    case 1536:
    case 1537:
    case 1538:
    case 1539:
    case 1540:
    case 1541:
    case 1791:
    case 2304:
    case 2305:
    case 2306:
    case 2307:
    case 2308:
    case 2309:
    case 2310:
    case 2311:
    case 2312:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2815:
    case 2816:
    case 2817:
    case 2818:
    case 2819:
    case 2820:
    case 2821:
    case 2822:
    case 2823:
    case 2824:
    case 2825:
    case 2826:
    case 3071:
    case 3072:
    case 3073:
    case 3074:
    case 3327:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CoordinateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordinateType_descriptor_;
}
bool CoordinateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RelationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationType_descriptor_;
}
bool RelationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PushStrategy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushStrategy_descriptor_;
}
bool PushStrategy_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatEvent_descriptor_;
}
bool StatEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserAgent::kOsTypeFieldNumber;
const int UserAgent::kOsVerFieldNumber;
const int UserAgent::kModelFieldNumber;
const int UserAgent::kClientVerFieldNumber;
const int UserAgent::kNetworkFieldNumber;
const int UserAgent::kLocationFieldNumber;
const int UserAgent::kCarrierOperatorFieldNumber;
#endif  // !_MSC_VER

UserAgent::UserAgent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserAgent::InitAsDefaultInstance() {
}

UserAgent::UserAgent(const UserAgent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserAgent::SharedCtor() {
  _cached_size_ = 0;
  os_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carrier_operator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAgent::~UserAgent() {
  SharedDtor();
}

void UserAgent::SharedDtor() {
  if (os_type_ != &::google::protobuf::internal::kEmptyString) {
    delete os_type_;
  }
  if (os_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete os_ver_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (client_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ver_;
  }
  if (network_ != &::google::protobuf::internal::kEmptyString) {
    delete network_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (carrier_operator_ != &::google::protobuf::internal::kEmptyString) {
    delete carrier_operator_;
  }
  if (this != default_instance_) {
  }
}

void UserAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAgent_descriptor_;
}

const UserAgent& UserAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

UserAgent* UserAgent::default_instance_ = NULL;

UserAgent* UserAgent::New() const {
  return new UserAgent;
}

void UserAgent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_os_type()) {
      if (os_type_ != &::google::protobuf::internal::kEmptyString) {
        os_type_->clear();
      }
    }
    if (has_os_ver()) {
      if (os_ver_ != &::google::protobuf::internal::kEmptyString) {
        os_ver_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_client_ver()) {
      if (client_ver_ != &::google::protobuf::internal::kEmptyString) {
        client_ver_->clear();
      }
    }
    if (has_network()) {
      if (network_ != &::google::protobuf::internal::kEmptyString) {
        network_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    if (has_carrier_operator()) {
      if (carrier_operator_ != &::google::protobuf::internal::kEmptyString) {
        carrier_operator_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string os_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_type().data(), this->os_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_os_ver;
        break;
      }

      // optional string os_ver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_ver().data(), this->os_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_ver;
        break;
      }

      // optional string client_ver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ver().data(), this->client_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_network;
        break;
      }

      // optional string network = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }

      // optional string location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_carrier_operator;
        break;
      }

      // optional string carrier_operator = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carrier_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrier_operator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carrier_operator().data(), this->carrier_operator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string os_type = 1;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_type().data(), this->os_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->os_type(), output);
  }

  // optional string os_ver = 2;
  if (has_os_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_ver().data(), this->os_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->os_ver(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->model(), output);
  }

  // optional string client_ver = 4;
  if (has_client_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ver().data(), this->client_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_ver(), output);
  }

  // optional string network = 5;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->network(), output);
  }

  // optional string location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->location(), output);
  }

  // optional string carrier_operator = 7;
  if (has_carrier_operator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrier_operator().data(), this->carrier_operator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->carrier_operator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string os_type = 1;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_type().data(), this->os_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->os_type(), target);
  }

  // optional string os_ver = 2;
  if (has_os_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_ver().data(), this->os_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->os_ver(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string client_ver = 4;
  if (has_client_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ver().data(), this->client_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_ver(), target);
  }

  // optional string network = 5;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->network(), target);
  }

  // optional string location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->location(), target);
  }

  // optional string carrier_operator = 7;
  if (has_carrier_operator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrier_operator().data(), this->carrier_operator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->carrier_operator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAgent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string os_type = 1;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_type());
    }

    // optional string os_ver = 2;
    if (has_os_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_ver());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string client_ver = 4;
    if (has_client_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ver());
    }

    // optional string network = 5;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional string location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional string carrier_operator = 7;
    if (has_carrier_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrier_operator());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAgent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAgent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAgent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAgent::MergeFrom(const UserAgent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_os_ver()) {
      set_os_ver(from.os_ver());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_client_ver()) {
      set_client_ver(from.client_ver());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_carrier_operator()) {
      set_carrier_operator(from.carrier_operator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAgent::CopyFrom(const UserAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAgent::IsInitialized() const {

  return true;
}

void UserAgent::Swap(UserAgent* other) {
  if (other != this) {
    std::swap(os_type_, other->os_type_);
    std::swap(os_ver_, other->os_ver_);
    std::swap(model_, other->model_);
    std::swap(client_ver_, other->client_ver_);
    std::swap(network_, other->network_);
    std::swap(location_, other->location_);
    std::swap(carrier_operator_, other->carrier_operator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAgent_descriptor_;
  metadata.reflection = UserAgent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kTypeFieldNumber;
const int Header::kMsgIdFieldNumber;
const int Header::kAuthUserIdFieldNumber;
const int Header::kLogIdFieldNumber;
const int Header::kUserAgentFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
  user_agent_ = const_cast< ::DidiPush::UserAgent*>(&::DidiPush::UserAgent::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  auth_user_id_ = GOOGLE_ULONGLONG(0);
  log_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (log_id_ != &::google::protobuf::internal::kEmptyString) {
    delete log_id_;
  }
  if (this != default_instance_) {
    delete user_agent_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    msg_id_ = GOOGLE_ULONGLONG(0);
    auth_user_id_ = GOOGLE_ULONGLONG(0);
    if (has_log_id()) {
      if (log_id_ != &::google::protobuf::internal::kEmptyString) {
        log_id_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != NULL) user_agent_->::DidiPush::UserAgent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.MsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::MsgType_IsValid(value)) {
            set_type(static_cast< ::DidiPush::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auth_user_id;
        break;
      }

      // optional uint64 auth_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auth_user_id_)));
          set_has_auth_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_log_id;
        break;
      }

      // optional bytes log_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_agent;
        break;
      }

      // optional .DidiPush.UserAgent user_agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_agent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.MsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  // optional uint64 auth_user_id = 3;
  if (has_auth_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->auth_user_id(), output);
  }

  // optional bytes log_id = 4;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->log_id(), output);
  }

  // optional .DidiPush.UserAgent user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user_agent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.MsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  // optional uint64 auth_user_id = 3;
  if (has_auth_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->auth_user_id(), target);
  }

  // optional bytes log_id = 4;
  if (has_log_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->log_id(), target);
  }

  // optional .DidiPush.UserAgent user_agent = 5;
  if (has_user_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_agent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.MsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint64 auth_user_id = 3;
    if (has_auth_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auth_user_id());
    }

    // optional bytes log_id = 4;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->log_id());
    }

    // optional .DidiPush.UserAgent user_agent = 5;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_agent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_auth_user_id()) {
      set_auth_user_id(from.auth_user_id());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_user_agent()) {
      mutable_user_agent()->::DidiPush::UserAgent::MergeFrom(from.user_agent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(auth_user_id_, other->auth_user_id_);
    std::swap(log_id_, other->log_id_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspMsg::kRspCodeFieldNumber;
const int RspMsg::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RspMsg::RspMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspMsg::InitAsDefaultInstance() {
}

RspMsg::RspMsg(const RspMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspMsg::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  rsp_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspMsg::~RspMsg() {
  SharedDtor();
}

void RspMsg::SharedDtor() {
  if (rsp_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete rsp_msg_;
  }
  if (this != default_instance_) {
  }
}

void RspMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspMsg_descriptor_;
}

const RspMsg& RspMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

RspMsg* RspMsg::default_instance_ = NULL;

RspMsg* RspMsg::New() const {
  return new RspMsg;
}

void RspMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    if (has_rsp_msg()) {
      if (rsp_msg_ != &::google::protobuf::internal::kEmptyString) {
        rsp_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rsp_msg;
        break;
      }

      // optional string rsp_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsp_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsp_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rsp_msg().data(), this->rsp_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // optional string rsp_msg = 2;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsp_msg().data(), this->rsp_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rsp_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rsp_code(), target);
  }

  // optional string rsp_msg = 2;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsp_msg().data(), this->rsp_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rsp_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional string rsp_msg = 2;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rsp_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspMsg::MergeFrom(const RspMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_rsp_msg()) {
      set_rsp_msg(from.rsp_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspMsg::CopyFrom(const RspMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RspMsg::Swap(RspMsg* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(rsp_msg_, other->rsp_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspMsg_descriptor_;
  metadata.reflection = RspMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryMsg::kTypeFieldNumber;
const int BinaryMsg::kPayloadFieldNumber;
#endif  // !_MSC_VER

BinaryMsg::BinaryMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BinaryMsg::InitAsDefaultInstance() {
}

BinaryMsg::BinaryMsg(const BinaryMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BinaryMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryMsg::~BinaryMsg() {
  SharedDtor();
}

void BinaryMsg::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void BinaryMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryMsg_descriptor_;
}

const BinaryMsg& BinaryMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

BinaryMsg* BinaryMsg::default_instance_ = NULL;

BinaryMsg* BinaryMsg::New() const {
  return new BinaryMsg;
}

void BinaryMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinaryMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinaryMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinaryMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryMsg::MergeFrom(const BinaryMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryMsg::CopyFrom(const BinaryMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BinaryMsg::Swap(BinaryMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryMsg_descriptor_;
  metadata.reflection = BinaryMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushMsg::kTypeFieldNumber;
const int PushMsg::kPayloadFieldNumber;
const int PushMsg::kTaskIdFieldNumber;
const int PushMsg::kMsgIdFieldNumber;
const int PushMsg::kNeedRspFieldNumber;
#endif  // !_MSC_VER

PushMsg::PushMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushMsg::InitAsDefaultInstance() {
}

PushMsg::PushMsg(const PushMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_id_ = GOOGLE_ULONGLONG(0);
  msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  need_rsp_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMsg::~PushMsg() {
  SharedDtor();
}

void PushMsg::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (msg_id_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_id_;
  }
  if (this != default_instance_) {
  }
}

void PushMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMsg_descriptor_;
}

const PushMsg& PushMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PushMsg* PushMsg::default_instance_ = NULL;

PushMsg* PushMsg::New() const {
  return new PushMsg;
}

void PushMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    task_id_ = GOOGLE_ULONGLONG(0);
    if (has_msg_id()) {
      if (msg_id_ != &::google::protobuf::internal::kEmptyString) {
        msg_id_->clear();
      }
    }
    need_rsp_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }

      // optional uint64 task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg_id;
        break;
      }

      // optional bytes msg_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_need_rsp;
        break;
      }

      // optional bool need_rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_rsp_)));
          set_has_need_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }

  // optional uint64 task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->task_id(), output);
  }

  // optional bytes msg_id = 4;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg_id(), output);
  }

  // optional bool need_rsp = 5;
  if (has_need_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->need_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // optional uint64 task_id = 3;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->task_id(), target);
  }

  // optional bytes msg_id = 4;
  if (has_msg_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg_id(), target);
  }

  // optional bool need_rsp = 5;
  if (has_need_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->need_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional uint64 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_id());
    }

    // optional bytes msg_id = 4;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_id());
    }

    // optional bool need_rsp = 5;
    if (has_need_rsp()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMsg::MergeFrom(const PushMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_need_rsp()) {
      set_need_rsp(from.need_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMsg::CopyFrom(const PushMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PushMsg::Swap(PushMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(payload_, other->payload_);
    std::swap(task_id_, other->task_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(need_rsp_, other->need_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMsg_descriptor_;
  metadata.reflection = PushMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnSvrConnectReq::kPhoneNumFieldNumber;
const int ConnSvrConnectReq::kOldRoleFieldNumber;
const int ConnSvrConnectReq::kSecretChapFieldNumber;
const int ConnSvrConnectReq::kUserAgentFieldNumber;
const int ConnSvrConnectReq::kRoleFieldNumber;
#endif  // !_MSC_VER

ConnSvrConnectReq::ConnSvrConnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrConnectReq::InitAsDefaultInstance() {
}

ConnSvrConnectReq::ConnSvrConnectReq(const ConnSvrConnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrConnectReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_role_ = 0;
  secret_chap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrConnectReq::~ConnSvrConnectReq() {
  SharedDtor();
}

void ConnSvrConnectReq::SharedDtor() {
  if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_num_;
  }
  if (secret_chap_ != &::google::protobuf::internal::kEmptyString) {
    delete secret_chap_;
  }
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (this != default_instance_) {
  }
}

void ConnSvrConnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrConnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrConnectReq_descriptor_;
}

const ConnSvrConnectReq& ConnSvrConnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrConnectReq* ConnSvrConnectReq::default_instance_ = NULL;

ConnSvrConnectReq* ConnSvrConnectReq::New() const {
  return new ConnSvrConnectReq;
}

void ConnSvrConnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
        phone_num_->clear();
      }
    }
    old_role_ = 0;
    if (has_secret_chap()) {
      if (secret_chap_ != &::google::protobuf::internal::kEmptyString) {
        secret_chap_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
        user_agent_->clear();
      }
    }
    role_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrConnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_num().data(), this->phone_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_role;
        break;
      }

      // optional .DidiPush.OldRole old_role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::OldRole_IsValid(value)) {
            set_old_role(static_cast< ::DidiPush::OldRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_secret_chap;
        break;
      }

      // required bytes secret_chap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secret_chap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret_chap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_agent;
        break;
      }

      // optional bytes user_agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_agent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role;
        break;
      }

      // optional int32 role = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnSvrConnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phone_num(), output);
  }

  // optional .DidiPush.OldRole old_role = 2;
  if (has_old_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->old_role(), output);
  }

  // required bytes secret_chap = 3;
  if (has_secret_chap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->secret_chap(), output);
  }

  // optional bytes user_agent = 4;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->user_agent(), output);
  }

  // optional int32 role = 5;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrConnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone_num(), target);
  }

  // optional .DidiPush.OldRole old_role = 2;
  if (has_old_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->old_role(), target);
  }

  // required bytes secret_chap = 3;
  if (has_secret_chap()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->secret_chap(), target);
  }

  // optional bytes user_agent = 4;
  if (has_user_agent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->user_agent(), target);
  }

  // optional int32 role = 5;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrConnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_num());
    }

    // optional .DidiPush.OldRole old_role = 2;
    if (has_old_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->old_role());
    }

    // required bytes secret_chap = 3;
    if (has_secret_chap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secret_chap());
    }

    // optional bytes user_agent = 4;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_agent());
    }

    // optional int32 role = 5;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrConnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrConnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrConnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrConnectReq::MergeFrom(const ConnSvrConnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_old_role()) {
      set_old_role(from.old_role());
    }
    if (from.has_secret_chap()) {
      set_secret_chap(from.secret_chap());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrConnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrConnectReq::CopyFrom(const ConnSvrConnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrConnectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void ConnSvrConnectReq::Swap(ConnSvrConnectReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(old_role_, other->old_role_);
    std::swap(secret_chap_, other->secret_chap_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrConnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrConnectReq_descriptor_;
  metadata.reflection = ConnSvrConnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnSvrConnectRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

ConnSvrConnectRsp::ConnSvrConnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrConnectRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

ConnSvrConnectRsp::ConnSvrConnectRsp(const ConnSvrConnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrConnectRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrConnectRsp::~ConnSvrConnectRsp() {
  SharedDtor();
}

void ConnSvrConnectRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void ConnSvrConnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrConnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrConnectRsp_descriptor_;
}

const ConnSvrConnectRsp& ConnSvrConnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrConnectRsp* ConnSvrConnectRsp::default_instance_ = NULL;

ConnSvrConnectRsp* ConnSvrConnectRsp::New() const {
  return new ConnSvrConnectRsp;
}

void ConnSvrConnectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrConnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnSvrConnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrConnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrConnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrConnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrConnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrConnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrConnectRsp::MergeFrom(const ConnSvrConnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrConnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrConnectRsp::CopyFrom(const ConnSvrConnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrConnectRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  return true;
}

void ConnSvrConnectRsp::Swap(ConnSvrConnectRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrConnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrConnectRsp_descriptor_;
  metadata.reflection = ConnSvrConnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConnSvrDisconnectReq::ConnSvrDisconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrDisconnectReq::InitAsDefaultInstance() {
}

ConnSvrDisconnectReq::ConnSvrDisconnectReq(const ConnSvrDisconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrDisconnectReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrDisconnectReq::~ConnSvrDisconnectReq() {
  SharedDtor();
}

void ConnSvrDisconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnSvrDisconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrDisconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrDisconnectReq_descriptor_;
}

const ConnSvrDisconnectReq& ConnSvrDisconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrDisconnectReq* ConnSvrDisconnectReq::default_instance_ = NULL;

ConnSvrDisconnectReq* ConnSvrDisconnectReq::New() const {
  return new ConnSvrDisconnectReq;
}

void ConnSvrDisconnectReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrDisconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConnSvrDisconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrDisconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrDisconnectReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrDisconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrDisconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrDisconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrDisconnectReq::MergeFrom(const ConnSvrDisconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrDisconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrDisconnectReq::CopyFrom(const ConnSvrDisconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrDisconnectReq::IsInitialized() const {

  return true;
}

void ConnSvrDisconnectReq::Swap(ConnSvrDisconnectReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrDisconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrDisconnectReq_descriptor_;
  metadata.reflection = ConnSvrDisconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConnSvrHeartbeatReq::ConnSvrHeartbeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrHeartbeatReq::InitAsDefaultInstance() {
}

ConnSvrHeartbeatReq::ConnSvrHeartbeatReq(const ConnSvrHeartbeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrHeartbeatReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrHeartbeatReq::~ConnSvrHeartbeatReq() {
  SharedDtor();
}

void ConnSvrHeartbeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnSvrHeartbeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrHeartbeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrHeartbeatReq_descriptor_;
}

const ConnSvrHeartbeatReq& ConnSvrHeartbeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrHeartbeatReq* ConnSvrHeartbeatReq::default_instance_ = NULL;

ConnSvrHeartbeatReq* ConnSvrHeartbeatReq::New() const {
  return new ConnSvrHeartbeatReq;
}

void ConnSvrHeartbeatReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrHeartbeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConnSvrHeartbeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrHeartbeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrHeartbeatReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrHeartbeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrHeartbeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrHeartbeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrHeartbeatReq::MergeFrom(const ConnSvrHeartbeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrHeartbeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrHeartbeatReq::CopyFrom(const ConnSvrHeartbeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrHeartbeatReq::IsInitialized() const {

  return true;
}

void ConnSvrHeartbeatReq::Swap(ConnSvrHeartbeatReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrHeartbeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrHeartbeatReq_descriptor_;
  metadata.reflection = ConnSvrHeartbeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConnSvrGetOnlineReq::ConnSvrGetOnlineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrGetOnlineReq::InitAsDefaultInstance() {
}

ConnSvrGetOnlineReq::ConnSvrGetOnlineReq(const ConnSvrGetOnlineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrGetOnlineReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrGetOnlineReq::~ConnSvrGetOnlineReq() {
  SharedDtor();
}

void ConnSvrGetOnlineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnSvrGetOnlineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrGetOnlineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrGetOnlineReq_descriptor_;
}

const ConnSvrGetOnlineReq& ConnSvrGetOnlineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrGetOnlineReq* ConnSvrGetOnlineReq::default_instance_ = NULL;

ConnSvrGetOnlineReq* ConnSvrGetOnlineReq::New() const {
  return new ConnSvrGetOnlineReq;
}

void ConnSvrGetOnlineReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrGetOnlineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConnSvrGetOnlineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrGetOnlineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrGetOnlineReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrGetOnlineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrGetOnlineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrGetOnlineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrGetOnlineReq::MergeFrom(const ConnSvrGetOnlineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrGetOnlineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrGetOnlineReq::CopyFrom(const ConnSvrGetOnlineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrGetOnlineReq::IsInitialized() const {

  return true;
}

void ConnSvrGetOnlineReq::Swap(ConnSvrGetOnlineReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrGetOnlineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrGetOnlineReq_descriptor_;
  metadata.reflection = ConnSvrGetOnlineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnSvrGetOnlineRsp::kRspMsgFieldNumber;
const int ConnSvrGetOnlineRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

ConnSvrGetOnlineRsp::ConnSvrGetOnlineRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrGetOnlineRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

ConnSvrGetOnlineRsp::ConnSvrGetOnlineRsp(const ConnSvrGetOnlineRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrGetOnlineRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrGetOnlineRsp::~ConnSvrGetOnlineRsp() {
  SharedDtor();
}

void ConnSvrGetOnlineRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void ConnSvrGetOnlineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrGetOnlineRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrGetOnlineRsp_descriptor_;
}

const ConnSvrGetOnlineRsp& ConnSvrGetOnlineRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrGetOnlineRsp* ConnSvrGetOnlineRsp::default_instance_ = NULL;

ConnSvrGetOnlineRsp* ConnSvrGetOnlineRsp::New() const {
  return new ConnSvrGetOnlineRsp;
}

void ConnSvrGetOnlineRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrGetOnlineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // repeated uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnSvrGetOnlineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrGetOnlineRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrGetOnlineRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

  }
  // repeated uint64 user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrGetOnlineRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrGetOnlineRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrGetOnlineRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrGetOnlineRsp::MergeFrom(const ConnSvrGetOnlineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrGetOnlineRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrGetOnlineRsp::CopyFrom(const ConnSvrGetOnlineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrGetOnlineRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  return true;
}

void ConnSvrGetOnlineRsp::Swap(ConnSvrGetOnlineRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrGetOnlineRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrGetOnlineRsp_descriptor_;
  metadata.reflection = ConnSvrGetOnlineRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConnSvrGetOnlineCountReq::ConnSvrGetOnlineCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrGetOnlineCountReq::InitAsDefaultInstance() {
}

ConnSvrGetOnlineCountReq::ConnSvrGetOnlineCountReq(const ConnSvrGetOnlineCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrGetOnlineCountReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrGetOnlineCountReq::~ConnSvrGetOnlineCountReq() {
  SharedDtor();
}

void ConnSvrGetOnlineCountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnSvrGetOnlineCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrGetOnlineCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrGetOnlineCountReq_descriptor_;
}

const ConnSvrGetOnlineCountReq& ConnSvrGetOnlineCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrGetOnlineCountReq* ConnSvrGetOnlineCountReq::default_instance_ = NULL;

ConnSvrGetOnlineCountReq* ConnSvrGetOnlineCountReq::New() const {
  return new ConnSvrGetOnlineCountReq;
}

void ConnSvrGetOnlineCountReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrGetOnlineCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConnSvrGetOnlineCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrGetOnlineCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrGetOnlineCountReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrGetOnlineCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrGetOnlineCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrGetOnlineCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrGetOnlineCountReq::MergeFrom(const ConnSvrGetOnlineCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrGetOnlineCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrGetOnlineCountReq::CopyFrom(const ConnSvrGetOnlineCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrGetOnlineCountReq::IsInitialized() const {

  return true;
}

void ConnSvrGetOnlineCountReq::Swap(ConnSvrGetOnlineCountReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrGetOnlineCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrGetOnlineCountReq_descriptor_;
  metadata.reflection = ConnSvrGetOnlineCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnSvrGetOnlineCountRsp::kRspMsgFieldNumber;
const int ConnSvrGetOnlineCountRsp::kCountFieldNumber;
#endif  // !_MSC_VER

ConnSvrGetOnlineCountRsp::ConnSvrGetOnlineCountRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrGetOnlineCountRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

ConnSvrGetOnlineCountRsp::ConnSvrGetOnlineCountRsp(const ConnSvrGetOnlineCountRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrGetOnlineCountRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrGetOnlineCountRsp::~ConnSvrGetOnlineCountRsp() {
  SharedDtor();
}

void ConnSvrGetOnlineCountRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void ConnSvrGetOnlineCountRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrGetOnlineCountRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrGetOnlineCountRsp_descriptor_;
}

const ConnSvrGetOnlineCountRsp& ConnSvrGetOnlineCountRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrGetOnlineCountRsp* ConnSvrGetOnlineCountRsp::default_instance_ = NULL;

ConnSvrGetOnlineCountRsp* ConnSvrGetOnlineCountRsp::New() const {
  return new ConnSvrGetOnlineCountRsp;
}

void ConnSvrGetOnlineCountRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
    count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrGetOnlineCountRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnSvrGetOnlineCountRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // required uint64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrGetOnlineCountRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // required uint64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrGetOnlineCountRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

    // required uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrGetOnlineCountRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrGetOnlineCountRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrGetOnlineCountRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrGetOnlineCountRsp::MergeFrom(const ConnSvrGetOnlineCountRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrGetOnlineCountRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrGetOnlineCountRsp::CopyFrom(const ConnSvrGetOnlineCountRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrGetOnlineCountRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  return true;
}

void ConnSvrGetOnlineCountRsp::Swap(ConnSvrGetOnlineCountRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrGetOnlineCountRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrGetOnlineCountRsp_descriptor_;
  metadata.reflection = ConnSvrGetOnlineCountRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnSvrGetIfOnlineReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

ConnSvrGetIfOnlineReq::ConnSvrGetIfOnlineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrGetIfOnlineReq::InitAsDefaultInstance() {
}

ConnSvrGetIfOnlineReq::ConnSvrGetIfOnlineReq(const ConnSvrGetIfOnlineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrGetIfOnlineReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrGetIfOnlineReq::~ConnSvrGetIfOnlineReq() {
  SharedDtor();
}

void ConnSvrGetIfOnlineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnSvrGetIfOnlineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrGetIfOnlineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrGetIfOnlineReq_descriptor_;
}

const ConnSvrGetIfOnlineReq& ConnSvrGetIfOnlineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrGetIfOnlineReq* ConnSvrGetIfOnlineReq::default_instance_ = NULL;

ConnSvrGetIfOnlineReq* ConnSvrGetIfOnlineReq::New() const {
  return new ConnSvrGetIfOnlineReq;
}

void ConnSvrGetIfOnlineReq::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrGetIfOnlineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnSvrGetIfOnlineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrGetIfOnlineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrGetIfOnlineReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrGetIfOnlineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrGetIfOnlineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrGetIfOnlineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrGetIfOnlineReq::MergeFrom(const ConnSvrGetIfOnlineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrGetIfOnlineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrGetIfOnlineReq::CopyFrom(const ConnSvrGetIfOnlineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrGetIfOnlineReq::IsInitialized() const {

  return true;
}

void ConnSvrGetIfOnlineReq::Swap(ConnSvrGetIfOnlineReq* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrGetIfOnlineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrGetIfOnlineReq_descriptor_;
  metadata.reflection = ConnSvrGetIfOnlineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnSvrGetIfOnlineRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

ConnSvrGetIfOnlineRsp::ConnSvrGetIfOnlineRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrGetIfOnlineRsp::InitAsDefaultInstance() {
}

ConnSvrGetIfOnlineRsp::ConnSvrGetIfOnlineRsp(const ConnSvrGetIfOnlineRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrGetIfOnlineRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrGetIfOnlineRsp::~ConnSvrGetIfOnlineRsp() {
  SharedDtor();
}

void ConnSvrGetIfOnlineRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnSvrGetIfOnlineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrGetIfOnlineRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrGetIfOnlineRsp_descriptor_;
}

const ConnSvrGetIfOnlineRsp& ConnSvrGetIfOnlineRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrGetIfOnlineRsp* ConnSvrGetIfOnlineRsp::default_instance_ = NULL;

ConnSvrGetIfOnlineRsp* ConnSvrGetIfOnlineRsp::New() const {
  return new ConnSvrGetIfOnlineRsp;
}

void ConnSvrGetIfOnlineRsp::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrGetIfOnlineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnSvrGetIfOnlineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrGetIfOnlineRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrGetIfOnlineRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrGetIfOnlineRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrGetIfOnlineRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrGetIfOnlineRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrGetIfOnlineRsp::MergeFrom(const ConnSvrGetIfOnlineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrGetIfOnlineRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrGetIfOnlineRsp::CopyFrom(const ConnSvrGetIfOnlineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrGetIfOnlineRsp::IsInitialized() const {

  return true;
}

void ConnSvrGetIfOnlineRsp::Swap(ConnSvrGetIfOnlineRsp* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrGetIfOnlineRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrGetIfOnlineRsp_descriptor_;
  metadata.reflection = ConnSvrGetIfOnlineRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnSvrKickNoRspReq::kTimestampFieldNumber;
#endif  // !_MSC_VER

ConnSvrKickNoRspReq::ConnSvrKickNoRspReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrKickNoRspReq::InitAsDefaultInstance() {
}

ConnSvrKickNoRspReq::ConnSvrKickNoRspReq(const ConnSvrKickNoRspReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrKickNoRspReq::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrKickNoRspReq::~ConnSvrKickNoRspReq() {
  SharedDtor();
}

void ConnSvrKickNoRspReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnSvrKickNoRspReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrKickNoRspReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrKickNoRspReq_descriptor_;
}

const ConnSvrKickNoRspReq& ConnSvrKickNoRspReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrKickNoRspReq* ConnSvrKickNoRspReq::default_instance_ = NULL;

ConnSvrKickNoRspReq* ConnSvrKickNoRspReq::New() const {
  return new ConnSvrKickNoRspReq;
}

void ConnSvrKickNoRspReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrKickNoRspReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnSvrKickNoRspReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrKickNoRspReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrKickNoRspReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrKickNoRspReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrKickNoRspReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrKickNoRspReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrKickNoRspReq::MergeFrom(const ConnSvrKickNoRspReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrKickNoRspReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrKickNoRspReq::CopyFrom(const ConnSvrKickNoRspReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrKickNoRspReq::IsInitialized() const {

  return true;
}

void ConnSvrKickNoRspReq::Swap(ConnSvrKickNoRspReq* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrKickNoRspReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrKickNoRspReq_descriptor_;
  metadata.reflection = ConnSvrKickNoRspReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Address::kIpFieldNumber;
const int Address::kPortFieldNumber;
const int Address::kTimestampFieldNumber;
const int Address::kShouldStatFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address::InitAsDefaultInstance() {
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  should_stat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  SharedDtor();
}

void Address::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
    should_stat_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_should_stat;
        break;
      }

      // optional bool should_stat = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_should_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_stat_)));
          set_has_should_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional uint64 timestamp = 3 [default = 0];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional bool should_stat = 4 [default = false];
  if (has_should_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->should_stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional uint64 timestamp = 3 [default = 0];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional bool should_stat = 4 [default = false];
  if (has_should_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->should_stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint64 timestamp = 3 [default = 0];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional bool should_stat = 4 [default = false];
    if (has_should_stat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_should_stat()) {
      set_should_stat(from.should_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(should_stat_, other->should_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnMasterKickReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

ConnMasterKickReq::ConnMasterKickReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterKickReq::InitAsDefaultInstance() {
}

ConnMasterKickReq::ConnMasterKickReq(const ConnMasterKickReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterKickReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterKickReq::~ConnMasterKickReq() {
  SharedDtor();
}

void ConnMasterKickReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnMasterKickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterKickReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterKickReq_descriptor_;
}

const ConnMasterKickReq& ConnMasterKickReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterKickReq* ConnMasterKickReq::default_instance_ = NULL;

ConnMasterKickReq* ConnMasterKickReq::New() const {
  return new ConnMasterKickReq;
}

void ConnMasterKickReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterKickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnMasterKickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterKickReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterKickReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterKickReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterKickReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterKickReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterKickReq::MergeFrom(const ConnMasterKickReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterKickReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterKickReq::CopyFrom(const ConnMasterKickReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterKickReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnMasterKickReq::Swap(ConnMasterKickReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterKickReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterKickReq_descriptor_;
  metadata.reflection = ConnMasterKickReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnMasterKickRsp::kRcFieldNumber;
#endif  // !_MSC_VER

ConnMasterKickRsp::ConnMasterKickRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterKickRsp::InitAsDefaultInstance() {
}

ConnMasterKickRsp::ConnMasterKickRsp(const ConnMasterKickRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterKickRsp::SharedCtor() {
  _cached_size_ = 0;
  rc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterKickRsp::~ConnMasterKickRsp() {
  SharedDtor();
}

void ConnMasterKickRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnMasterKickRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterKickRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterKickRsp_descriptor_;
}

const ConnMasterKickRsp& ConnMasterKickRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterKickRsp* ConnMasterKickRsp::default_instance_ = NULL;

ConnMasterKickRsp* ConnMasterKickRsp::New() const {
  return new ConnMasterKickRsp;
}

void ConnMasterKickRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterKickRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rc_)));
          set_has_rc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnMasterKickRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rc = 1;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterKickRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rc = 1;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterKickRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rc = 1;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterKickRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterKickRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterKickRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterKickRsp::MergeFrom(const ConnMasterKickRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      set_rc(from.rc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterKickRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterKickRsp::CopyFrom(const ConnMasterKickRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterKickRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnMasterKickRsp::Swap(ConnMasterKickRsp* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterKickRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterKickRsp_descriptor_;
  metadata.reflection = ConnMasterKickRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnMasterGetIfOnlineReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

ConnMasterGetIfOnlineReq::ConnMasterGetIfOnlineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterGetIfOnlineReq::InitAsDefaultInstance() {
}

ConnMasterGetIfOnlineReq::ConnMasterGetIfOnlineReq(const ConnMasterGetIfOnlineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterGetIfOnlineReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterGetIfOnlineReq::~ConnMasterGetIfOnlineReq() {
  SharedDtor();
}

void ConnMasterGetIfOnlineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnMasterGetIfOnlineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterGetIfOnlineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterGetIfOnlineReq_descriptor_;
}

const ConnMasterGetIfOnlineReq& ConnMasterGetIfOnlineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterGetIfOnlineReq* ConnMasterGetIfOnlineReq::default_instance_ = NULL;

ConnMasterGetIfOnlineReq* ConnMasterGetIfOnlineReq::New() const {
  return new ConnMasterGetIfOnlineReq;
}

void ConnMasterGetIfOnlineReq::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterGetIfOnlineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnMasterGetIfOnlineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterGetIfOnlineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterGetIfOnlineReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterGetIfOnlineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterGetIfOnlineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterGetIfOnlineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterGetIfOnlineReq::MergeFrom(const ConnMasterGetIfOnlineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterGetIfOnlineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterGetIfOnlineReq::CopyFrom(const ConnMasterGetIfOnlineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterGetIfOnlineReq::IsInitialized() const {

  return true;
}

void ConnMasterGetIfOnlineReq::Swap(ConnMasterGetIfOnlineReq* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterGetIfOnlineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterGetIfOnlineReq_descriptor_;
  metadata.reflection = ConnMasterGetIfOnlineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnMasterGetIfOnlineRsp::kRspMsgFieldNumber;
const int ConnMasterGetIfOnlineRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

ConnMasterGetIfOnlineRsp::ConnMasterGetIfOnlineRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterGetIfOnlineRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

ConnMasterGetIfOnlineRsp::ConnMasterGetIfOnlineRsp(const ConnMasterGetIfOnlineRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterGetIfOnlineRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterGetIfOnlineRsp::~ConnMasterGetIfOnlineRsp() {
  SharedDtor();
}

void ConnMasterGetIfOnlineRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void ConnMasterGetIfOnlineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterGetIfOnlineRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterGetIfOnlineRsp_descriptor_;
}

const ConnMasterGetIfOnlineRsp& ConnMasterGetIfOnlineRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterGetIfOnlineRsp* ConnMasterGetIfOnlineRsp::default_instance_ = NULL;

ConnMasterGetIfOnlineRsp* ConnMasterGetIfOnlineRsp::New() const {
  return new ConnMasterGetIfOnlineRsp;
}

void ConnMasterGetIfOnlineRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterGetIfOnlineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // repeated uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnMasterGetIfOnlineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterGetIfOnlineRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterGetIfOnlineRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

  }
  // repeated uint64 user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterGetIfOnlineRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterGetIfOnlineRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterGetIfOnlineRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterGetIfOnlineRsp::MergeFrom(const ConnMasterGetIfOnlineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterGetIfOnlineRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterGetIfOnlineRsp::CopyFrom(const ConnMasterGetIfOnlineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterGetIfOnlineRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  return true;
}

void ConnMasterGetIfOnlineRsp::Swap(ConnMasterGetIfOnlineRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterGetIfOnlineRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterGetIfOnlineRsp_descriptor_;
  metadata.reflection = ConnMasterGetIfOnlineRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnMasterGetRouteReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

ConnMasterGetRouteReq::ConnMasterGetRouteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterGetRouteReq::InitAsDefaultInstance() {
}

ConnMasterGetRouteReq::ConnMasterGetRouteReq(const ConnMasterGetRouteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterGetRouteReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterGetRouteReq::~ConnMasterGetRouteReq() {
  SharedDtor();
}

void ConnMasterGetRouteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnMasterGetRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterGetRouteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterGetRouteReq_descriptor_;
}

const ConnMasterGetRouteReq& ConnMasterGetRouteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterGetRouteReq* ConnMasterGetRouteReq::default_instance_ = NULL;

ConnMasterGetRouteReq* ConnMasterGetRouteReq::New() const {
  return new ConnMasterGetRouteReq;
}

void ConnMasterGetRouteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterGetRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnMasterGetRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterGetRouteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterGetRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterGetRouteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterGetRouteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterGetRouteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterGetRouteReq::MergeFrom(const ConnMasterGetRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterGetRouteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterGetRouteReq::CopyFrom(const ConnMasterGetRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterGetRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnMasterGetRouteReq::Swap(ConnMasterGetRouteReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterGetRouteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterGetRouteReq_descriptor_;
  metadata.reflection = ConnMasterGetRouteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnMasterGetRouteRsp::kRspMsgFieldNumber;
const int ConnMasterGetRouteRsp::kConnSvrFieldNumber;
#endif  // !_MSC_VER

ConnMasterGetRouteRsp::ConnMasterGetRouteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterGetRouteRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
  conn_svr_ = const_cast< ::DidiPush::Address*>(&::DidiPush::Address::default_instance());
}

ConnMasterGetRouteRsp::ConnMasterGetRouteRsp(const ConnMasterGetRouteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterGetRouteRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  conn_svr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterGetRouteRsp::~ConnMasterGetRouteRsp() {
  SharedDtor();
}

void ConnMasterGetRouteRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
    delete conn_svr_;
  }
}

void ConnMasterGetRouteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterGetRouteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterGetRouteRsp_descriptor_;
}

const ConnMasterGetRouteRsp& ConnMasterGetRouteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterGetRouteRsp* ConnMasterGetRouteRsp::default_instance_ = NULL;

ConnMasterGetRouteRsp* ConnMasterGetRouteRsp::New() const {
  return new ConnMasterGetRouteRsp;
}

void ConnMasterGetRouteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
    if (has_conn_svr()) {
      if (conn_svr_ != NULL) conn_svr_->::DidiPush::Address::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterGetRouteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_conn_svr;
        break;
      }

      // optional .DidiPush.Address conn_svr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conn_svr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conn_svr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnMasterGetRouteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // optional .DidiPush.Address conn_svr = 2;
  if (has_conn_svr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->conn_svr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterGetRouteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // optional .DidiPush.Address conn_svr = 2;
  if (has_conn_svr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->conn_svr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterGetRouteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

    // optional .DidiPush.Address conn_svr = 2;
    if (has_conn_svr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conn_svr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterGetRouteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterGetRouteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterGetRouteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterGetRouteRsp::MergeFrom(const ConnMasterGetRouteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
    if (from.has_conn_svr()) {
      mutable_conn_svr()->::DidiPush::Address::MergeFrom(from.conn_svr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterGetRouteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterGetRouteRsp::CopyFrom(const ConnMasterGetRouteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterGetRouteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  if (has_conn_svr()) {
    if (!this->conn_svr().IsInitialized()) return false;
  }
  return true;
}

void ConnMasterGetRouteRsp::Swap(ConnMasterGetRouteRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    std::swap(conn_svr_, other->conn_svr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterGetRouteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterGetRouteRsp_descriptor_;
  metadata.reflection = ConnMasterGetRouteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnMasterDelRouteReq::kUserIdFieldNumber;
const int ConnMasterDelRouteReq::kTimestampFieldNumber;
#endif  // !_MSC_VER

ConnMasterDelRouteReq::ConnMasterDelRouteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterDelRouteReq::InitAsDefaultInstance() {
}

ConnMasterDelRouteReq::ConnMasterDelRouteReq(const ConnMasterDelRouteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterDelRouteReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterDelRouteReq::~ConnMasterDelRouteReq() {
  SharedDtor();
}

void ConnMasterDelRouteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnMasterDelRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterDelRouteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterDelRouteReq_descriptor_;
}

const ConnMasterDelRouteReq& ConnMasterDelRouteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterDelRouteReq* ConnMasterDelRouteReq::default_instance_ = NULL;

ConnMasterDelRouteReq* ConnMasterDelRouteReq::New() const {
  return new ConnMasterDelRouteReq;
}

void ConnMasterDelRouteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterDelRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnMasterDelRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 timestamp = 2 [default = 0];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterDelRouteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 timestamp = 2 [default = 0];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterDelRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 timestamp = 2 [default = 0];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterDelRouteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterDelRouteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterDelRouteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterDelRouteReq::MergeFrom(const ConnMasterDelRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterDelRouteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterDelRouteReq::CopyFrom(const ConnMasterDelRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterDelRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnMasterDelRouteReq::Swap(ConnMasterDelRouteReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterDelRouteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterDelRouteReq_descriptor_;
  metadata.reflection = ConnMasterDelRouteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConnMasterGetOnlineReq::ConnMasterGetOnlineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterGetOnlineReq::InitAsDefaultInstance() {
}

ConnMasterGetOnlineReq::ConnMasterGetOnlineReq(const ConnMasterGetOnlineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterGetOnlineReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterGetOnlineReq::~ConnMasterGetOnlineReq() {
  SharedDtor();
}

void ConnMasterGetOnlineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnMasterGetOnlineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterGetOnlineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterGetOnlineReq_descriptor_;
}

const ConnMasterGetOnlineReq& ConnMasterGetOnlineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterGetOnlineReq* ConnMasterGetOnlineReq::default_instance_ = NULL;

ConnMasterGetOnlineReq* ConnMasterGetOnlineReq::New() const {
  return new ConnMasterGetOnlineReq;
}

void ConnMasterGetOnlineReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterGetOnlineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConnMasterGetOnlineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterGetOnlineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterGetOnlineReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterGetOnlineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterGetOnlineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterGetOnlineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterGetOnlineReq::MergeFrom(const ConnMasterGetOnlineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterGetOnlineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterGetOnlineReq::CopyFrom(const ConnMasterGetOnlineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterGetOnlineReq::IsInitialized() const {

  return true;
}

void ConnMasterGetOnlineReq::Swap(ConnMasterGetOnlineReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterGetOnlineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterGetOnlineReq_descriptor_;
  metadata.reflection = ConnMasterGetOnlineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnMasterGetOnlineRsp::kRspMsgFieldNumber;
const int ConnMasterGetOnlineRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

ConnMasterGetOnlineRsp::ConnMasterGetOnlineRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterGetOnlineRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

ConnMasterGetOnlineRsp::ConnMasterGetOnlineRsp(const ConnMasterGetOnlineRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterGetOnlineRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterGetOnlineRsp::~ConnMasterGetOnlineRsp() {
  SharedDtor();
}

void ConnMasterGetOnlineRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void ConnMasterGetOnlineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterGetOnlineRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterGetOnlineRsp_descriptor_;
}

const ConnMasterGetOnlineRsp& ConnMasterGetOnlineRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterGetOnlineRsp* ConnMasterGetOnlineRsp::default_instance_ = NULL;

ConnMasterGetOnlineRsp* ConnMasterGetOnlineRsp::New() const {
  return new ConnMasterGetOnlineRsp;
}

void ConnMasterGetOnlineRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterGetOnlineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // repeated uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnMasterGetOnlineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterGetOnlineRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // repeated uint64 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterGetOnlineRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

  }
  // repeated uint64 user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterGetOnlineRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterGetOnlineRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterGetOnlineRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterGetOnlineRsp::MergeFrom(const ConnMasterGetOnlineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterGetOnlineRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterGetOnlineRsp::CopyFrom(const ConnMasterGetOnlineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterGetOnlineRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  return true;
}

void ConnMasterGetOnlineRsp::Swap(ConnMasterGetOnlineRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterGetOnlineRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterGetOnlineRsp_descriptor_;
  metadata.reflection = ConnMasterGetOnlineRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConnMasterGetOnlineCountReq::ConnMasterGetOnlineCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterGetOnlineCountReq::InitAsDefaultInstance() {
}

ConnMasterGetOnlineCountReq::ConnMasterGetOnlineCountReq(const ConnMasterGetOnlineCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterGetOnlineCountReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterGetOnlineCountReq::~ConnMasterGetOnlineCountReq() {
  SharedDtor();
}

void ConnMasterGetOnlineCountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnMasterGetOnlineCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterGetOnlineCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterGetOnlineCountReq_descriptor_;
}

const ConnMasterGetOnlineCountReq& ConnMasterGetOnlineCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterGetOnlineCountReq* ConnMasterGetOnlineCountReq::default_instance_ = NULL;

ConnMasterGetOnlineCountReq* ConnMasterGetOnlineCountReq::New() const {
  return new ConnMasterGetOnlineCountReq;
}

void ConnMasterGetOnlineCountReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterGetOnlineCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConnMasterGetOnlineCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterGetOnlineCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterGetOnlineCountReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterGetOnlineCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterGetOnlineCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterGetOnlineCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterGetOnlineCountReq::MergeFrom(const ConnMasterGetOnlineCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterGetOnlineCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterGetOnlineCountReq::CopyFrom(const ConnMasterGetOnlineCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterGetOnlineCountReq::IsInitialized() const {

  return true;
}

void ConnMasterGetOnlineCountReq::Swap(ConnMasterGetOnlineCountReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterGetOnlineCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterGetOnlineCountReq_descriptor_;
  metadata.reflection = ConnMasterGetOnlineCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnMasterGetOnlineCountRsp::kRspMsgFieldNumber;
const int ConnMasterGetOnlineCountRsp::kCountFieldNumber;
#endif  // !_MSC_VER

ConnMasterGetOnlineCountRsp::ConnMasterGetOnlineCountRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnMasterGetOnlineCountRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

ConnMasterGetOnlineCountRsp::ConnMasterGetOnlineCountRsp(const ConnMasterGetOnlineCountRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnMasterGetOnlineCountRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMasterGetOnlineCountRsp::~ConnMasterGetOnlineCountRsp() {
  SharedDtor();
}

void ConnMasterGetOnlineCountRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void ConnMasterGetOnlineCountRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMasterGetOnlineCountRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMasterGetOnlineCountRsp_descriptor_;
}

const ConnMasterGetOnlineCountRsp& ConnMasterGetOnlineCountRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnMasterGetOnlineCountRsp* ConnMasterGetOnlineCountRsp::default_instance_ = NULL;

ConnMasterGetOnlineCountRsp* ConnMasterGetOnlineCountRsp::New() const {
  return new ConnMasterGetOnlineCountRsp;
}

void ConnMasterGetOnlineCountRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
    count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMasterGetOnlineCountRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnMasterGetOnlineCountRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // required uint64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnMasterGetOnlineCountRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // required uint64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnMasterGetOnlineCountRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

    // required uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMasterGetOnlineCountRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMasterGetOnlineCountRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMasterGetOnlineCountRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMasterGetOnlineCountRsp::MergeFrom(const ConnMasterGetOnlineCountRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMasterGetOnlineCountRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMasterGetOnlineCountRsp::CopyFrom(const ConnMasterGetOnlineCountRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMasterGetOnlineCountRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  return true;
}

void ConnMasterGetOnlineCountRsp::Swap(ConnMasterGetOnlineCountRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMasterGetOnlineCountRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMasterGetOnlineCountRsp_descriptor_;
  metadata.reflection = ConnMasterGetOnlineCountRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthSvrAddUserReq::kUserIdFieldNumber;
const int AuthSvrAddUserReq::kTokenFieldNumber;
const int AuthSvrAddUserReq::kPhoneNumFieldNumber;
#endif  // !_MSC_VER

AuthSvrAddUserReq::AuthSvrAddUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthSvrAddUserReq::InitAsDefaultInstance() {
}

AuthSvrAddUserReq::AuthSvrAddUserReq(const AuthSvrAddUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthSvrAddUserReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthSvrAddUserReq::~AuthSvrAddUserReq() {
  SharedDtor();
}

void AuthSvrAddUserReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_num_;
  }
  if (this != default_instance_) {
  }
}

void AuthSvrAddUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthSvrAddUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthSvrAddUserReq_descriptor_;
}

const AuthSvrAddUserReq& AuthSvrAddUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

AuthSvrAddUserReq* AuthSvrAddUserReq::default_instance_ = NULL;

AuthSvrAddUserReq* AuthSvrAddUserReq::New() const {
  return new AuthSvrAddUserReq;
}

void AuthSvrAddUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
        phone_num_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthSvrAddUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required bytes token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone_num;
        break;
      }

      // required string phone_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_num().data(), this->phone_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthSvrAddUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->token(), output);
  }

  // required string phone_num = 3;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthSvrAddUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required bytes token = 2;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->token(), target);
  }

  // required string phone_num = 3;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthSvrAddUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // required string phone_num = 3;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthSvrAddUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthSvrAddUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthSvrAddUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthSvrAddUserReq::MergeFrom(const AuthSvrAddUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthSvrAddUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthSvrAddUserReq::CopyFrom(const AuthSvrAddUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSvrAddUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AuthSvrAddUserReq::Swap(AuthSvrAddUserReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(token_, other->token_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthSvrAddUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthSvrAddUserReq_descriptor_;
  metadata.reflection = AuthSvrAddUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthSvrDelUserReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

AuthSvrDelUserReq::AuthSvrDelUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthSvrDelUserReq::InitAsDefaultInstance() {
}

AuthSvrDelUserReq::AuthSvrDelUserReq(const AuthSvrDelUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthSvrDelUserReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthSvrDelUserReq::~AuthSvrDelUserReq() {
  SharedDtor();
}

void AuthSvrDelUserReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthSvrDelUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthSvrDelUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthSvrDelUserReq_descriptor_;
}

const AuthSvrDelUserReq& AuthSvrDelUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

AuthSvrDelUserReq* AuthSvrDelUserReq::default_instance_ = NULL;

AuthSvrDelUserReq* AuthSvrDelUserReq::New() const {
  return new AuthSvrDelUserReq;
}

void AuthSvrDelUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthSvrDelUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthSvrDelUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthSvrDelUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthSvrDelUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthSvrDelUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthSvrDelUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthSvrDelUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthSvrDelUserReq::MergeFrom(const AuthSvrDelUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthSvrDelUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthSvrDelUserReq::CopyFrom(const AuthSvrDelUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSvrDelUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthSvrDelUserReq::Swap(AuthSvrDelUserReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthSvrDelUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthSvrDelUserReq_descriptor_;
  metadata.reflection = AuthSvrDelUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthSvrLoginReq::kPhoneNumFieldNumber;
const int AuthSvrLoginReq::kSecretChapFieldNumber;
const int AuthSvrLoginReq::kRandomMsgFieldNumber;
const int AuthSvrLoginReq::kRoleFieldNumber;
#endif  // !_MSC_VER

AuthSvrLoginReq::AuthSvrLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthSvrLoginReq::InitAsDefaultInstance() {
}

AuthSvrLoginReq::AuthSvrLoginReq(const AuthSvrLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthSvrLoginReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secret_chap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  random_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthSvrLoginReq::~AuthSvrLoginReq() {
  SharedDtor();
}

void AuthSvrLoginReq::SharedDtor() {
  if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_num_;
  }
  if (secret_chap_ != &::google::protobuf::internal::kEmptyString) {
    delete secret_chap_;
  }
  if (random_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete random_msg_;
  }
  if (this != default_instance_) {
  }
}

void AuthSvrLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthSvrLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthSvrLoginReq_descriptor_;
}

const AuthSvrLoginReq& AuthSvrLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

AuthSvrLoginReq* AuthSvrLoginReq::default_instance_ = NULL;

AuthSvrLoginReq* AuthSvrLoginReq::New() const {
  return new AuthSvrLoginReq;
}

void AuthSvrLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
        phone_num_->clear();
      }
    }
    if (has_secret_chap()) {
      if (secret_chap_ != &::google::protobuf::internal::kEmptyString) {
        secret_chap_->clear();
      }
    }
    if (has_random_msg()) {
      if (random_msg_ != &::google::protobuf::internal::kEmptyString) {
        random_msg_->clear();
      }
    }
    role_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthSvrLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_num().data(), this->phone_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_secret_chap;
        break;
      }

      // required bytes secret_chap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secret_chap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret_chap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_random_msg;
        break;
      }

      // required bytes random_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_random_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role;
        break;
      }

      // required int32 role = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthSvrLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phone_num(), output);
  }

  // required bytes secret_chap = 3;
  if (has_secret_chap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->secret_chap(), output);
  }

  // required bytes random_msg = 4;
  if (has_random_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->random_msg(), output);
  }

  // required int32 role = 5;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthSvrLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone_num(), target);
  }

  // required bytes secret_chap = 3;
  if (has_secret_chap()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->secret_chap(), target);
  }

  // required bytes random_msg = 4;
  if (has_random_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->random_msg(), target);
  }

  // required int32 role = 5;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthSvrLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_num());
    }

    // required bytes secret_chap = 3;
    if (has_secret_chap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secret_chap());
    }

    // required bytes random_msg = 4;
    if (has_random_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->random_msg());
    }

    // required int32 role = 5;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthSvrLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthSvrLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthSvrLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthSvrLoginReq::MergeFrom(const AuthSvrLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_secret_chap()) {
      set_secret_chap(from.secret_chap());
    }
    if (from.has_random_msg()) {
      set_random_msg(from.random_msg());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthSvrLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthSvrLoginReq::CopyFrom(const AuthSvrLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSvrLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AuthSvrLoginReq::Swap(AuthSvrLoginReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(secret_chap_, other->secret_chap_);
    std::swap(random_msg_, other->random_msg_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthSvrLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthSvrLoginReq_descriptor_;
  metadata.reflection = AuthSvrLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthSvrLoginRsp::kRspMsgFieldNumber;
const int AuthSvrLoginRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

AuthSvrLoginRsp::AuthSvrLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthSvrLoginRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

AuthSvrLoginRsp::AuthSvrLoginRsp(const AuthSvrLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthSvrLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthSvrLoginRsp::~AuthSvrLoginRsp() {
  SharedDtor();
}

void AuthSvrLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void AuthSvrLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthSvrLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthSvrLoginRsp_descriptor_;
}

const AuthSvrLoginRsp& AuthSvrLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

AuthSvrLoginRsp* AuthSvrLoginRsp::default_instance_ = NULL;

AuthSvrLoginRsp* AuthSvrLoginRsp::New() const {
  return new AuthSvrLoginRsp;
}

void AuthSvrLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthSvrLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthSvrLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthSvrLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthSvrLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

    // required uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthSvrLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthSvrLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthSvrLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthSvrLoginRsp::MergeFrom(const AuthSvrLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthSvrLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthSvrLoginRsp::CopyFrom(const AuthSvrLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSvrLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  return true;
}

void AuthSvrLoginRsp::Swap(AuthSvrLoginRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthSvrLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthSvrLoginRsp_descriptor_;
  metadata.reflection = AuthSvrLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthSvrQueryUserReq::kPhoneNumFieldNumber;
const int AuthSvrQueryUserReq::kRoleFieldNumber;
#endif  // !_MSC_VER

AuthSvrQueryUserReq::AuthSvrQueryUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthSvrQueryUserReq::InitAsDefaultInstance() {
}

AuthSvrQueryUserReq::AuthSvrQueryUserReq(const AuthSvrQueryUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthSvrQueryUserReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthSvrQueryUserReq::~AuthSvrQueryUserReq() {
  SharedDtor();
}

void AuthSvrQueryUserReq::SharedDtor() {
  if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_num_;
  }
  if (this != default_instance_) {
  }
}

void AuthSvrQueryUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthSvrQueryUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthSvrQueryUserReq_descriptor_;
}

const AuthSvrQueryUserReq& AuthSvrQueryUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

AuthSvrQueryUserReq* AuthSvrQueryUserReq::default_instance_ = NULL;

AuthSvrQueryUserReq* AuthSvrQueryUserReq::New() const {
  return new AuthSvrQueryUserReq;
}

void AuthSvrQueryUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
        phone_num_->clear();
      }
    }
    role_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthSvrQueryUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_num().data(), this->phone_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // required int32 role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthSvrQueryUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phone_num(), output);
  }

  // required int32 role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthSvrQueryUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone_num(), target);
  }

  // required int32 role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthSvrQueryUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_num());
    }

    // required int32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthSvrQueryUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthSvrQueryUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthSvrQueryUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthSvrQueryUserReq::MergeFrom(const AuthSvrQueryUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthSvrQueryUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthSvrQueryUserReq::CopyFrom(const AuthSvrQueryUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSvrQueryUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AuthSvrQueryUserReq::Swap(AuthSvrQueryUserReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthSvrQueryUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthSvrQueryUserReq_descriptor_;
  metadata.reflection = AuthSvrQueryUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthSvrQueryUserRsp::kRspMsgFieldNumber;
const int AuthSvrQueryUserRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

AuthSvrQueryUserRsp::AuthSvrQueryUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthSvrQueryUserRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

AuthSvrQueryUserRsp::AuthSvrQueryUserRsp(const AuthSvrQueryUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthSvrQueryUserRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthSvrQueryUserRsp::~AuthSvrQueryUserRsp() {
  SharedDtor();
}

void AuthSvrQueryUserRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void AuthSvrQueryUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthSvrQueryUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthSvrQueryUserRsp_descriptor_;
}

const AuthSvrQueryUserRsp& AuthSvrQueryUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

AuthSvrQueryUserRsp* AuthSvrQueryUserRsp::default_instance_ = NULL;

AuthSvrQueryUserRsp* AuthSvrQueryUserRsp::New() const {
  return new AuthSvrQueryUserRsp;
}

void AuthSvrQueryUserRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthSvrQueryUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthSvrQueryUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthSvrQueryUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthSvrQueryUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthSvrQueryUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthSvrQueryUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthSvrQueryUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthSvrQueryUserRsp::MergeFrom(const AuthSvrQueryUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthSvrQueryUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthSvrQueryUserRsp::CopyFrom(const AuthSvrQueryUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSvrQueryUserRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  return true;
}

void AuthSvrQueryUserRsp::Swap(AuthSvrQueryUserRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthSvrQueryUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthSvrQueryUserRsp_descriptor_;
  metadata.reflection = AuthSvrQueryUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthSvrSignReq::kContentFieldNumber;
#endif  // !_MSC_VER

AuthSvrSignReq::AuthSvrSignReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthSvrSignReq::InitAsDefaultInstance() {
}

AuthSvrSignReq::AuthSvrSignReq(const AuthSvrSignReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthSvrSignReq::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthSvrSignReq::~AuthSvrSignReq() {
  SharedDtor();
}

void AuthSvrSignReq::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void AuthSvrSignReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthSvrSignReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthSvrSignReq_descriptor_;
}

const AuthSvrSignReq& AuthSvrSignReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

AuthSvrSignReq* AuthSvrSignReq::default_instance_ = NULL;

AuthSvrSignReq* AuthSvrSignReq::New() const {
  return new AuthSvrSignReq;
}

void AuthSvrSignReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthSvrSignReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthSvrSignReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthSvrSignReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthSvrSignReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthSvrSignReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthSvrSignReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthSvrSignReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthSvrSignReq::MergeFrom(const AuthSvrSignReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthSvrSignReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthSvrSignReq::CopyFrom(const AuthSvrSignReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSvrSignReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthSvrSignReq::Swap(AuthSvrSignReq* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthSvrSignReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthSvrSignReq_descriptor_;
  metadata.reflection = AuthSvrSignReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthSvrSignRsp::kRspMsgFieldNumber;
const int AuthSvrSignRsp::kHmacFieldNumber;
#endif  // !_MSC_VER

AuthSvrSignRsp::AuthSvrSignRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthSvrSignRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

AuthSvrSignRsp::AuthSvrSignRsp(const AuthSvrSignRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthSvrSignRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthSvrSignRsp::~AuthSvrSignRsp() {
  SharedDtor();
}

void AuthSvrSignRsp::SharedDtor() {
  if (hmac_ != &::google::protobuf::internal::kEmptyString) {
    delete hmac_;
  }
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void AuthSvrSignRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthSvrSignRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthSvrSignRsp_descriptor_;
}

const AuthSvrSignRsp& AuthSvrSignRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

AuthSvrSignRsp* AuthSvrSignRsp::default_instance_ = NULL;

AuthSvrSignRsp* AuthSvrSignRsp::New() const {
  return new AuthSvrSignRsp;
}

void AuthSvrSignRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
    if (has_hmac()) {
      if (hmac_ != &::google::protobuf::internal::kEmptyString) {
        hmac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthSvrSignRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hmac;
        break;
      }

      // optional string hmac = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hmac().data(), this->hmac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthSvrSignRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // optional string hmac = 2;
  if (has_hmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hmac().data(), this->hmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hmac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthSvrSignRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // optional string hmac = 2;
  if (has_hmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hmac().data(), this->hmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hmac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthSvrSignRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

    // optional string hmac = 2;
    if (has_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hmac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthSvrSignRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthSvrSignRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthSvrSignRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthSvrSignRsp::MergeFrom(const AuthSvrSignRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
    if (from.has_hmac()) {
      set_hmac(from.hmac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthSvrSignRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthSvrSignRsp::CopyFrom(const AuthSvrSignRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSvrSignRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  return true;
}

void AuthSvrSignRsp::Swap(AuthSvrSignRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    std::swap(hmac_, other->hmac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthSvrSignRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthSvrSignRsp_descriptor_;
  metadata.reflection = AuthSvrSignRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coordinate::kXFieldNumber;
const int Coordinate::kYFieldNumber;
const int Coordinate::kTypeFieldNumber;
const int Coordinate::kTimestampFieldNumber;
const int Coordinate::kDxFieldNumber;
const int Coordinate::kDyFieldNumber;
#endif  // !_MSC_VER

Coordinate::Coordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Coordinate::InitAsDefaultInstance() {
}

Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Coordinate::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  type_ = 1;
  timestamp_ = 0u;
  dx_ = 0;
  dy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coordinate::~Coordinate() {
  SharedDtor();
}

void Coordinate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coordinate_descriptor_;
}

const Coordinate& Coordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

Coordinate* Coordinate::default_instance_ = NULL;

Coordinate* Coordinate::New() const {
  return new Coordinate;
}

void Coordinate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    type_ = 1;
    timestamp_ = 0u;
    dx_ = 0;
    dy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .DidiPush.CoordinateType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::CoordinateType_IsValid(value)) {
            set_type(static_cast< ::DidiPush::CoordinateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_dx;
        break;
      }

      // optional double dx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dx_)));
          set_has_dx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_dy;
        break;
      }

      // optional double dy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dy_)));
          set_has_dy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional double dx = 5;
  if (has_dx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->dx(), output);
  }

  // optional double dy = 6;
  if (has_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Coordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional double dx = 5;
  if (has_dx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->dx(), target);
  }

  // optional double dy = 6;
  if (has_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Coordinate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required .DidiPush.CoordinateType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional double dx = 5;
    if (has_dx()) {
      total_size += 1 + 8;
    }

    // optional double dy = 6;
    if (has_dy()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_dy()) {
      set_dy(from.dy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(type_, other->type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(dx_, other->dx_);
    std::swap(dy_, other->dy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coordinate_descriptor_;
  metadata.reflection = Coordinate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrUpReq::kXFieldNumber;
const int CdntSvrUpReq::kYFieldNumber;
const int CdntSvrUpReq::kTypeFieldNumber;
const int CdntSvrUpReq::kTimestampFieldNumber;
const int CdntSvrUpReq::kPullPeerFieldNumber;
const int CdntSvrUpReq::kDxFieldNumber;
const int CdntSvrUpReq::kDyFieldNumber;
#endif  // !_MSC_VER

CdntSvrUpReq::CdntSvrUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrUpReq::InitAsDefaultInstance() {
}

CdntSvrUpReq::CdntSvrUpReq(const CdntSvrUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrUpReq::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  type_ = 1;
  timestamp_ = 0u;
  pull_peer_ = false;
  dx_ = 0;
  dy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrUpReq::~CdntSvrUpReq() {
  SharedDtor();
}

void CdntSvrUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CdntSvrUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrUpReq_descriptor_;
}

const CdntSvrUpReq& CdntSvrUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrUpReq* CdntSvrUpReq::default_instance_ = NULL;

CdntSvrUpReq* CdntSvrUpReq::New() const {
  return new CdntSvrUpReq;
}

void CdntSvrUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    type_ = 1;
    timestamp_ = 0u;
    pull_peer_ = false;
    dx_ = 0;
    dy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .DidiPush.CoordinateType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::CoordinateType_IsValid(value)) {
            set_type(static_cast< ::DidiPush::CoordinateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pull_peer;
        break;
      }

      // optional bool pull_peer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pull_peer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pull_peer_)));
          set_has_pull_peer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_dx;
        break;
      }

      // optional double dx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dx_)));
          set_has_dx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_dy;
        break;
      }

      // optional double dy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dy_)));
          set_has_dy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional bool pull_peer = 5;
  if (has_pull_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pull_peer(), output);
  }

  // optional double dx = 6;
  if (has_dx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dx(), output);
  }

  // optional double dy = 7;
  if (has_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional bool pull_peer = 5;
  if (has_pull_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pull_peer(), target);
  }

  // optional double dx = 6;
  if (has_dx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dx(), target);
  }

  // optional double dy = 7;
  if (has_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required .DidiPush.CoordinateType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional bool pull_peer = 5;
    if (has_pull_peer()) {
      total_size += 1 + 1;
    }

    // optional double dx = 6;
    if (has_dx()) {
      total_size += 1 + 8;
    }

    // optional double dy = 7;
    if (has_dy()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrUpReq::MergeFrom(const CdntSvrUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_pull_peer()) {
      set_pull_peer(from.pull_peer());
    }
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_dy()) {
      set_dy(from.dy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrUpReq::CopyFrom(const CdntSvrUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CdntSvrUpReq::Swap(CdntSvrUpReq* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(type_, other->type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(pull_peer_, other->pull_peer_);
    std::swap(dx_, other->dx_);
    std::swap(dy_, other->dy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrUpReq_descriptor_;
  metadata.reflection = CdntSvrUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerCoordinateInfo::kLocalIdFieldNumber;
const int PeerCoordinateInfo::kCoordinateFieldNumber;
const int PeerCoordinateInfo::kDistanceFieldNumber;
const int PeerCoordinateInfo::kWaitTimeFieldNumber;
const int PeerCoordinateInfo::kIsArrivedLimitedFieldNumber;
#endif  // !_MSC_VER

PeerCoordinateInfo::PeerCoordinateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeerCoordinateInfo::InitAsDefaultInstance() {
  coordinate_ = const_cast< ::DidiPush::Coordinate*>(&::DidiPush::Coordinate::default_instance());
}

PeerCoordinateInfo::PeerCoordinateInfo(const PeerCoordinateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeerCoordinateInfo::SharedCtor() {
  _cached_size_ = 0;
  local_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coordinate_ = NULL;
  distance_ = 0u;
  wait_time_ = 0u;
  is_arrived_limited_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerCoordinateInfo::~PeerCoordinateInfo() {
  SharedDtor();
}

void PeerCoordinateInfo::SharedDtor() {
  if (local_id_ != &::google::protobuf::internal::kEmptyString) {
    delete local_id_;
  }
  if (this != default_instance_) {
    delete coordinate_;
  }
}

void PeerCoordinateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerCoordinateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerCoordinateInfo_descriptor_;
}

const PeerCoordinateInfo& PeerCoordinateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PeerCoordinateInfo* PeerCoordinateInfo::default_instance_ = NULL;

PeerCoordinateInfo* PeerCoordinateInfo::New() const {
  return new PeerCoordinateInfo;
}

void PeerCoordinateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_local_id()) {
      if (local_id_ != &::google::protobuf::internal::kEmptyString) {
        local_id_->clear();
      }
    }
    if (has_coordinate()) {
      if (coordinate_ != NULL) coordinate_->::DidiPush::Coordinate::Clear();
    }
    distance_ = 0u;
    wait_time_ = 0u;
    is_arrived_limited_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerCoordinateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string local_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_id().data(), this->local_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_coordinate;
        break;
      }

      // required .DidiPush.Coordinate coordinate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_distance;
        break;
      }

      // required uint32 distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wait_time;
        break;
      }

      // required uint32 wait_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_time_)));
          set_has_wait_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_arrived_limited;
        break;
      }

      // optional bool is_arrived_limited = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_arrived_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_arrived_limited_)));
          set_has_is_arrived_limited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeerCoordinateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string local_id = 1;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_id().data(), this->local_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->local_id(), output);
  }

  // required .DidiPush.Coordinate coordinate = 2;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->coordinate(), output);
  }

  // required uint32 distance = 3;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->distance(), output);
  }

  // required uint32 wait_time = 4;
  if (has_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wait_time(), output);
  }

  // optional bool is_arrived_limited = 5;
  if (has_is_arrived_limited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_arrived_limited(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeerCoordinateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string local_id = 1;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_id().data(), this->local_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->local_id(), target);
  }

  // required .DidiPush.Coordinate coordinate = 2;
  if (has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->coordinate(), target);
  }

  // required uint32 distance = 3;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->distance(), target);
  }

  // required uint32 wait_time = 4;
  if (has_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wait_time(), target);
  }

  // optional bool is_arrived_limited = 5;
  if (has_is_arrived_limited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_arrived_limited(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeerCoordinateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string local_id = 1;
    if (has_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_id());
    }

    // required .DidiPush.Coordinate coordinate = 2;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }

    // required uint32 distance = 3;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance());
    }

    // required uint32 wait_time = 4;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wait_time());
    }

    // optional bool is_arrived_limited = 5;
    if (has_is_arrived_limited()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerCoordinateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerCoordinateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerCoordinateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerCoordinateInfo::MergeFrom(const PeerCoordinateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_id()) {
      set_local_id(from.local_id());
    }
    if (from.has_coordinate()) {
      mutable_coordinate()->::DidiPush::Coordinate::MergeFrom(from.coordinate());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_wait_time()) {
      set_wait_time(from.wait_time());
    }
    if (from.has_is_arrived_limited()) {
      set_is_arrived_limited(from.is_arrived_limited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerCoordinateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerCoordinateInfo::CopyFrom(const PeerCoordinateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCoordinateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_coordinate()) {
    if (!this->coordinate().IsInitialized()) return false;
  }
  return true;
}

void PeerCoordinateInfo::Swap(PeerCoordinateInfo* other) {
  if (other != this) {
    std::swap(local_id_, other->local_id_);
    std::swap(coordinate_, other->coordinate_);
    std::swap(distance_, other->distance_);
    std::swap(wait_time_, other->wait_time_);
    std::swap(is_arrived_limited_, other->is_arrived_limited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerCoordinateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerCoordinateInfo_descriptor_;
  metadata.reflection = PeerCoordinateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerCoordinateRelation::kLocalIdFieldNumber;
const int PeerCoordinateRelation::kUserIdFieldNumber;
const int PeerCoordinateRelation::kInactiveExpireSecondsFieldNumber;
const int PeerCoordinateRelation::kLastActiveTimestampFieldNumber;
const int PeerCoordinateRelation::kCreateTimeFieldNumber;
const int PeerCoordinateRelation::kTypeFieldNumber;
const int PeerCoordinateRelation::kBizTypeFieldNumber;
#endif  // !_MSC_VER

PeerCoordinateRelation::PeerCoordinateRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeerCoordinateRelation::InitAsDefaultInstance() {
}

PeerCoordinateRelation::PeerCoordinateRelation(const PeerCoordinateRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeerCoordinateRelation::SharedCtor() {
  _cached_size_ = 0;
  local_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  inactive_expire_seconds_ = 0u;
  last_active_timestamp_ = 0u;
  create_time_ = 0u;
  type_ = 0;
  biz_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerCoordinateRelation::~PeerCoordinateRelation() {
  SharedDtor();
}

void PeerCoordinateRelation::SharedDtor() {
  if (local_id_ != &::google::protobuf::internal::kEmptyString) {
    delete local_id_;
  }
  if (this != default_instance_) {
  }
}

void PeerCoordinateRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerCoordinateRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerCoordinateRelation_descriptor_;
}

const PeerCoordinateRelation& PeerCoordinateRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PeerCoordinateRelation* PeerCoordinateRelation::default_instance_ = NULL;

PeerCoordinateRelation* PeerCoordinateRelation::New() const {
  return new PeerCoordinateRelation;
}

void PeerCoordinateRelation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_local_id()) {
      if (local_id_ != &::google::protobuf::internal::kEmptyString) {
        local_id_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    inactive_expire_seconds_ = 0u;
    last_active_timestamp_ = 0u;
    create_time_ = 0u;
    type_ = 0;
    biz_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerCoordinateRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string local_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_id().data(), this->local_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inactive_expire_seconds;
        break;
      }

      // required uint32 inactive_expire_seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inactive_expire_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inactive_expire_seconds_)));
          set_has_inactive_expire_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_active_timestamp;
        break;
      }

      // optional uint32 last_active_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_active_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_active_timestamp_)));
          set_has_last_active_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .DidiPush.RelationType type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::RelationType_IsValid(value)) {
            set_type(static_cast< ::DidiPush::RelationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_biz_type;
        break;
      }

      // optional uint32 biz_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_biz_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &biz_type_)));
          set_has_biz_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeerCoordinateRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string local_id = 1;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_id().data(), this->local_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->local_id(), output);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // required uint32 inactive_expire_seconds = 3;
  if (has_inactive_expire_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inactive_expire_seconds(), output);
  }

  // optional uint32 last_active_timestamp = 4;
  if (has_last_active_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_active_timestamp(), output);
  }

  // optional uint32 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->create_time(), output);
  }

  // optional .DidiPush.RelationType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional uint32 biz_type = 7;
  if (has_biz_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->biz_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeerCoordinateRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string local_id = 1;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_id().data(), this->local_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->local_id(), target);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // required uint32 inactive_expire_seconds = 3;
  if (has_inactive_expire_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inactive_expire_seconds(), target);
  }

  // optional uint32 last_active_timestamp = 4;
  if (has_last_active_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_active_timestamp(), target);
  }

  // optional uint32 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->create_time(), target);
  }

  // optional .DidiPush.RelationType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional uint32 biz_type = 7;
  if (has_biz_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->biz_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeerCoordinateRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string local_id = 1;
    if (has_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_id());
    }

    // required uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required uint32 inactive_expire_seconds = 3;
    if (has_inactive_expire_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inactive_expire_seconds());
    }

    // optional uint32 last_active_timestamp = 4;
    if (has_last_active_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_active_timestamp());
    }

    // optional uint32 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional .DidiPush.RelationType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 biz_type = 7;
    if (has_biz_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->biz_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerCoordinateRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerCoordinateRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerCoordinateRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerCoordinateRelation::MergeFrom(const PeerCoordinateRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_id()) {
      set_local_id(from.local_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_inactive_expire_seconds()) {
      set_inactive_expire_seconds(from.inactive_expire_seconds());
    }
    if (from.has_last_active_timestamp()) {
      set_last_active_timestamp(from.last_active_timestamp());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_biz_type()) {
      set_biz_type(from.biz_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerCoordinateRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerCoordinateRelation::CopyFrom(const PeerCoordinateRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCoordinateRelation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PeerCoordinateRelation::Swap(PeerCoordinateRelation* other) {
  if (other != this) {
    std::swap(local_id_, other->local_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(inactive_expire_seconds_, other->inactive_expire_seconds_);
    std::swap(last_active_timestamp_, other->last_active_timestamp_);
    std::swap(create_time_, other->create_time_);
    std::swap(type_, other->type_);
    std::swap(biz_type_, other->biz_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerCoordinateRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerCoordinateRelation_descriptor_;
  metadata.reflection = PeerCoordinateRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrSetRelationReq::kUserIdFieldNumber;
const int CdntSvrSetRelationReq::kRelationsFieldNumber;
const int CdntSvrSetRelationReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CdntSvrSetRelationReq::CdntSvrSetRelationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrSetRelationReq::InitAsDefaultInstance() {
}

CdntSvrSetRelationReq::CdntSvrSetRelationReq(const CdntSvrSetRelationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrSetRelationReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrSetRelationReq::~CdntSvrSetRelationReq() {
  SharedDtor();
}

void CdntSvrSetRelationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CdntSvrSetRelationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrSetRelationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrSetRelationReq_descriptor_;
}

const CdntSvrSetRelationReq& CdntSvrSetRelationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrSetRelationReq* CdntSvrSetRelationReq::default_instance_ = NULL;

CdntSvrSetRelationReq* CdntSvrSetRelationReq::New() const {
  return new CdntSvrSetRelationReq;
}

void CdntSvrSetRelationReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  relations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrSetRelationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        break;
      }

      // repeated .DidiPush.PeerCoordinateRelation relations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .DidiPush.CoordinateType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::CoordinateType_IsValid(value)) {
            set_type(static_cast< ::DidiPush::CoordinateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrSetRelationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relations(i), output);
  }

  // optional .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrSetRelationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relations(i), target);
  }

  // optional .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrSetRelationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .DidiPush.CoordinateType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrSetRelationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrSetRelationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrSetRelationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrSetRelationReq::MergeFrom(const CdntSvrSetRelationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  relations_.MergeFrom(from.relations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrSetRelationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrSetRelationReq::CopyFrom(const CdntSvrSetRelationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrSetRelationReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < relations_size(); i++) {
    if (!this->relations(i).IsInitialized()) return false;
  }
  return true;
}

void CdntSvrSetRelationReq::Swap(CdntSvrSetRelationReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    relations_.Swap(&other->relations_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrSetRelationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrSetRelationReq_descriptor_;
  metadata.reflection = CdntSvrSetRelationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrSetRelationRsp::kRspMsgFieldNumber;
const int CdntSvrSetRelationRsp::kRelationsFieldNumber;
#endif  // !_MSC_VER

CdntSvrSetRelationRsp::CdntSvrSetRelationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrSetRelationRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

CdntSvrSetRelationRsp::CdntSvrSetRelationRsp(const CdntSvrSetRelationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrSetRelationRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrSetRelationRsp::~CdntSvrSetRelationRsp() {
  SharedDtor();
}

void CdntSvrSetRelationRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void CdntSvrSetRelationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrSetRelationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrSetRelationRsp_descriptor_;
}

const CdntSvrSetRelationRsp& CdntSvrSetRelationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrSetRelationRsp* CdntSvrSetRelationRsp::default_instance_ = NULL;

CdntSvrSetRelationRsp* CdntSvrSetRelationRsp::New() const {
  return new CdntSvrSetRelationRsp;
}

void CdntSvrSetRelationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
  }
  relations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrSetRelationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        break;
      }

      // repeated .DidiPush.PeerCoordinateRelation relations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrSetRelationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrSetRelationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrSetRelationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

  }
  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrSetRelationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrSetRelationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrSetRelationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrSetRelationRsp::MergeFrom(const CdntSvrSetRelationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  relations_.MergeFrom(from.relations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrSetRelationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrSetRelationRsp::CopyFrom(const CdntSvrSetRelationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrSetRelationRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  for (int i = 0; i < relations_size(); i++) {
    if (!this->relations(i).IsInitialized()) return false;
  }
  return true;
}

void CdntSvrSetRelationRsp::Swap(CdntSvrSetRelationRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    relations_.Swap(&other->relations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrSetRelationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrSetRelationRsp_descriptor_;
  metadata.reflection = CdntSvrSetRelationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrAddRelationReq::kUserIdFieldNumber;
const int CdntSvrAddRelationReq::kRelationsFieldNumber;
const int CdntSvrAddRelationReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CdntSvrAddRelationReq::CdntSvrAddRelationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrAddRelationReq::InitAsDefaultInstance() {
}

CdntSvrAddRelationReq::CdntSvrAddRelationReq(const CdntSvrAddRelationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrAddRelationReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrAddRelationReq::~CdntSvrAddRelationReq() {
  SharedDtor();
}

void CdntSvrAddRelationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CdntSvrAddRelationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrAddRelationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrAddRelationReq_descriptor_;
}

const CdntSvrAddRelationReq& CdntSvrAddRelationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrAddRelationReq* CdntSvrAddRelationReq::default_instance_ = NULL;

CdntSvrAddRelationReq* CdntSvrAddRelationReq::New() const {
  return new CdntSvrAddRelationReq;
}

void CdntSvrAddRelationReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  relations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrAddRelationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        break;
      }

      // repeated .DidiPush.PeerCoordinateRelation relations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .DidiPush.CoordinateType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::CoordinateType_IsValid(value)) {
            set_type(static_cast< ::DidiPush::CoordinateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrAddRelationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relations(i), output);
  }

  // optional .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrAddRelationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relations(i), target);
  }

  // optional .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrAddRelationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .DidiPush.CoordinateType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrAddRelationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrAddRelationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrAddRelationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrAddRelationReq::MergeFrom(const CdntSvrAddRelationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  relations_.MergeFrom(from.relations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrAddRelationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrAddRelationReq::CopyFrom(const CdntSvrAddRelationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrAddRelationReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < relations_size(); i++) {
    if (!this->relations(i).IsInitialized()) return false;
  }
  return true;
}

void CdntSvrAddRelationReq::Swap(CdntSvrAddRelationReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    relations_.Swap(&other->relations_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrAddRelationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrAddRelationReq_descriptor_;
  metadata.reflection = CdntSvrAddRelationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrAddRelationRsp::kRspMsgFieldNumber;
const int CdntSvrAddRelationRsp::kRelationsFieldNumber;
#endif  // !_MSC_VER

CdntSvrAddRelationRsp::CdntSvrAddRelationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrAddRelationRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

CdntSvrAddRelationRsp::CdntSvrAddRelationRsp(const CdntSvrAddRelationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrAddRelationRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrAddRelationRsp::~CdntSvrAddRelationRsp() {
  SharedDtor();
}

void CdntSvrAddRelationRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void CdntSvrAddRelationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrAddRelationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrAddRelationRsp_descriptor_;
}

const CdntSvrAddRelationRsp& CdntSvrAddRelationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrAddRelationRsp* CdntSvrAddRelationRsp::default_instance_ = NULL;

CdntSvrAddRelationRsp* CdntSvrAddRelationRsp::New() const {
  return new CdntSvrAddRelationRsp;
}

void CdntSvrAddRelationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
  }
  relations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrAddRelationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        break;
      }

      // repeated .DidiPush.PeerCoordinateRelation relations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrAddRelationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrAddRelationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrAddRelationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

  }
  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrAddRelationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrAddRelationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrAddRelationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrAddRelationRsp::MergeFrom(const CdntSvrAddRelationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  relations_.MergeFrom(from.relations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrAddRelationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrAddRelationRsp::CopyFrom(const CdntSvrAddRelationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrAddRelationRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  for (int i = 0; i < relations_size(); i++) {
    if (!this->relations(i).IsInitialized()) return false;
  }
  return true;
}

void CdntSvrAddRelationRsp::Swap(CdntSvrAddRelationRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    relations_.Swap(&other->relations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrAddRelationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrAddRelationRsp_descriptor_;
  metadata.reflection = CdntSvrAddRelationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrDelRelationReq::kUserIdFieldNumber;
const int CdntSvrDelRelationReq::kLocalIdsFieldNumber;
#endif  // !_MSC_VER

CdntSvrDelRelationReq::CdntSvrDelRelationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrDelRelationReq::InitAsDefaultInstance() {
}

CdntSvrDelRelationReq::CdntSvrDelRelationReq(const CdntSvrDelRelationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrDelRelationReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrDelRelationReq::~CdntSvrDelRelationReq() {
  SharedDtor();
}

void CdntSvrDelRelationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CdntSvrDelRelationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrDelRelationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrDelRelationReq_descriptor_;
}

const CdntSvrDelRelationReq& CdntSvrDelRelationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrDelRelationReq* CdntSvrDelRelationReq::default_instance_ = NULL;

CdntSvrDelRelationReq* CdntSvrDelRelationReq::New() const {
  return new CdntSvrDelRelationReq;
}

void CdntSvrDelRelationReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  local_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrDelRelationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_local_ids;
        break;
      }

      // repeated string local_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_local_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_ids(this->local_ids_size() - 1).data(),
            this->local_ids(this->local_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_local_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrDelRelationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated string local_ids = 2;
  for (int i = 0; i < this->local_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->local_ids(i).data(), this->local_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->local_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrDelRelationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated string local_ids = 2;
  for (int i = 0; i < this->local_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_ids(i).data(), this->local_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->local_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrDelRelationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated string local_ids = 2;
  total_size += 1 * this->local_ids_size();
  for (int i = 0; i < this->local_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->local_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrDelRelationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrDelRelationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrDelRelationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrDelRelationReq::MergeFrom(const CdntSvrDelRelationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  local_ids_.MergeFrom(from.local_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrDelRelationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrDelRelationReq::CopyFrom(const CdntSvrDelRelationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrDelRelationReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CdntSvrDelRelationReq::Swap(CdntSvrDelRelationReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    local_ids_.Swap(&other->local_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrDelRelationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrDelRelationReq_descriptor_;
  metadata.reflection = CdntSvrDelRelationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrDelRelationRsp::kRspMsgFieldNumber;
const int CdntSvrDelRelationRsp::kRelationsFieldNumber;
#endif  // !_MSC_VER

CdntSvrDelRelationRsp::CdntSvrDelRelationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrDelRelationRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

CdntSvrDelRelationRsp::CdntSvrDelRelationRsp(const CdntSvrDelRelationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrDelRelationRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrDelRelationRsp::~CdntSvrDelRelationRsp() {
  SharedDtor();
}

void CdntSvrDelRelationRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void CdntSvrDelRelationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrDelRelationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrDelRelationRsp_descriptor_;
}

const CdntSvrDelRelationRsp& CdntSvrDelRelationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrDelRelationRsp* CdntSvrDelRelationRsp::default_instance_ = NULL;

CdntSvrDelRelationRsp* CdntSvrDelRelationRsp::New() const {
  return new CdntSvrDelRelationRsp;
}

void CdntSvrDelRelationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
  }
  relations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrDelRelationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        break;
      }

      // repeated .DidiPush.PeerCoordinateRelation relations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrDelRelationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrDelRelationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrDelRelationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

  }
  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrDelRelationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrDelRelationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrDelRelationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrDelRelationRsp::MergeFrom(const CdntSvrDelRelationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  relations_.MergeFrom(from.relations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrDelRelationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrDelRelationRsp::CopyFrom(const CdntSvrDelRelationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrDelRelationRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  for (int i = 0; i < relations_size(); i++) {
    if (!this->relations(i).IsInitialized()) return false;
  }
  return true;
}

void CdntSvrDelRelationRsp::Swap(CdntSvrDelRelationRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    relations_.Swap(&other->relations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrDelRelationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrDelRelationRsp_descriptor_;
  metadata.reflection = CdntSvrDelRelationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrGetRelationReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

CdntSvrGetRelationReq::CdntSvrGetRelationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrGetRelationReq::InitAsDefaultInstance() {
}

CdntSvrGetRelationReq::CdntSvrGetRelationReq(const CdntSvrGetRelationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrGetRelationReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrGetRelationReq::~CdntSvrGetRelationReq() {
  SharedDtor();
}

void CdntSvrGetRelationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CdntSvrGetRelationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrGetRelationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrGetRelationReq_descriptor_;
}

const CdntSvrGetRelationReq& CdntSvrGetRelationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrGetRelationReq* CdntSvrGetRelationReq::default_instance_ = NULL;

CdntSvrGetRelationReq* CdntSvrGetRelationReq::New() const {
  return new CdntSvrGetRelationReq;
}

void CdntSvrGetRelationReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrGetRelationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrGetRelationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrGetRelationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrGetRelationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrGetRelationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrGetRelationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrGetRelationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrGetRelationReq::MergeFrom(const CdntSvrGetRelationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrGetRelationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrGetRelationReq::CopyFrom(const CdntSvrGetRelationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrGetRelationReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CdntSvrGetRelationReq::Swap(CdntSvrGetRelationReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrGetRelationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrGetRelationReq_descriptor_;
  metadata.reflection = CdntSvrGetRelationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrGetRelationRsp::kRspMsgFieldNumber;
const int CdntSvrGetRelationRsp::kRelationsFieldNumber;
const int CdntSvrGetRelationRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

CdntSvrGetRelationRsp::CdntSvrGetRelationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrGetRelationRsp::InitAsDefaultInstance() {
  rsp_msg_ = const_cast< ::DidiPush::RspMsg*>(&::DidiPush::RspMsg::default_instance());
}

CdntSvrGetRelationRsp::CdntSvrGetRelationRsp(const CdntSvrGetRelationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrGetRelationRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrGetRelationRsp::~CdntSvrGetRelationRsp() {
  SharedDtor();
}

void CdntSvrGetRelationRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void CdntSvrGetRelationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrGetRelationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrGetRelationRsp_descriptor_;
}

const CdntSvrGetRelationRsp& CdntSvrGetRelationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrGetRelationRsp* CdntSvrGetRelationRsp::default_instance_ = NULL;

CdntSvrGetRelationRsp* CdntSvrGetRelationRsp::New() const {
  return new CdntSvrGetRelationRsp;
}

void CdntSvrGetRelationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp_msg()) {
      if (rsp_msg_ != NULL) rsp_msg_->::DidiPush::RspMsg::Clear();
    }
    type_ = 1;
  }
  relations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrGetRelationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.RspMsg rsp_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        break;
      }

      // repeated .DidiPush.PeerCoordinateRelation relations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .DidiPush.CoordinateType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::CoordinateType_IsValid(value)) {
            set_type(static_cast< ::DidiPush::CoordinateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrGetRelationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp_msg(), output);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relations(i), output);
  }

  // optional .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrGetRelationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.RspMsg rsp_msg = 1;
  if (has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp_msg(), target);
  }

  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relations(i), target);
  }

  // optional .DidiPush.CoordinateType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrGetRelationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.RspMsg rsp_msg = 1;
    if (has_rsp_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp_msg());
    }

    // optional .DidiPush.CoordinateType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .DidiPush.PeerCoordinateRelation relations = 2;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrGetRelationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrGetRelationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrGetRelationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrGetRelationRsp::MergeFrom(const CdntSvrGetRelationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  relations_.MergeFrom(from.relations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_msg()) {
      mutable_rsp_msg()->::DidiPush::RspMsg::MergeFrom(from.rsp_msg());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrGetRelationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrGetRelationRsp::CopyFrom(const CdntSvrGetRelationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrGetRelationRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsp_msg()) {
    if (!this->rsp_msg().IsInitialized()) return false;
  }
  for (int i = 0; i < relations_size(); i++) {
    if (!this->relations(i).IsInitialized()) return false;
  }
  return true;
}

void CdntSvrGetRelationRsp::Swap(CdntSvrGetRelationRsp* other) {
  if (other != this) {
    std::swap(rsp_msg_, other->rsp_msg_);
    relations_.Swap(&other->relations_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrGetRelationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrGetRelationRsp_descriptor_;
  metadata.reflection = CdntSvrGetRelationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CollectSvrHeartbeatReq::CollectSvrHeartbeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectSvrHeartbeatReq::InitAsDefaultInstance() {
}

CollectSvrHeartbeatReq::CollectSvrHeartbeatReq(const CollectSvrHeartbeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectSvrHeartbeatReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectSvrHeartbeatReq::~CollectSvrHeartbeatReq() {
  SharedDtor();
}

void CollectSvrHeartbeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectSvrHeartbeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectSvrHeartbeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectSvrHeartbeatReq_descriptor_;
}

const CollectSvrHeartbeatReq& CollectSvrHeartbeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CollectSvrHeartbeatReq* CollectSvrHeartbeatReq::default_instance_ = NULL;

CollectSvrHeartbeatReq* CollectSvrHeartbeatReq::New() const {
  return new CollectSvrHeartbeatReq;
}

void CollectSvrHeartbeatReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectSvrHeartbeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CollectSvrHeartbeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectSvrHeartbeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectSvrHeartbeatReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectSvrHeartbeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectSvrHeartbeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectSvrHeartbeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectSvrHeartbeatReq::MergeFrom(const CollectSvrHeartbeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectSvrHeartbeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectSvrHeartbeatReq::CopyFrom(const CollectSvrHeartbeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectSvrHeartbeatReq::IsInitialized() const {

  return true;
}

void CollectSvrHeartbeatReq::Swap(CollectSvrHeartbeatReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectSvrHeartbeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectSvrHeartbeatReq_descriptor_;
  metadata.reflection = CollectSvrHeartbeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CollectSvrHeartbeatRsp::CollectSvrHeartbeatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectSvrHeartbeatRsp::InitAsDefaultInstance() {
}

CollectSvrHeartbeatRsp::CollectSvrHeartbeatRsp(const CollectSvrHeartbeatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectSvrHeartbeatRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectSvrHeartbeatRsp::~CollectSvrHeartbeatRsp() {
  SharedDtor();
}

void CollectSvrHeartbeatRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectSvrHeartbeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectSvrHeartbeatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectSvrHeartbeatRsp_descriptor_;
}

const CollectSvrHeartbeatRsp& CollectSvrHeartbeatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CollectSvrHeartbeatRsp* CollectSvrHeartbeatRsp::default_instance_ = NULL;

CollectSvrHeartbeatRsp* CollectSvrHeartbeatRsp::New() const {
  return new CollectSvrHeartbeatRsp;
}

void CollectSvrHeartbeatRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectSvrHeartbeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CollectSvrHeartbeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectSvrHeartbeatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectSvrHeartbeatRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectSvrHeartbeatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectSvrHeartbeatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectSvrHeartbeatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectSvrHeartbeatRsp::MergeFrom(const CollectSvrHeartbeatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectSvrHeartbeatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectSvrHeartbeatRsp::CopyFrom(const CollectSvrHeartbeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectSvrHeartbeatRsp::IsInitialized() const {

  return true;
}

void CollectSvrHeartbeatRsp::Swap(CollectSvrHeartbeatRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectSvrHeartbeatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectSvrHeartbeatRsp_descriptor_;
  metadata.reflection = CollectSvrHeartbeatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectSvrDelayReq::kTimeFieldNumber;
#endif  // !_MSC_VER

CollectSvrDelayReq::CollectSvrDelayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectSvrDelayReq::InitAsDefaultInstance() {
}

CollectSvrDelayReq::CollectSvrDelayReq(const CollectSvrDelayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectSvrDelayReq::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectSvrDelayReq::~CollectSvrDelayReq() {
  SharedDtor();
}

void CollectSvrDelayReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectSvrDelayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectSvrDelayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectSvrDelayReq_descriptor_;
}

const CollectSvrDelayReq& CollectSvrDelayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CollectSvrDelayReq* CollectSvrDelayReq::default_instance_ = NULL;

CollectSvrDelayReq* CollectSvrDelayReq::New() const {
  return new CollectSvrDelayReq;
}

void CollectSvrDelayReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectSvrDelayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollectSvrDelayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectSvrDelayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectSvrDelayReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectSvrDelayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectSvrDelayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectSvrDelayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectSvrDelayReq::MergeFrom(const CollectSvrDelayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectSvrDelayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectSvrDelayReq::CopyFrom(const CollectSvrDelayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectSvrDelayReq::IsInitialized() const {

  return true;
}

void CollectSvrDelayReq::Swap(CollectSvrDelayReq* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectSvrDelayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectSvrDelayReq_descriptor_;
  metadata.reflection = CollectSvrDelayReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushSvrReq::kOldRoleFieldNumber;
const int PushSvrReq::kPhoneNumFieldNumber;
const int PushSvrReq::kPushMsgFieldNumber;
const int PushSvrReq::kPushStrategyFieldNumber;
const int PushSvrReq::kUserIdFieldNumber;
const int PushSvrReq::kExpireSecondsFieldNumber;
const int PushSvrReq::kLogStrFieldNumber;
const int PushSvrReq::kRoleFieldNumber;
const int PushSvrReq::kSmsMsgFieldNumber;
const int PushSvrReq::kTimeoutToSmsFieldNumber;
#endif  // !_MSC_VER

PushSvrReq::PushSvrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushSvrReq::InitAsDefaultInstance() {
  push_msg_ = const_cast< ::DidiPush::PushMsg*>(&::DidiPush::PushMsg::default_instance());
}

PushSvrReq::PushSvrReq(const PushSvrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushSvrReq::SharedCtor() {
  _cached_size_ = 0;
  old_role_ = 0;
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  push_msg_ = NULL;
  push_strategy_ = 1;
  user_id_ = GOOGLE_ULONGLONG(0);
  expire_seconds_ = 0u;
  log_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_ = 0;
  sms_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeout_to_sms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushSvrReq::~PushSvrReq() {
  SharedDtor();
}

void PushSvrReq::SharedDtor() {
  if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_num_;
  }
  if (log_str_ != &::google::protobuf::internal::kEmptyString) {
    delete log_str_;
  }
  if (sms_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete sms_msg_;
  }
  if (this != default_instance_) {
    delete push_msg_;
  }
}

void PushSvrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushSvrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushSvrReq_descriptor_;
}

const PushSvrReq& PushSvrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PushSvrReq* PushSvrReq::default_instance_ = NULL;

PushSvrReq* PushSvrReq::New() const {
  return new PushSvrReq;
}

void PushSvrReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_role_ = 0;
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
        phone_num_->clear();
      }
    }
    if (has_push_msg()) {
      if (push_msg_ != NULL) push_msg_->::DidiPush::PushMsg::Clear();
    }
    push_strategy_ = 1;
    user_id_ = GOOGLE_ULONGLONG(0);
    expire_seconds_ = 0u;
    if (has_log_str()) {
      if (log_str_ != &::google::protobuf::internal::kEmptyString) {
        log_str_->clear();
      }
    }
    role_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sms_msg()) {
      if (sms_msg_ != &::google::protobuf::internal::kEmptyString) {
        sms_msg_->clear();
      }
    }
    timeout_to_sms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushSvrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DidiPush.OldRole old_role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::OldRole_IsValid(value)) {
            set_old_role(static_cast< ::DidiPush::OldRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone_num;
        break;
      }

      // optional string phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_num().data(), this->phone_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_push_msg;
        break;
      }

      // required .DidiPush.PushMsg push_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_push_strategy;
        break;
      }

      // required .DidiPush.PushStrategy push_strategy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_push_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::PushStrategy_IsValid(value)) {
            set_push_strategy(static_cast< ::DidiPush::PushStrategy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_expire_seconds;
        break;
      }

      // optional uint32 expire_seconds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_seconds_)));
          set_has_expire_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_log_str;
        break;
      }

      // optional string log_str = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_str().data(), this->log_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_role;
        break;
      }

      // optional int32 role = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sms_msg;
        break;
      }

      // optional string sms_msg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sms_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sms_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sms_msg().data(), this->sms_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_timeout_to_sms;
        break;
      }

      // optional uint32 timeout_to_sms = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout_to_sms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_to_sms_)));
          set_has_timeout_to_sms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushSvrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DidiPush.OldRole old_role = 1;
  if (has_old_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->old_role(), output);
  }

  // optional string phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone_num(), output);
  }

  // required .DidiPush.PushMsg push_msg = 3;
  if (has_push_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->push_msg(), output);
  }

  // required .DidiPush.PushStrategy push_strategy = 4;
  if (has_push_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->push_strategy(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional uint32 expire_seconds = 6;
  if (has_expire_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->expire_seconds(), output);
  }

  // optional string log_str = 7;
  if (has_log_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_str().data(), this->log_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->log_str(), output);
  }

  // optional int32 role = 8;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->role(), output);
  }

  // optional string sms_msg = 9;
  if (has_sms_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sms_msg().data(), this->sms_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sms_msg(), output);
  }

  // optional uint32 timeout_to_sms = 10;
  if (has_timeout_to_sms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->timeout_to_sms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushSvrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DidiPush.OldRole old_role = 1;
  if (has_old_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->old_role(), target);
  }

  // optional string phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone_num(), target);
  }

  // required .DidiPush.PushMsg push_msg = 3;
  if (has_push_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->push_msg(), target);
  }

  // required .DidiPush.PushStrategy push_strategy = 4;
  if (has_push_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->push_strategy(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional uint32 expire_seconds = 6;
  if (has_expire_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->expire_seconds(), target);
  }

  // optional string log_str = 7;
  if (has_log_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_str().data(), this->log_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->log_str(), target);
  }

  // optional int32 role = 8;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->role(), target);
  }

  // optional string sms_msg = 9;
  if (has_sms_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sms_msg().data(), this->sms_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sms_msg(), target);
  }

  // optional uint32 timeout_to_sms = 10;
  if (has_timeout_to_sms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->timeout_to_sms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushSvrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DidiPush.OldRole old_role = 1;
    if (has_old_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->old_role());
    }

    // optional string phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_num());
    }

    // required .DidiPush.PushMsg push_msg = 3;
    if (has_push_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_msg());
    }

    // required .DidiPush.PushStrategy push_strategy = 4;
    if (has_push_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_strategy());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 expire_seconds = 6;
    if (has_expire_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_seconds());
    }

    // optional string log_str = 7;
    if (has_log_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_str());
    }

    // optional int32 role = 8;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sms_msg = 9;
    if (has_sms_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sms_msg());
    }

    // optional uint32 timeout_to_sms = 10;
    if (has_timeout_to_sms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout_to_sms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushSvrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushSvrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushSvrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushSvrReq::MergeFrom(const PushSvrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_role()) {
      set_old_role(from.old_role());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_push_msg()) {
      mutable_push_msg()->::DidiPush::PushMsg::MergeFrom(from.push_msg());
    }
    if (from.has_push_strategy()) {
      set_push_strategy(from.push_strategy());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_expire_seconds()) {
      set_expire_seconds(from.expire_seconds());
    }
    if (from.has_log_str()) {
      set_log_str(from.log_str());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sms_msg()) {
      set_sms_msg(from.sms_msg());
    }
    if (from.has_timeout_to_sms()) {
      set_timeout_to_sms(from.timeout_to_sms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushSvrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushSvrReq::CopyFrom(const PushSvrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushSvrReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  if (has_push_msg()) {
    if (!this->push_msg().IsInitialized()) return false;
  }
  return true;
}

void PushSvrReq::Swap(PushSvrReq* other) {
  if (other != this) {
    std::swap(old_role_, other->old_role_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(push_msg_, other->push_msg_);
    std::swap(push_strategy_, other->push_strategy_);
    std::swap(user_id_, other->user_id_);
    std::swap(expire_seconds_, other->expire_seconds_);
    std::swap(log_str_, other->log_str_);
    std::swap(role_, other->role_);
    std::swap(sms_msg_, other->sms_msg_);
    std::swap(timeout_to_sms_, other->timeout_to_sms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushSvrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushSvrReq_descriptor_;
  metadata.reflection = PushSvrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushSvrMultiReq_UserId::kOldRoleFieldNumber;
const int PushSvrMultiReq_UserId::kPhoneNumFieldNumber;
const int PushSvrMultiReq_UserId::kUserIdFieldNumber;
const int PushSvrMultiReq_UserId::kRoleFieldNumber;
#endif  // !_MSC_VER

PushSvrMultiReq_UserId::PushSvrMultiReq_UserId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushSvrMultiReq_UserId::InitAsDefaultInstance() {
}

PushSvrMultiReq_UserId::PushSvrMultiReq_UserId(const PushSvrMultiReq_UserId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushSvrMultiReq_UserId::SharedCtor() {
  _cached_size_ = 0;
  old_role_ = 0;
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushSvrMultiReq_UserId::~PushSvrMultiReq_UserId() {
  SharedDtor();
}

void PushSvrMultiReq_UserId::SharedDtor() {
  if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_num_;
  }
  if (this != default_instance_) {
  }
}

void PushSvrMultiReq_UserId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushSvrMultiReq_UserId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushSvrMultiReq_UserId_descriptor_;
}

const PushSvrMultiReq_UserId& PushSvrMultiReq_UserId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PushSvrMultiReq_UserId* PushSvrMultiReq_UserId::default_instance_ = NULL;

PushSvrMultiReq_UserId* PushSvrMultiReq_UserId::New() const {
  return new PushSvrMultiReq_UserId;
}

void PushSvrMultiReq_UserId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_role_ = 0;
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::kEmptyString) {
        phone_num_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    role_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushSvrMultiReq_UserId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DidiPush.OldRole old_role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::OldRole_IsValid(value)) {
            set_old_role(static_cast< ::DidiPush::OldRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone_num;
        break;
      }

      // optional string phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_num().data(), this->phone_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role;
        break;
      }

      // optional int32 role = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushSvrMultiReq_UserId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DidiPush.OldRole old_role = 1;
  if (has_old_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->old_role(), output);
  }

  // optional string phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone_num(), output);
  }

  // optional uint64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_id(), output);
  }

  // optional int32 role = 4;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushSvrMultiReq_UserId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DidiPush.OldRole old_role = 1;
  if (has_old_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->old_role(), target);
  }

  // optional string phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_num().data(), this->phone_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone_num(), target);
  }

  // optional uint64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_id(), target);
  }

  // optional int32 role = 4;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushSvrMultiReq_UserId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DidiPush.OldRole old_role = 1;
    if (has_old_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->old_role());
    }

    // optional string phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_num());
    }

    // optional uint64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional int32 role = 4;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushSvrMultiReq_UserId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushSvrMultiReq_UserId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushSvrMultiReq_UserId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushSvrMultiReq_UserId::MergeFrom(const PushSvrMultiReq_UserId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_role()) {
      set_old_role(from.old_role());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushSvrMultiReq_UserId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushSvrMultiReq_UserId::CopyFrom(const PushSvrMultiReq_UserId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushSvrMultiReq_UserId::IsInitialized() const {

  return true;
}

void PushSvrMultiReq_UserId::Swap(PushSvrMultiReq_UserId* other) {
  if (other != this) {
    std::swap(old_role_, other->old_role_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(user_id_, other->user_id_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushSvrMultiReq_UserId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushSvrMultiReq_UserId_descriptor_;
  metadata.reflection = PushSvrMultiReq_UserId_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PushSvrMultiReq::kUsersFieldNumber;
const int PushSvrMultiReq::kPushMsgFieldNumber;
const int PushSvrMultiReq::kPushStrategyFieldNumber;
const int PushSvrMultiReq::kExpireSecondsFieldNumber;
const int PushSvrMultiReq::kLogStrFieldNumber;
const int PushSvrMultiReq::kSmsMsgFieldNumber;
const int PushSvrMultiReq::kTimeoutToSmsFieldNumber;
#endif  // !_MSC_VER

PushSvrMultiReq::PushSvrMultiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushSvrMultiReq::InitAsDefaultInstance() {
  push_msg_ = const_cast< ::DidiPush::PushMsg*>(&::DidiPush::PushMsg::default_instance());
}

PushSvrMultiReq::PushSvrMultiReq(const PushSvrMultiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushSvrMultiReq::SharedCtor() {
  _cached_size_ = 0;
  push_msg_ = NULL;
  push_strategy_ = 1;
  expire_seconds_ = 0u;
  log_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sms_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeout_to_sms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushSvrMultiReq::~PushSvrMultiReq() {
  SharedDtor();
}

void PushSvrMultiReq::SharedDtor() {
  if (log_str_ != &::google::protobuf::internal::kEmptyString) {
    delete log_str_;
  }
  if (sms_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete sms_msg_;
  }
  if (this != default_instance_) {
    delete push_msg_;
  }
}

void PushSvrMultiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushSvrMultiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushSvrMultiReq_descriptor_;
}

const PushSvrMultiReq& PushSvrMultiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PushSvrMultiReq* PushSvrMultiReq::default_instance_ = NULL;

PushSvrMultiReq* PushSvrMultiReq::New() const {
  return new PushSvrMultiReq;
}

void PushSvrMultiReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_push_msg()) {
      if (push_msg_ != NULL) push_msg_->::DidiPush::PushMsg::Clear();
    }
    push_strategy_ = 1;
    expire_seconds_ = 0u;
    if (has_log_str()) {
      if (log_str_ != &::google::protobuf::internal::kEmptyString) {
        log_str_->clear();
      }
    }
    if (has_sms_msg()) {
      if (sms_msg_ != &::google::protobuf::internal::kEmptyString) {
        sms_msg_->clear();
      }
    }
    timeout_to_sms_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushSvrMultiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DidiPush.PushSvrMultiReq.UserId users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectTag(18)) goto parse_push_msg;
        break;
      }

      // required .DidiPush.PushMsg push_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_push_strategy;
        break;
      }

      // required .DidiPush.PushStrategy push_strategy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_push_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::PushStrategy_IsValid(value)) {
            set_push_strategy(static_cast< ::DidiPush::PushStrategy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_seconds;
        break;
      }

      // optional uint32 expire_seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_seconds_)));
          set_has_expire_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_log_str;
        break;
      }

      // optional string log_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_str().data(), this->log_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sms_msg;
        break;
      }

      // optional string sms_msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sms_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sms_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sms_msg().data(), this->sms_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timeout_to_sms;
        break;
      }

      // optional uint32 timeout_to_sms = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout_to_sms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_to_sms_)));
          set_has_timeout_to_sms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushSvrMultiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DidiPush.PushSvrMultiReq.UserId users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // required .DidiPush.PushMsg push_msg = 2;
  if (has_push_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->push_msg(), output);
  }

  // required .DidiPush.PushStrategy push_strategy = 3;
  if (has_push_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->push_strategy(), output);
  }

  // optional uint32 expire_seconds = 4;
  if (has_expire_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expire_seconds(), output);
  }

  // optional string log_str = 5;
  if (has_log_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_str().data(), this->log_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->log_str(), output);
  }

  // optional string sms_msg = 6;
  if (has_sms_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sms_msg().data(), this->sms_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sms_msg(), output);
  }

  // optional uint32 timeout_to_sms = 7;
  if (has_timeout_to_sms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timeout_to_sms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushSvrMultiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DidiPush.PushSvrMultiReq.UserId users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  // required .DidiPush.PushMsg push_msg = 2;
  if (has_push_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->push_msg(), target);
  }

  // required .DidiPush.PushStrategy push_strategy = 3;
  if (has_push_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->push_strategy(), target);
  }

  // optional uint32 expire_seconds = 4;
  if (has_expire_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expire_seconds(), target);
  }

  // optional string log_str = 5;
  if (has_log_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_str().data(), this->log_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->log_str(), target);
  }

  // optional string sms_msg = 6;
  if (has_sms_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sms_msg().data(), this->sms_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sms_msg(), target);
  }

  // optional uint32 timeout_to_sms = 7;
  if (has_timeout_to_sms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timeout_to_sms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushSvrMultiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .DidiPush.PushMsg push_msg = 2;
    if (has_push_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_msg());
    }

    // required .DidiPush.PushStrategy push_strategy = 3;
    if (has_push_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_strategy());
    }

    // optional uint32 expire_seconds = 4;
    if (has_expire_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_seconds());
    }

    // optional string log_str = 5;
    if (has_log_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_str());
    }

    // optional string sms_msg = 6;
    if (has_sms_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sms_msg());
    }

    // optional uint32 timeout_to_sms = 7;
    if (has_timeout_to_sms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout_to_sms());
    }

  }
  // repeated .DidiPush.PushSvrMultiReq.UserId users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushSvrMultiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushSvrMultiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushSvrMultiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushSvrMultiReq::MergeFrom(const PushSvrMultiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_push_msg()) {
      mutable_push_msg()->::DidiPush::PushMsg::MergeFrom(from.push_msg());
    }
    if (from.has_push_strategy()) {
      set_push_strategy(from.push_strategy());
    }
    if (from.has_expire_seconds()) {
      set_expire_seconds(from.expire_seconds());
    }
    if (from.has_log_str()) {
      set_log_str(from.log_str());
    }
    if (from.has_sms_msg()) {
      set_sms_msg(from.sms_msg());
    }
    if (from.has_timeout_to_sms()) {
      set_timeout_to_sms(from.timeout_to_sms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushSvrMultiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushSvrMultiReq::CopyFrom(const PushSvrMultiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushSvrMultiReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_push_msg()) {
    if (!this->push_msg().IsInitialized()) return false;
  }
  return true;
}

void PushSvrMultiReq::Swap(PushSvrMultiReq* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(push_msg_, other->push_msg_);
    std::swap(push_strategy_, other->push_strategy_);
    std::swap(expire_seconds_, other->expire_seconds_);
    std::swap(log_str_, other->log_str_);
    std::swap(sms_msg_, other->sms_msg_);
    std::swap(timeout_to_sms_, other->timeout_to_sms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushSvrMultiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushSvrMultiReq_descriptor_;
  metadata.reflection = PushSvrMultiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushSvrMultiRsp::kRspsFieldNumber;
#endif  // !_MSC_VER

PushSvrMultiRsp::PushSvrMultiRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushSvrMultiRsp::InitAsDefaultInstance() {
}

PushSvrMultiRsp::PushSvrMultiRsp(const PushSvrMultiRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushSvrMultiRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushSvrMultiRsp::~PushSvrMultiRsp() {
  SharedDtor();
}

void PushSvrMultiRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushSvrMultiRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushSvrMultiRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushSvrMultiRsp_descriptor_;
}

const PushSvrMultiRsp& PushSvrMultiRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PushSvrMultiRsp* PushSvrMultiRsp::default_instance_ = NULL;

PushSvrMultiRsp* PushSvrMultiRsp::New() const {
  return new PushSvrMultiRsp;
}

void PushSvrMultiRsp::Clear() {
  rsps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushSvrMultiRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DidiPush.RspMsg rsps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rsps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rsps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushSvrMultiRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DidiPush.RspMsg rsps = 1;
  for (int i = 0; i < this->rsps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushSvrMultiRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DidiPush.RspMsg rsps = 1;
  for (int i = 0; i < this->rsps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushSvrMultiRsp::ByteSize() const {
  int total_size = 0;

  // repeated .DidiPush.RspMsg rsps = 1;
  total_size += 1 * this->rsps_size();
  for (int i = 0; i < this->rsps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rsps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushSvrMultiRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushSvrMultiRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushSvrMultiRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushSvrMultiRsp::MergeFrom(const PushSvrMultiRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rsps_.MergeFrom(from.rsps_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushSvrMultiRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushSvrMultiRsp::CopyFrom(const PushSvrMultiRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushSvrMultiRsp::IsInitialized() const {

  for (int i = 0; i < rsps_size(); i++) {
    if (!this->rsps(i).IsInitialized()) return false;
  }
  return true;
}

void PushSvrMultiRsp::Swap(PushSvrMultiRsp* other) {
  if (other != this) {
    rsps_.Swap(&other->rsps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushSvrMultiRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushSvrMultiRsp_descriptor_;
  metadata.reflection = PushSvrMultiRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushSvrRetryReq::kMsgFieldNumber;
const int PushSvrRetryReq::kMessageIdFieldNumber;
#endif  // !_MSC_VER

PushSvrRetryReq::PushSvrRetryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushSvrRetryReq::InitAsDefaultInstance() {
  msg_ = const_cast< ::DidiPush::PushSvrReq*>(&::DidiPush::PushSvrReq::default_instance());
}

PushSvrRetryReq::PushSvrRetryReq(const PushSvrRetryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushSvrRetryReq::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  message_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushSvrRetryReq::~PushSvrRetryReq() {
  SharedDtor();
}

void PushSvrRetryReq::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void PushSvrRetryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushSvrRetryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushSvrRetryReq_descriptor_;
}

const PushSvrRetryReq& PushSvrRetryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PushSvrRetryReq* PushSvrRetryReq::default_instance_ = NULL;

PushSvrRetryReq* PushSvrRetryReq::New() const {
  return new PushSvrRetryReq;
}

void PushSvrRetryReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::DidiPush::PushSvrReq::Clear();
    }
    message_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushSvrRetryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DidiPush.PushSvrReq msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_message_id;
        break;
      }

      // required uint64 message_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushSvrRetryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DidiPush.PushSvrReq msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }

  // required uint64 message_id = 2;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushSvrRetryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DidiPush.PushSvrReq msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }

  // required uint64 message_id = 2;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushSvrRetryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DidiPush.PushSvrReq msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

    // required uint64 message_id = 2;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->message_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushSvrRetryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushSvrRetryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushSvrRetryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushSvrRetryReq::MergeFrom(const PushSvrRetryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::DidiPush::PushSvrReq::MergeFrom(from.msg());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushSvrRetryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushSvrRetryReq::CopyFrom(const PushSvrRetryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushSvrRetryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void PushSvrRetryReq::Swap(PushSvrRetryReq* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushSvrRetryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushSvrRetryReq_descriptor_;
  metadata.reflection = PushSvrRetryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Param::kKeyFieldNumber;
const int Param::kDataFieldNumber;
#endif  // !_MSC_VER

Param::Param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Param::InitAsDefaultInstance() {
}

Param::Param(const Param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Param::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Param::~Param() {
  SharedDtor();
}

void Param::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Param_descriptor_;
}

const Param& Param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

Param* Param::default_instance_ = NULL;

Param* Param::New() const {
  return new Param;
}

void Param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Param::MergeFrom(const Param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Param::CopyFrom(const Param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Param::Swap(Param* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Param_descriptor_;
  metadata.reflection = Param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DispatchSvrReq::kPathFieldNumber;
const int DispatchSvrReq::kQueryParamsFieldNumber;
const int DispatchSvrReq::kContentTypeFieldNumber;
const int DispatchSvrReq::kPostDataFieldNumber;
#endif  // !_MSC_VER

DispatchSvrReq::DispatchSvrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DispatchSvrReq::InitAsDefaultInstance() {
}

DispatchSvrReq::DispatchSvrReq(const DispatchSvrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DispatchSvrReq::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  post_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DispatchSvrReq::~DispatchSvrReq() {
  SharedDtor();
}

void DispatchSvrReq::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (content_type_ != &::google::protobuf::internal::kEmptyString) {
    delete content_type_;
  }
  if (post_data_ != &::google::protobuf::internal::kEmptyString) {
    delete post_data_;
  }
  if (this != default_instance_) {
  }
}

void DispatchSvrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DispatchSvrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DispatchSvrReq_descriptor_;
}

const DispatchSvrReq& DispatchSvrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

DispatchSvrReq* DispatchSvrReq::default_instance_ = NULL;

DispatchSvrReq* DispatchSvrReq::New() const {
  return new DispatchSvrReq;
}

void DispatchSvrReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_content_type()) {
      if (content_type_ != &::google::protobuf::internal::kEmptyString) {
        content_type_->clear();
      }
    }
    if (has_post_data()) {
      if (post_data_ != &::google::protobuf::internal::kEmptyString) {
        post_data_->clear();
      }
    }
  }
  query_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DispatchSvrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query_params;
        break;
      }

      // repeated .DidiPush.Param query_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query_params;
        if (input->ExpectTag(26)) goto parse_content_type;
        break;
      }

      // optional string content_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content_type().data(), this->content_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_post_data;
        break;
      }

      // optional bytes post_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_post_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DispatchSvrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // repeated .DidiPush.Param query_params = 2;
  for (int i = 0; i < this->query_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->query_params(i), output);
  }

  // optional string content_type = 3;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content_type(), output);
  }

  // optional bytes post_data = 4;
  if (has_post_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->post_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DispatchSvrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // repeated .DidiPush.Param query_params = 2;
  for (int i = 0; i < this->query_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->query_params(i), target);
  }

  // optional string content_type = 3;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content_type(), target);
  }

  // optional bytes post_data = 4;
  if (has_post_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->post_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DispatchSvrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string content_type = 3;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_type());
    }

    // optional bytes post_data = 4;
    if (has_post_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->post_data());
    }

  }
  // repeated .DidiPush.Param query_params = 2;
  total_size += 1 * this->query_params_size();
  for (int i = 0; i < this->query_params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query_params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispatchSvrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DispatchSvrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DispatchSvrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DispatchSvrReq::MergeFrom(const DispatchSvrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_params_.MergeFrom(from.query_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_post_data()) {
      set_post_data(from.post_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DispatchSvrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispatchSvrReq::CopyFrom(const DispatchSvrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchSvrReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < query_params_size(); i++) {
    if (!this->query_params(i).IsInitialized()) return false;
  }
  return true;
}

void DispatchSvrReq::Swap(DispatchSvrReq* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    query_params_.Swap(&other->query_params_);
    std::swap(content_type_, other->content_type_);
    std::swap(post_data_, other->post_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DispatchSvrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DispatchSvrReq_descriptor_;
  metadata.reflection = DispatchSvrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DispatchSvrRsp::kSysCodeFieldNumber;
const int DispatchSvrRsp::kHttpStatusCodeFieldNumber;
const int DispatchSvrRsp::kBodyFieldNumber;
#endif  // !_MSC_VER

DispatchSvrRsp::DispatchSvrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DispatchSvrRsp::InitAsDefaultInstance() {
}

DispatchSvrRsp::DispatchSvrRsp(const DispatchSvrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DispatchSvrRsp::SharedCtor() {
  _cached_size_ = 0;
  sys_code_ = 0;
  http_status_code_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DispatchSvrRsp::~DispatchSvrRsp() {
  SharedDtor();
}

void DispatchSvrRsp::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void DispatchSvrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DispatchSvrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DispatchSvrRsp_descriptor_;
}

const DispatchSvrRsp& DispatchSvrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

DispatchSvrRsp* DispatchSvrRsp::default_instance_ = NULL;

DispatchSvrRsp* DispatchSvrRsp::New() const {
  return new DispatchSvrRsp;
}

void DispatchSvrRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sys_code_ = 0;
    http_status_code_ = 0;
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DispatchSvrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sys_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_code_)));
          set_has_sys_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_http_status_code;
        break;
      }

      // optional int32 http_status_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_http_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_status_code_)));
          set_has_http_status_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // optional bytes body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DispatchSvrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sys_code = 1;
  if (has_sys_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sys_code(), output);
  }

  // optional int32 http_status_code = 2;
  if (has_http_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->http_status_code(), output);
  }

  // optional bytes body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DispatchSvrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sys_code = 1;
  if (has_sys_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sys_code(), target);
  }

  // optional int32 http_status_code = 2;
  if (has_http_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->http_status_code(), target);
  }

  // optional bytes body = 3;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DispatchSvrRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sys_code = 1;
    if (has_sys_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_code());
    }

    // optional int32 http_status_code = 2;
    if (has_http_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->http_status_code());
    }

    // optional bytes body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispatchSvrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DispatchSvrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DispatchSvrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DispatchSvrRsp::MergeFrom(const DispatchSvrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sys_code()) {
      set_sys_code(from.sys_code());
    }
    if (from.has_http_status_code()) {
      set_http_status_code(from.http_status_code());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DispatchSvrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispatchSvrRsp::CopyFrom(const DispatchSvrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchSvrRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DispatchSvrRsp::Swap(DispatchSvrRsp* other) {
  if (other != this) {
    std::swap(sys_code_, other->sys_code_);
    std::swap(http_status_code_, other->http_status_code_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DispatchSvrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DispatchSvrRsp_descriptor_;
  metadata.reflection = DispatchSvrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnSvrConnectChallenge::kRandomMsgFieldNumber;
#endif  // !_MSC_VER

ConnSvrConnectChallenge::ConnSvrConnectChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnSvrConnectChallenge::InitAsDefaultInstance() {
}

ConnSvrConnectChallenge::ConnSvrConnectChallenge(const ConnSvrConnectChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnSvrConnectChallenge::SharedCtor() {
  _cached_size_ = 0;
  random_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSvrConnectChallenge::~ConnSvrConnectChallenge() {
  SharedDtor();
}

void ConnSvrConnectChallenge::SharedDtor() {
  if (random_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete random_msg_;
  }
  if (this != default_instance_) {
  }
}

void ConnSvrConnectChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSvrConnectChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSvrConnectChallenge_descriptor_;
}

const ConnSvrConnectChallenge& ConnSvrConnectChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

ConnSvrConnectChallenge* ConnSvrConnectChallenge::default_instance_ = NULL;

ConnSvrConnectChallenge* ConnSvrConnectChallenge::New() const {
  return new ConnSvrConnectChallenge;
}

void ConnSvrConnectChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_random_msg()) {
      if (random_msg_ != &::google::protobuf::internal::kEmptyString) {
        random_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSvrConnectChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes random_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnSvrConnectChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes random_msg = 1;
  if (has_random_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->random_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnSvrConnectChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes random_msg = 1;
  if (has_random_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->random_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnSvrConnectChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes random_msg = 1;
    if (has_random_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->random_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSvrConnectChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSvrConnectChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSvrConnectChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSvrConnectChallenge::MergeFrom(const ConnSvrConnectChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_random_msg()) {
      set_random_msg(from.random_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSvrConnectChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSvrConnectChallenge::CopyFrom(const ConnSvrConnectChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSvrConnectChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnSvrConnectChallenge::Swap(ConnSvrConnectChallenge* other) {
  if (other != this) {
    std::swap(random_msg_, other->random_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSvrConnectChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSvrConnectChallenge_descriptor_;
  metadata.reflection = ConnSvrConnectChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AppHeartbeatReq::AppHeartbeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppHeartbeatReq::InitAsDefaultInstance() {
}

AppHeartbeatReq::AppHeartbeatReq(const AppHeartbeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppHeartbeatReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppHeartbeatReq::~AppHeartbeatReq() {
  SharedDtor();
}

void AppHeartbeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppHeartbeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppHeartbeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppHeartbeatReq_descriptor_;
}

const AppHeartbeatReq& AppHeartbeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

AppHeartbeatReq* AppHeartbeatReq::default_instance_ = NULL;

AppHeartbeatReq* AppHeartbeatReq::New() const {
  return new AppHeartbeatReq;
}

void AppHeartbeatReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppHeartbeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AppHeartbeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppHeartbeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppHeartbeatReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppHeartbeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppHeartbeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppHeartbeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppHeartbeatReq::MergeFrom(const AppHeartbeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppHeartbeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppHeartbeatReq::CopyFrom(const AppHeartbeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppHeartbeatReq::IsInitialized() const {

  return true;
}

void AppHeartbeatReq::Swap(AppHeartbeatReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppHeartbeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppHeartbeatReq_descriptor_;
  metadata.reflection = AppHeartbeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CdntSvrDownReq::kPeerCoordinateInfosFieldNumber;
#endif  // !_MSC_VER

CdntSvrDownReq::CdntSvrDownReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdntSvrDownReq::InitAsDefaultInstance() {
}

CdntSvrDownReq::CdntSvrDownReq(const CdntSvrDownReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdntSvrDownReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdntSvrDownReq::~CdntSvrDownReq() {
  SharedDtor();
}

void CdntSvrDownReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CdntSvrDownReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CdntSvrDownReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdntSvrDownReq_descriptor_;
}

const CdntSvrDownReq& CdntSvrDownReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

CdntSvrDownReq* CdntSvrDownReq::default_instance_ = NULL;

CdntSvrDownReq* CdntSvrDownReq::New() const {
  return new CdntSvrDownReq;
}

void CdntSvrDownReq::Clear() {
  peer_coordinate_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdntSvrDownReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DidiPush.PeerCoordinateInfo peer_coordinate_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_coordinate_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peer_coordinate_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_peer_coordinate_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdntSvrDownReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DidiPush.PeerCoordinateInfo peer_coordinate_infos = 1;
  for (int i = 0; i < this->peer_coordinate_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peer_coordinate_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdntSvrDownReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DidiPush.PeerCoordinateInfo peer_coordinate_infos = 1;
  for (int i = 0; i < this->peer_coordinate_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peer_coordinate_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdntSvrDownReq::ByteSize() const {
  int total_size = 0;

  // repeated .DidiPush.PeerCoordinateInfo peer_coordinate_infos = 1;
  total_size += 1 * this->peer_coordinate_infos_size();
  for (int i = 0; i < this->peer_coordinate_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peer_coordinate_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CdntSvrDownReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdntSvrDownReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdntSvrDownReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdntSvrDownReq::MergeFrom(const CdntSvrDownReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  peer_coordinate_infos_.MergeFrom(from.peer_coordinate_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdntSvrDownReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdntSvrDownReq::CopyFrom(const CdntSvrDownReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdntSvrDownReq::IsInitialized() const {

  for (int i = 0; i < peer_coordinate_infos_size(); i++) {
    if (!this->peer_coordinate_infos(i).IsInitialized()) return false;
  }
  return true;
}

void CdntSvrDownReq::Swap(CdntSvrDownReq* other) {
  if (other != this) {
    peer_coordinate_infos_.Swap(&other->peer_coordinate_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CdntSvrDownReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CdntSvrDownReq_descriptor_;
  metadata.reflection = CdntSvrDownReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushStatReq::kTaskIdsFieldNumber;
#endif  // !_MSC_VER

PushStatReq::PushStatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushStatReq::InitAsDefaultInstance() {
}

PushStatReq::PushStatReq(const PushStatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushStatReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushStatReq::~PushStatReq() {
  SharedDtor();
}

void PushStatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushStatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushStatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushStatReq_descriptor_;
}

const PushStatReq& PushStatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PushStatReq* PushStatReq::default_instance_ = NULL;

PushStatReq* PushStatReq::New() const {
  return new PushStatReq;
}

void PushStatReq::Clear() {
  task_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushStatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 task_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_task_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_task_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_task_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushStatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 task_ids = 1;
  for (int i = 0; i < this->task_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->task_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushStatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 task_ids = 1;
  for (int i = 0; i < this->task_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->task_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushStatReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 task_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->task_ids(i));
    }
    total_size += 1 * this->task_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushStatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushStatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushStatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushStatReq::MergeFrom(const PushStatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_ids_.MergeFrom(from.task_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushStatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushStatReq::CopyFrom(const PushStatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushStatReq::IsInitialized() const {

  return true;
}

void PushStatReq::Swap(PushStatReq* other) {
  if (other != this) {
    task_ids_.Swap(&other->task_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushStatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushStatReq_descriptor_;
  metadata.reflection = PushStatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushStat::kTaskIdFieldNumber;
const int PushStat::kSendCntFieldNumber;
const int PushStat::kRecvCntFieldNumber;
const int PushStat::kIn1SRecvCntFieldNumber;
const int PushStat::kIn3SRecvCntFieldNumber;
const int PushStat::kIn6SRecvCntFieldNumber;
const int PushStat::kIn10SRecvCntFieldNumber;
const int PushStat::kIn30SRecvCntFieldNumber;
const int PushStat::kIn60SRecvCntFieldNumber;
const int PushStat::kGt60SRecvCntFieldNumber;
#endif  // !_MSC_VER

PushStat::PushStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushStat::InitAsDefaultInstance() {
}

PushStat::PushStat(const PushStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushStat::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_ULONGLONG(0);
  send_cnt_ = 0u;
  recv_cnt_ = 0u;
  in1s_recv_cnt_ = 0u;
  in3s_recv_cnt_ = 0u;
  in6s_recv_cnt_ = 0u;
  in10s_recv_cnt_ = 0u;
  in30s_recv_cnt_ = 0u;
  in60s_recv_cnt_ = 0u;
  gt60s_recv_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushStat::~PushStat() {
  SharedDtor();
}

void PushStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushStat_descriptor_;
}

const PushStat& PushStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PushStat* PushStat::default_instance_ = NULL;

PushStat* PushStat::New() const {
  return new PushStat;
}

void PushStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_ULONGLONG(0);
    send_cnt_ = 0u;
    recv_cnt_ = 0u;
    in1s_recv_cnt_ = 0u;
    in3s_recv_cnt_ = 0u;
    in6s_recv_cnt_ = 0u;
    in10s_recv_cnt_ = 0u;
    in30s_recv_cnt_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    in60s_recv_cnt_ = 0u;
    gt60s_recv_cnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_cnt;
        break;
      }

      // optional uint32 send_cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_cnt_)));
          set_has_send_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recv_cnt;
        break;
      }

      // optional uint32 recv_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_cnt_)));
          set_has_recv_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_in1s_recv_cnt;
        break;
      }

      // optional uint32 in1s_recv_cnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in1s_recv_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in1s_recv_cnt_)));
          set_has_in1s_recv_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_in3s_recv_cnt;
        break;
      }

      // optional uint32 in3s_recv_cnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in3s_recv_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in3s_recv_cnt_)));
          set_has_in3s_recv_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_in6s_recv_cnt;
        break;
      }

      // optional uint32 in6s_recv_cnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in6s_recv_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in6s_recv_cnt_)));
          set_has_in6s_recv_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_in10s_recv_cnt;
        break;
      }

      // optional uint32 in10s_recv_cnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in10s_recv_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in10s_recv_cnt_)));
          set_has_in10s_recv_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_in30s_recv_cnt;
        break;
      }

      // optional uint32 in30s_recv_cnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in30s_recv_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in30s_recv_cnt_)));
          set_has_in30s_recv_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_in60s_recv_cnt;
        break;
      }

      // optional uint32 in60s_recv_cnt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in60s_recv_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in60s_recv_cnt_)));
          set_has_in60s_recv_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gt60s_recv_cnt;
        break;
      }

      // optional uint32 gt60s_recv_cnt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gt60s_recv_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gt60s_recv_cnt_)));
          set_has_gt60s_recv_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // optional uint32 send_cnt = 2;
  if (has_send_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_cnt(), output);
  }

  // optional uint32 recv_cnt = 3;
  if (has_recv_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recv_cnt(), output);
  }

  // optional uint32 in1s_recv_cnt = 4;
  if (has_in1s_recv_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in1s_recv_cnt(), output);
  }

  // optional uint32 in3s_recv_cnt = 5;
  if (has_in3s_recv_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->in3s_recv_cnt(), output);
  }

  // optional uint32 in6s_recv_cnt = 6;
  if (has_in6s_recv_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->in6s_recv_cnt(), output);
  }

  // optional uint32 in10s_recv_cnt = 7;
  if (has_in10s_recv_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->in10s_recv_cnt(), output);
  }

  // optional uint32 in30s_recv_cnt = 8;
  if (has_in30s_recv_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->in30s_recv_cnt(), output);
  }

  // optional uint32 in60s_recv_cnt = 9;
  if (has_in60s_recv_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->in60s_recv_cnt(), output);
  }

  // optional uint32 gt60s_recv_cnt = 10;
  if (has_gt60s_recv_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gt60s_recv_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // optional uint32 send_cnt = 2;
  if (has_send_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_cnt(), target);
  }

  // optional uint32 recv_cnt = 3;
  if (has_recv_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recv_cnt(), target);
  }

  // optional uint32 in1s_recv_cnt = 4;
  if (has_in1s_recv_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in1s_recv_cnt(), target);
  }

  // optional uint32 in3s_recv_cnt = 5;
  if (has_in3s_recv_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->in3s_recv_cnt(), target);
  }

  // optional uint32 in6s_recv_cnt = 6;
  if (has_in6s_recv_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->in6s_recv_cnt(), target);
  }

  // optional uint32 in10s_recv_cnt = 7;
  if (has_in10s_recv_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->in10s_recv_cnt(), target);
  }

  // optional uint32 in30s_recv_cnt = 8;
  if (has_in30s_recv_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->in30s_recv_cnt(), target);
  }

  // optional uint32 in60s_recv_cnt = 9;
  if (has_in60s_recv_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->in60s_recv_cnt(), target);
  }

  // optional uint32 gt60s_recv_cnt = 10;
  if (has_gt60s_recv_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gt60s_recv_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_id());
    }

    // optional uint32 send_cnt = 2;
    if (has_send_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_cnt());
    }

    // optional uint32 recv_cnt = 3;
    if (has_recv_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_cnt());
    }

    // optional uint32 in1s_recv_cnt = 4;
    if (has_in1s_recv_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in1s_recv_cnt());
    }

    // optional uint32 in3s_recv_cnt = 5;
    if (has_in3s_recv_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in3s_recv_cnt());
    }

    // optional uint32 in6s_recv_cnt = 6;
    if (has_in6s_recv_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in6s_recv_cnt());
    }

    // optional uint32 in10s_recv_cnt = 7;
    if (has_in10s_recv_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in10s_recv_cnt());
    }

    // optional uint32 in30s_recv_cnt = 8;
    if (has_in30s_recv_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in30s_recv_cnt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 in60s_recv_cnt = 9;
    if (has_in60s_recv_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in60s_recv_cnt());
    }

    // optional uint32 gt60s_recv_cnt = 10;
    if (has_gt60s_recv_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gt60s_recv_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushStat::MergeFrom(const PushStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_send_cnt()) {
      set_send_cnt(from.send_cnt());
    }
    if (from.has_recv_cnt()) {
      set_recv_cnt(from.recv_cnt());
    }
    if (from.has_in1s_recv_cnt()) {
      set_in1s_recv_cnt(from.in1s_recv_cnt());
    }
    if (from.has_in3s_recv_cnt()) {
      set_in3s_recv_cnt(from.in3s_recv_cnt());
    }
    if (from.has_in6s_recv_cnt()) {
      set_in6s_recv_cnt(from.in6s_recv_cnt());
    }
    if (from.has_in10s_recv_cnt()) {
      set_in10s_recv_cnt(from.in10s_recv_cnt());
    }
    if (from.has_in30s_recv_cnt()) {
      set_in30s_recv_cnt(from.in30s_recv_cnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_in60s_recv_cnt()) {
      set_in60s_recv_cnt(from.in60s_recv_cnt());
    }
    if (from.has_gt60s_recv_cnt()) {
      set_gt60s_recv_cnt(from.gt60s_recv_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushStat::CopyFrom(const PushStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PushStat::Swap(PushStat* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(send_cnt_, other->send_cnt_);
    std::swap(recv_cnt_, other->recv_cnt_);
    std::swap(in1s_recv_cnt_, other->in1s_recv_cnt_);
    std::swap(in3s_recv_cnt_, other->in3s_recv_cnt_);
    std::swap(in6s_recv_cnt_, other->in6s_recv_cnt_);
    std::swap(in10s_recv_cnt_, other->in10s_recv_cnt_);
    std::swap(in30s_recv_cnt_, other->in30s_recv_cnt_);
    std::swap(in60s_recv_cnt_, other->in60s_recv_cnt_);
    std::swap(gt60s_recv_cnt_, other->gt60s_recv_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushStat_descriptor_;
  metadata.reflection = PushStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushStatRsp::kStatsFieldNumber;
#endif  // !_MSC_VER

PushStatRsp::PushStatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushStatRsp::InitAsDefaultInstance() {
}

PushStatRsp::PushStatRsp(const PushStatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushStatRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushStatRsp::~PushStatRsp() {
  SharedDtor();
}

void PushStatRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushStatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushStatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushStatRsp_descriptor_;
}

const PushStatRsp& PushStatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

PushStatRsp* PushStatRsp::default_instance_ = NULL;

PushStatRsp* PushStatRsp::New() const {
  return new PushStatRsp;
}

void PushStatRsp::Clear() {
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushStatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DidiPush.PushStat stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushStatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DidiPush.PushStat stats = 1;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushStatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DidiPush.PushStat stats = 1;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushStatRsp::ByteSize() const {
  int total_size = 0;

  // repeated .DidiPush.PushStat stats = 1;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushStatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushStatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushStatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushStatRsp::MergeFrom(const PushStatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushStatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushStatRsp::CopyFrom(const PushStatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushStatRsp::IsInitialized() const {

  for (int i = 0; i < stats_size(); i++) {
    if (!this->stats(i).IsInitialized()) return false;
  }
  return true;
}

void PushStatRsp::Swap(PushStatRsp* other) {
  if (other != this) {
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushStatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushStatRsp_descriptor_;
  metadata.reflection = PushStatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatLogReq::kEventFieldNumber;
const int StatLogReq::kTaskIdFieldNumber;
const int StatLogReq::kMsgTypeFieldNumber;
const int StatLogReq::kGapUsFieldNumber;
#endif  // !_MSC_VER

StatLogReq::StatLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatLogReq::InitAsDefaultInstance() {
}

StatLogReq::StatLogReq(const StatLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatLogReq::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0u;
  task_id_ = GOOGLE_ULONGLONG(0);
  msg_type_ = 0u;
  gap_us_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatLogReq::~StatLogReq() {
  SharedDtor();
}

void StatLogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatLogReq_descriptor_;
}

const StatLogReq& StatLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_2eproto();
  return *default_instance_;
}

StatLogReq* StatLogReq::default_instance_ = NULL;

StatLogReq* StatLogReq::New() const {
  return new StatLogReq;
}

void StatLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_ = 0u;
    task_id_ = GOOGLE_ULONGLONG(0);
    msg_type_ = 0u;
    gap_us_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required uint64 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_msg_type;
        break;
      }

      // optional uint32 msg_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gap_us;
        break;
      }

      // optional uint64 gap_us = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gap_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gap_us_)));
          set_has_gap_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event(), output);
  }

  // required uint64 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->task_id(), output);
  }

  // optional uint32 msg_type = 3;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_type(), output);
  }

  // optional uint64 gap_us = 4;
  if (has_gap_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gap_us(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event(), target);
  }

  // required uint64 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->task_id(), target);
  }

  // optional uint32 msg_type = 3;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_type(), target);
  }

  // optional uint64 gap_us = 4;
  if (has_gap_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gap_us(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }

    // required uint64 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_id());
    }

    // optional uint32 msg_type = 3;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // optional uint64 gap_us = 4;
    if (has_gap_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gap_us());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatLogReq::MergeFrom(const StatLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_gap_us()) {
      set_gap_us(from.gap_us());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatLogReq::CopyFrom(const StatLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatLogReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StatLogReq::Swap(StatLogReq* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(task_id_, other->task_id_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(gap_us_, other->gap_us_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatLogReq_descriptor_;
  metadata.reflection = StatLogReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DidiPush

// @@protoc_insertion_point(global_scope)
