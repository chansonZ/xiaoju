// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: didi_protocol_collectsvr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "didi_protocol_collectsvr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DidiPush {

namespace {

const ::google::protobuf::Descriptor* CollectSvrCoordinateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectSvrCoordinateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectSvrOrderFilterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectSvrOrderFilterReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CollectSvrMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GPSSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DriverCollectSvrCoordinateReqState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PassengerState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_didi_5fprotocol_5fcollectsvr_2eproto() {
  protobuf_AddDesc_didi_5fprotocol_5fcollectsvr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "didi_protocol_collectsvr.proto");
  GOOGLE_CHECK(file != NULL);
  CollectSvrCoordinateReq_descriptor_ = file->message_type(0);
  static const int CollectSvrCoordinateReq_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, acceleratedspeedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, acceleratedspeedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, acceleratedspeedz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, includedangleyaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, includedangleroll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, includedanglepitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, pull_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, pre_lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, pre_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, gps_source_),
  };
  CollectSvrCoordinateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectSvrCoordinateReq_descriptor_,
      CollectSvrCoordinateReq::default_instance_,
      CollectSvrCoordinateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrCoordinateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectSvrCoordinateReq));
  CollectSvrOrderFilterReq_descriptor_ = file->message_type(1);
  static const int CollectSvrOrderFilterReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrOrderFilterReq, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrOrderFilterReq, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrOrderFilterReq, send_info_),
  };
  CollectSvrOrderFilterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectSvrOrderFilterReq_descriptor_,
      CollectSvrOrderFilterReq::default_instance_,
      CollectSvrOrderFilterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrOrderFilterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectSvrOrderFilterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectSvrOrderFilterReq));
  CollectSvrMessageType_descriptor_ = file->enum_type(0);
  GPSSource_descriptor_ = file->enum_type(1);
  DriverCollectSvrCoordinateReqState_descriptor_ = file->enum_type(2);
  PassengerState_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_didi_5fprotocol_5fcollectsvr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectSvrCoordinateReq_descriptor_, &CollectSvrCoordinateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectSvrOrderFilterReq_descriptor_, &CollectSvrOrderFilterReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_didi_5fprotocol_5fcollectsvr_2eproto() {
  delete CollectSvrCoordinateReq::default_instance_;
  delete CollectSvrCoordinateReq_reflection_;
  delete CollectSvrOrderFilterReq::default_instance_;
  delete CollectSvrOrderFilterReq_reflection_;
}

void protobuf_AddDesc_didi_5fprotocol_5fcollectsvr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DidiPush::protobuf_AddDesc_didi_5fprotocol_2eproto();
  ::DidiPush::protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036didi_protocol_collectsvr.proto\022\010DidiPu"
    "sh\032\023didi_protocol.proto\032\032didi_protocol_c"
    "ommon.proto\"\230\003\n\027CollectSvrCoordinateReq\022"
    "\r\n\005phone\030\001 \001(\t\022\013\n\003lng\030\002 \001(\001\022\013\n\003lat\030\003 \001(\001"
    "\022&\n\004type\030\004 \001(\0162\030.DidiPush.CoordinateType"
    "\022\020\n\010accuracy\030\005 \001(\001\022\021\n\tdirection\030\006 \001(\001\022\r\n"
    "\005speed\030\007 \001(\001\022\031\n\021acceleratedSpeedX\030\010 \001(\002\022"
    "\031\n\021acceleratedSpeedY\030\t \001(\002\022\031\n\021accelerate"
    "dSpeedZ\030\n \001(\002\022\030\n\020includedAngleYaw\030\013 \001(\002\022"
    "\031\n\021includedAngleRoll\030\014 \001(\002\022\032\n\022includedAn"
    "glePitch\030\r \001(\002\022\021\n\tpull_peer\030\016 \001(\010\022\017\n\007pre"
    "_lng\030\017 \001(\001\022\017\n\007pre_lat\030\020 \001(\001\022\r\n\005state\030\021 \001"
    "(\r\022\022\n\ngps_source\030\022 \001(\r\"T\n\030CollectSvrOrde"
    "rFilterReq\022\020\n\010order_id\030\001 \001(\t\022\023\n\013filter_t"
    "ype\030\002 \001(\005\022\021\n\tsend_info\030\003 \001(\014*~\n\025CollectS"
    "vrMessageType\0221\n-kCollectSvrMessageTypeC"
    "ollectSvrCoordinateReq\020\001\0222\n.kCollectSvrM"
    "essageTypeCollectSvrOrderFilterReq\020\002*Z\n\t"
    "GPSSource\022\031\n\025GPSSourceFromGPSModel\020\000\022\030\n\024"
    "GPSSourceFromNetwork\020\001\022\030\n\024GPSSourceFromU"
    "nknown\020\002*}\n\"DriverCollectSvrCoordinateRe"
    "qState\022\024\n\020DriverNotWorking\020\000\022!\n\035DriverWo"
    "rkingWithoutPassenger\020\001\022\036\n\032DriverWorking"
    "WithPassenger\020\002*h\n\016PassengerState\022\030\n\024Pas"
    "sengerStateNormal\020\000\022\034\n\030PassengerStateHas"
    "PaidOff\020\001\022\036\n\032PassengerStateHasCommented\020"
    "\002B,\n\025com.sdu.didi.protobufB\023DiDiCollectP"
    "rotobuf", 1087);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "didi_protocol_collectsvr.proto", &protobuf_RegisterTypes);
  CollectSvrCoordinateReq::default_instance_ = new CollectSvrCoordinateReq();
  CollectSvrOrderFilterReq::default_instance_ = new CollectSvrOrderFilterReq();
  CollectSvrCoordinateReq::default_instance_->InitAsDefaultInstance();
  CollectSvrOrderFilterReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_didi_5fprotocol_5fcollectsvr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_didi_5fprotocol_5fcollectsvr_2eproto {
  StaticDescriptorInitializer_didi_5fprotocol_5fcollectsvr_2eproto() {
    protobuf_AddDesc_didi_5fprotocol_5fcollectsvr_2eproto();
  }
} static_descriptor_initializer_didi_5fprotocol_5fcollectsvr_2eproto_;
const ::google::protobuf::EnumDescriptor* CollectSvrMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectSvrMessageType_descriptor_;
}
bool CollectSvrMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GPSSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSSource_descriptor_;
}
bool GPSSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DriverCollectSvrCoordinateReqState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriverCollectSvrCoordinateReqState_descriptor_;
}
bool DriverCollectSvrCoordinateReqState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PassengerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassengerState_descriptor_;
}
bool PassengerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CollectSvrCoordinateReq::kPhoneFieldNumber;
const int CollectSvrCoordinateReq::kLngFieldNumber;
const int CollectSvrCoordinateReq::kLatFieldNumber;
const int CollectSvrCoordinateReq::kTypeFieldNumber;
const int CollectSvrCoordinateReq::kAccuracyFieldNumber;
const int CollectSvrCoordinateReq::kDirectionFieldNumber;
const int CollectSvrCoordinateReq::kSpeedFieldNumber;
const int CollectSvrCoordinateReq::kAcceleratedSpeedXFieldNumber;
const int CollectSvrCoordinateReq::kAcceleratedSpeedYFieldNumber;
const int CollectSvrCoordinateReq::kAcceleratedSpeedZFieldNumber;
const int CollectSvrCoordinateReq::kIncludedAngleYawFieldNumber;
const int CollectSvrCoordinateReq::kIncludedAngleRollFieldNumber;
const int CollectSvrCoordinateReq::kIncludedAnglePitchFieldNumber;
const int CollectSvrCoordinateReq::kPullPeerFieldNumber;
const int CollectSvrCoordinateReq::kPreLngFieldNumber;
const int CollectSvrCoordinateReq::kPreLatFieldNumber;
const int CollectSvrCoordinateReq::kStateFieldNumber;
const int CollectSvrCoordinateReq::kGpsSourceFieldNumber;
#endif  // !_MSC_VER

CollectSvrCoordinateReq::CollectSvrCoordinateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectSvrCoordinateReq::InitAsDefaultInstance() {
}

CollectSvrCoordinateReq::CollectSvrCoordinateReq(const CollectSvrCoordinateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectSvrCoordinateReq::SharedCtor() {
  _cached_size_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lng_ = 0;
  lat_ = 0;
  type_ = 1;
  accuracy_ = 0;
  direction_ = 0;
  speed_ = 0;
  acceleratedspeedx_ = 0;
  acceleratedspeedy_ = 0;
  acceleratedspeedz_ = 0;
  includedangleyaw_ = 0;
  includedangleroll_ = 0;
  includedanglepitch_ = 0;
  pull_peer_ = false;
  pre_lng_ = 0;
  pre_lat_ = 0;
  state_ = 0u;
  gps_source_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectSvrCoordinateReq::~CollectSvrCoordinateReq() {
  SharedDtor();
}

void CollectSvrCoordinateReq::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void CollectSvrCoordinateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectSvrCoordinateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectSvrCoordinateReq_descriptor_;
}

const CollectSvrCoordinateReq& CollectSvrCoordinateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_5fcollectsvr_2eproto();
  return *default_instance_;
}

CollectSvrCoordinateReq* CollectSvrCoordinateReq::default_instance_ = NULL;

CollectSvrCoordinateReq* CollectSvrCoordinateReq::New() const {
  return new CollectSvrCoordinateReq;
}

void CollectSvrCoordinateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    lng_ = 0;
    lat_ = 0;
    type_ = 1;
    accuracy_ = 0;
    direction_ = 0;
    speed_ = 0;
    acceleratedspeedx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    acceleratedspeedy_ = 0;
    acceleratedspeedz_ = 0;
    includedangleyaw_ = 0;
    includedangleroll_ = 0;
    includedanglepitch_ = 0;
    pull_peer_ = false;
    pre_lng_ = 0;
    pre_lat_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    state_ = 0u;
    gps_source_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectSvrCoordinateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phone = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lng;
        break;
      }

      // optional double lng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_lat;
        break;
      }

      // optional double lat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .DidiPush.CoordinateType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DidiPush::CoordinateType_IsValid(value)) {
            set_type(static_cast< ::DidiPush::CoordinateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_accuracy;
        break;
      }

      // optional double accuracy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_direction;
        break;
      }

      // optional double direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_speed;
        break;
      }

      // optional double speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_acceleratedSpeedX;
        break;
      }

      // optional float acceleratedSpeedX = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acceleratedSpeedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleratedspeedx_)));
          set_has_acceleratedspeedx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_acceleratedSpeedY;
        break;
      }

      // optional float acceleratedSpeedY = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acceleratedSpeedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleratedspeedy_)));
          set_has_acceleratedspeedy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_acceleratedSpeedZ;
        break;
      }

      // optional float acceleratedSpeedZ = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acceleratedSpeedZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleratedspeedz_)));
          set_has_acceleratedspeedz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_includedAngleYaw;
        break;
      }

      // optional float includedAngleYaw = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_includedAngleYaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &includedangleyaw_)));
          set_has_includedangleyaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_includedAngleRoll;
        break;
      }

      // optional float includedAngleRoll = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_includedAngleRoll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &includedangleroll_)));
          set_has_includedangleroll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_includedAnglePitch;
        break;
      }

      // optional float includedAnglePitch = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_includedAnglePitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &includedanglepitch_)));
          set_has_includedanglepitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pull_peer;
        break;
      }

      // optional bool pull_peer = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pull_peer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pull_peer_)));
          set_has_pull_peer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_pre_lng;
        break;
      }

      // optional double pre_lng = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pre_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_lng_)));
          set_has_pre_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_pre_lat;
        break;
      }

      // optional double pre_lat = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pre_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_lat_)));
          set_has_pre_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_state;
        break;
      }

      // optional uint32 state = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_gps_source;
        break;
      }

      // optional uint32 gps_source = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gps_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gps_source_)));
          set_has_gps_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollectSvrCoordinateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string phone = 1;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phone(), output);
  }

  // optional double lng = 2;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lng(), output);
  }

  // optional double lat = 3;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat(), output);
  }

  // optional .DidiPush.CoordinateType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional double accuracy = 5;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->accuracy(), output);
  }

  // optional double direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->direction(), output);
  }

  // optional double speed = 7;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->speed(), output);
  }

  // optional float acceleratedSpeedX = 8;
  if (has_acceleratedspeedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->acceleratedspeedx(), output);
  }

  // optional float acceleratedSpeedY = 9;
  if (has_acceleratedspeedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->acceleratedspeedy(), output);
  }

  // optional float acceleratedSpeedZ = 10;
  if (has_acceleratedspeedz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->acceleratedspeedz(), output);
  }

  // optional float includedAngleYaw = 11;
  if (has_includedangleyaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->includedangleyaw(), output);
  }

  // optional float includedAngleRoll = 12;
  if (has_includedangleroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->includedangleroll(), output);
  }

  // optional float includedAnglePitch = 13;
  if (has_includedanglepitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->includedanglepitch(), output);
  }

  // optional bool pull_peer = 14;
  if (has_pull_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->pull_peer(), output);
  }

  // optional double pre_lng = 15;
  if (has_pre_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->pre_lng(), output);
  }

  // optional double pre_lat = 16;
  if (has_pre_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->pre_lat(), output);
  }

  // optional uint32 state = 17;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->state(), output);
  }

  // optional uint32 gps_source = 18;
  if (has_gps_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->gps_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectSvrCoordinateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string phone = 1;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone(), target);
  }

  // optional double lng = 2;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lng(), target);
  }

  // optional double lat = 3;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat(), target);
  }

  // optional .DidiPush.CoordinateType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional double accuracy = 5;
  if (has_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->accuracy(), target);
  }

  // optional double direction = 6;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->direction(), target);
  }

  // optional double speed = 7;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->speed(), target);
  }

  // optional float acceleratedSpeedX = 8;
  if (has_acceleratedspeedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->acceleratedspeedx(), target);
  }

  // optional float acceleratedSpeedY = 9;
  if (has_acceleratedspeedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->acceleratedspeedy(), target);
  }

  // optional float acceleratedSpeedZ = 10;
  if (has_acceleratedspeedz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->acceleratedspeedz(), target);
  }

  // optional float includedAngleYaw = 11;
  if (has_includedangleyaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->includedangleyaw(), target);
  }

  // optional float includedAngleRoll = 12;
  if (has_includedangleroll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->includedangleroll(), target);
  }

  // optional float includedAnglePitch = 13;
  if (has_includedanglepitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->includedanglepitch(), target);
  }

  // optional bool pull_peer = 14;
  if (has_pull_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->pull_peer(), target);
  }

  // optional double pre_lng = 15;
  if (has_pre_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->pre_lng(), target);
  }

  // optional double pre_lat = 16;
  if (has_pre_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->pre_lat(), target);
  }

  // optional uint32 state = 17;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->state(), target);
  }

  // optional uint32 gps_source = 18;
  if (has_gps_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->gps_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectSvrCoordinateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string phone = 1;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional double lng = 2;
    if (has_lng()) {
      total_size += 1 + 8;
    }

    // optional double lat = 3;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional .DidiPush.CoordinateType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double accuracy = 5;
    if (has_accuracy()) {
      total_size += 1 + 8;
    }

    // optional double direction = 6;
    if (has_direction()) {
      total_size += 1 + 8;
    }

    // optional double speed = 7;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional float acceleratedSpeedX = 8;
    if (has_acceleratedspeedx()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float acceleratedSpeedY = 9;
    if (has_acceleratedspeedy()) {
      total_size += 1 + 4;
    }

    // optional float acceleratedSpeedZ = 10;
    if (has_acceleratedspeedz()) {
      total_size += 1 + 4;
    }

    // optional float includedAngleYaw = 11;
    if (has_includedangleyaw()) {
      total_size += 1 + 4;
    }

    // optional float includedAngleRoll = 12;
    if (has_includedangleroll()) {
      total_size += 1 + 4;
    }

    // optional float includedAnglePitch = 13;
    if (has_includedanglepitch()) {
      total_size += 1 + 4;
    }

    // optional bool pull_peer = 14;
    if (has_pull_peer()) {
      total_size += 1 + 1;
    }

    // optional double pre_lng = 15;
    if (has_pre_lng()) {
      total_size += 1 + 8;
    }

    // optional double pre_lat = 16;
    if (has_pre_lat()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 state = 17;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 gps_source = 18;
    if (has_gps_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gps_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectSvrCoordinateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectSvrCoordinateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectSvrCoordinateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectSvrCoordinateReq::MergeFrom(const CollectSvrCoordinateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_acceleratedspeedx()) {
      set_acceleratedspeedx(from.acceleratedspeedx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_acceleratedspeedy()) {
      set_acceleratedspeedy(from.acceleratedspeedy());
    }
    if (from.has_acceleratedspeedz()) {
      set_acceleratedspeedz(from.acceleratedspeedz());
    }
    if (from.has_includedangleyaw()) {
      set_includedangleyaw(from.includedangleyaw());
    }
    if (from.has_includedangleroll()) {
      set_includedangleroll(from.includedangleroll());
    }
    if (from.has_includedanglepitch()) {
      set_includedanglepitch(from.includedanglepitch());
    }
    if (from.has_pull_peer()) {
      set_pull_peer(from.pull_peer());
    }
    if (from.has_pre_lng()) {
      set_pre_lng(from.pre_lng());
    }
    if (from.has_pre_lat()) {
      set_pre_lat(from.pre_lat());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_gps_source()) {
      set_gps_source(from.gps_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectSvrCoordinateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectSvrCoordinateReq::CopyFrom(const CollectSvrCoordinateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectSvrCoordinateReq::IsInitialized() const {

  return true;
}

void CollectSvrCoordinateReq::Swap(CollectSvrCoordinateReq* other) {
  if (other != this) {
    std::swap(phone_, other->phone_);
    std::swap(lng_, other->lng_);
    std::swap(lat_, other->lat_);
    std::swap(type_, other->type_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(direction_, other->direction_);
    std::swap(speed_, other->speed_);
    std::swap(acceleratedspeedx_, other->acceleratedspeedx_);
    std::swap(acceleratedspeedy_, other->acceleratedspeedy_);
    std::swap(acceleratedspeedz_, other->acceleratedspeedz_);
    std::swap(includedangleyaw_, other->includedangleyaw_);
    std::swap(includedangleroll_, other->includedangleroll_);
    std::swap(includedanglepitch_, other->includedanglepitch_);
    std::swap(pull_peer_, other->pull_peer_);
    std::swap(pre_lng_, other->pre_lng_);
    std::swap(pre_lat_, other->pre_lat_);
    std::swap(state_, other->state_);
    std::swap(gps_source_, other->gps_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectSvrCoordinateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectSvrCoordinateReq_descriptor_;
  metadata.reflection = CollectSvrCoordinateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectSvrOrderFilterReq::kOrderIdFieldNumber;
const int CollectSvrOrderFilterReq::kFilterTypeFieldNumber;
const int CollectSvrOrderFilterReq::kSendInfoFieldNumber;
#endif  // !_MSC_VER

CollectSvrOrderFilterReq::CollectSvrOrderFilterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectSvrOrderFilterReq::InitAsDefaultInstance() {
}

CollectSvrOrderFilterReq::CollectSvrOrderFilterReq(const CollectSvrOrderFilterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectSvrOrderFilterReq::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_type_ = 0;
  send_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectSvrOrderFilterReq::~CollectSvrOrderFilterReq() {
  SharedDtor();
}

void CollectSvrOrderFilterReq::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (send_info_ != &::google::protobuf::internal::kEmptyString) {
    delete send_info_;
  }
  if (this != default_instance_) {
  }
}

void CollectSvrOrderFilterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectSvrOrderFilterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectSvrOrderFilterReq_descriptor_;
}

const CollectSvrOrderFilterReq& CollectSvrOrderFilterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_didi_5fprotocol_5fcollectsvr_2eproto();
  return *default_instance_;
}

CollectSvrOrderFilterReq* CollectSvrOrderFilterReq::default_instance_ = NULL;

CollectSvrOrderFilterReq* CollectSvrOrderFilterReq::New() const {
  return new CollectSvrOrderFilterReq;
}

void CollectSvrOrderFilterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    filter_type_ = 0;
    if (has_send_info()) {
      if (send_info_ != &::google::protobuf::internal::kEmptyString) {
        send_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectSvrOrderFilterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filter_type;
        break;
      }

      // optional int32 filter_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_type_)));
          set_has_filter_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_send_info;
        break;
      }

      // optional bytes send_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollectSvrOrderFilterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->order_id(), output);
  }

  // optional int32 filter_type = 2;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->filter_type(), output);
  }

  // optional bytes send_info = 3;
  if (has_send_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->send_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectSvrOrderFilterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }

  // optional int32 filter_type = 2;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->filter_type(), target);
  }

  // optional bytes send_info = 3;
  if (has_send_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->send_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectSvrOrderFilterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional int32 filter_type = 2;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_type());
    }

    // optional bytes send_info = 3;
    if (has_send_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->send_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectSvrOrderFilterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectSvrOrderFilterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectSvrOrderFilterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectSvrOrderFilterReq::MergeFrom(const CollectSvrOrderFilterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_send_info()) {
      set_send_info(from.send_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectSvrOrderFilterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectSvrOrderFilterReq::CopyFrom(const CollectSvrOrderFilterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectSvrOrderFilterReq::IsInitialized() const {

  return true;
}

void CollectSvrOrderFilterReq::Swap(CollectSvrOrderFilterReq* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(filter_type_, other->filter_type_);
    std::swap(send_info_, other->send_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectSvrOrderFilterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectSvrOrderFilterReq_descriptor_;
  metadata.reflection = CollectSvrOrderFilterReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DidiPush

// @@protoc_insertion_point(global_scope)
