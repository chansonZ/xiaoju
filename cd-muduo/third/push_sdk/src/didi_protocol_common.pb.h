// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: didi_protocol_common.proto

#ifndef PROTOBUF_didi_5fprotocol_5fcommon_2eproto__INCLUDED
#define PROTOBUF_didi_5fprotocol_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "didi_protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace DidiPush {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
void protobuf_AssignDesc_didi_5fprotocol_5fcommon_2eproto();
void protobuf_ShutdownFile_didi_5fprotocol_5fcommon_2eproto();

class LocationInfo;
class DrivingFeeInfo;
class DriverBroadcastOrderExtraInfo;

enum LocationType {
  LOC_GPS = 1,
  LOC_NET = 2,
  LOC_OTHER = 3
};
bool LocationType_IsValid(int value);
const LocationType LocationType_MIN = LOC_GPS;
const LocationType LocationType_MAX = LOC_OTHER;
const int LocationType_ARRAYSIZE = LocationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LocationType_descriptor();
inline const ::std::string& LocationType_Name(LocationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LocationType_descriptor(), value);
}
inline bool LocationType_Parse(
    const ::std::string& name, LocationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocationType>(
    LocationType_descriptor(), name, value);
}
enum DriverOrderFilterType {
  DriverOrderFilterType_OnCalling = 1,
  DriverOrderFilterType_OnOrderShowing = 2,
  DriverOrderFilterType_OnSettingMode = 3,
  DriverOrderFilterType_ModeConflict = 4,
  DriverOrderFilterType_Offline = 5,
  DriverOrderFilterType_ViewCanNotShowOrder = 6
};
bool DriverOrderFilterType_IsValid(int value);
const DriverOrderFilterType DriverOrderFilterType_MIN = DriverOrderFilterType_OnCalling;
const DriverOrderFilterType DriverOrderFilterType_MAX = DriverOrderFilterType_ViewCanNotShowOrder;
const int DriverOrderFilterType_ARRAYSIZE = DriverOrderFilterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DriverOrderFilterType_descriptor();
inline const ::std::string& DriverOrderFilterType_Name(DriverOrderFilterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DriverOrderFilterType_descriptor(), value);
}
inline bool DriverOrderFilterType_Parse(
    const ::std::string& name, DriverOrderFilterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DriverOrderFilterType>(
    DriverOrderFilterType_descriptor(), name, value);
}
// ===================================================================

class LocationInfo : public ::google::protobuf::Message {
 public:
  LocationInfo();
  virtual ~LocationInfo();

  LocationInfo(const LocationInfo& from);

  inline LocationInfo& operator=(const LocationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationInfo& default_instance();

  void Swap(LocationInfo* other);

  // implements Message ----------------------------------------------

  LocationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocationInfo& from);
  void MergeFrom(const LocationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required .DidiPush.CoordinateType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::DidiPush::CoordinateType type() const;
  inline void set_type(::DidiPush::CoordinateType value);

  // required double accuracy = 4;
  inline bool has_accuracy() const;
  inline void clear_accuracy();
  static const int kAccuracyFieldNumber = 4;
  inline double accuracy() const;
  inline void set_accuracy(double value);

  // required double direction = 5;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 5;
  inline double direction() const;
  inline void set_direction(double value);

  // required double speed = 6;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 6;
  inline double speed() const;
  inline void set_speed(double value);

  // required float acceleratedSpeedX = 7;
  inline bool has_acceleratedspeedx() const;
  inline void clear_acceleratedspeedx();
  static const int kAcceleratedSpeedXFieldNumber = 7;
  inline float acceleratedspeedx() const;
  inline void set_acceleratedspeedx(float value);

  // required float acceleratedSpeedY = 8;
  inline bool has_acceleratedspeedy() const;
  inline void clear_acceleratedspeedy();
  static const int kAcceleratedSpeedYFieldNumber = 8;
  inline float acceleratedspeedy() const;
  inline void set_acceleratedspeedy(float value);

  // required float acceleratedSpeedZ = 9;
  inline bool has_acceleratedspeedz() const;
  inline void clear_acceleratedspeedz();
  static const int kAcceleratedSpeedZFieldNumber = 9;
  inline float acceleratedspeedz() const;
  inline void set_acceleratedspeedz(float value);

  // required float includedAngleYaw = 10;
  inline bool has_includedangleyaw() const;
  inline void clear_includedangleyaw();
  static const int kIncludedAngleYawFieldNumber = 10;
  inline float includedangleyaw() const;
  inline void set_includedangleyaw(float value);

  // required float includedAngleRoll = 11;
  inline bool has_includedangleroll() const;
  inline void clear_includedangleroll();
  static const int kIncludedAngleRollFieldNumber = 11;
  inline float includedangleroll() const;
  inline void set_includedangleroll(float value);

  // required float includedAnglePitch = 12;
  inline bool has_includedanglepitch() const;
  inline void clear_includedanglepitch();
  static const int kIncludedAnglePitchFieldNumber = 12;
  inline float includedanglepitch() const;
  inline void set_includedanglepitch(float value);

  // required int32 timestamp = 13;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 13;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional .DidiPush.LocationType locType = 14;
  inline bool has_loctype() const;
  inline void clear_loctype();
  static const int kLocTypeFieldNumber = 14;
  inline ::DidiPush::LocationType loctype() const;
  inline void set_loctype(::DidiPush::LocationType value);

  // @@protoc_insertion_point(class_scope:DidiPush.LocationInfo)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accuracy();
  inline void clear_has_accuracy();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_acceleratedspeedx();
  inline void clear_has_acceleratedspeedx();
  inline void set_has_acceleratedspeedy();
  inline void clear_has_acceleratedspeedy();
  inline void set_has_acceleratedspeedz();
  inline void clear_has_acceleratedspeedz();
  inline void set_has_includedangleyaw();
  inline void clear_has_includedangleyaw();
  inline void set_has_includedangleroll();
  inline void clear_has_includedangleroll();
  inline void set_has_includedanglepitch();
  inline void clear_has_includedanglepitch();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_loctype();
  inline void clear_has_loctype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;
  double accuracy_;
  double direction_;
  int type_;
  float acceleratedspeedx_;
  double speed_;
  float acceleratedspeedy_;
  float acceleratedspeedz_;
  float includedangleyaw_;
  float includedangleroll_;
  float includedanglepitch_;
  ::google::protobuf::int32 timestamp_;
  int loctype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
  friend void protobuf_AssignDesc_didi_5fprotocol_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_didi_5fprotocol_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LocationInfo* default_instance_;
};
// -------------------------------------------------------------------

class DrivingFeeInfo : public ::google::protobuf::Message {
 public:
  DrivingFeeInfo();
  virtual ~DrivingFeeInfo();

  DrivingFeeInfo(const DrivingFeeInfo& from);

  inline DrivingFeeInfo& operator=(const DrivingFeeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrivingFeeInfo& default_instance();

  void Swap(DrivingFeeInfo* other);

  // implements Message ----------------------------------------------

  DrivingFeeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrivingFeeInfo& from);
  void MergeFrom(const DrivingFeeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float normal_distance = 1;
  inline bool has_normal_distance() const;
  inline void clear_normal_distance();
  static const int kNormalDistanceFieldNumber = 1;
  inline float normal_distance() const;
  inline void set_normal_distance(float value);

  // required float cur_distance = 2;
  inline bool has_cur_distance() const;
  inline void clear_cur_distance();
  static const int kCurDistanceFieldNumber = 2;
  inline float cur_distance() const;
  inline void set_cur_distance(float value);

  // required float empty_distance = 3;
  inline bool has_empty_distance() const;
  inline void clear_empty_distance();
  static const int kEmptyDistanceFieldNumber = 3;
  inline float empty_distance() const;
  inline void set_empty_distance(float value);

  // required float night_distance = 4;
  inline bool has_night_distance() const;
  inline void clear_night_distance();
  static const int kNightDistanceFieldNumber = 4;
  inline float night_distance() const;
  inline void set_night_distance(float value);

  // required int32 slow_time = 5;
  inline bool has_slow_time() const;
  inline void clear_slow_time();
  static const int kSlowTimeFieldNumber = 5;
  inline ::google::protobuf::int32 slow_time() const;
  inline void set_slow_time(::google::protobuf::int32 value);

  // required int32 slow_cur_time = 6;
  inline bool has_slow_cur_time() const;
  inline void clear_slow_cur_time();
  static const int kSlowCurTimeFieldNumber = 6;
  inline ::google::protobuf::int32 slow_cur_time() const;
  inline void set_slow_cur_time(::google::protobuf::int32 value);

  // required float normal_fee = 7;
  inline bool has_normal_fee() const;
  inline void clear_normal_fee();
  static const int kNormalFeeFieldNumber = 7;
  inline float normal_fee() const;
  inline void set_normal_fee(float value);

  // required float normal_act_fee = 8;
  inline bool has_normal_act_fee() const;
  inline void clear_normal_act_fee();
  static const int kNormalActFeeFieldNumber = 8;
  inline float normal_act_fee() const;
  inline void set_normal_act_fee(float value);

  // required float empty_fee = 9;
  inline bool has_empty_fee() const;
  inline void clear_empty_fee();
  static const int kEmptyFeeFieldNumber = 9;
  inline float empty_fee() const;
  inline void set_empty_fee(float value);

  // required float empty_act_fee = 10;
  inline bool has_empty_act_fee() const;
  inline void clear_empty_act_fee();
  static const int kEmptyActFeeFieldNumber = 10;
  inline float empty_act_fee() const;
  inline void set_empty_act_fee(float value);

  // required float night_fee = 11;
  inline bool has_night_fee() const;
  inline void clear_night_fee();
  static const int kNightFeeFieldNumber = 11;
  inline float night_fee() const;
  inline void set_night_fee(float value);

  // required float night_act_fee = 12;
  inline bool has_night_act_fee() const;
  inline void clear_night_act_fee();
  static const int kNightActFeeFieldNumber = 12;
  inline float night_act_fee() const;
  inline void set_night_act_fee(float value);

  // required float slow_fee = 13;
  inline bool has_slow_fee() const;
  inline void clear_slow_fee();
  static const int kSlowFeeFieldNumber = 13;
  inline float slow_fee() const;
  inline void set_slow_fee(float value);

  // required float display_fee = 14;
  inline bool has_display_fee() const;
  inline void clear_display_fee();
  static const int kDisplayFeeFieldNumber = 14;
  inline float display_fee() const;
  inline void set_display_fee(float value);

  // required float actual_fee = 15;
  inline bool has_actual_fee() const;
  inline void clear_actual_fee();
  static const int kActualFeeFieldNumber = 15;
  inline float actual_fee() const;
  inline void set_actual_fee(float value);

  // required int32 timestamp = 16;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 16;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // required float start_fee = 17;
  inline bool has_start_fee() const;
  inline void clear_start_fee();
  static const int kStartFeeFieldNumber = 17;
  inline float start_fee() const;
  inline void set_start_fee(float value);

  // @@protoc_insertion_point(class_scope:DidiPush.DrivingFeeInfo)
 private:
  inline void set_has_normal_distance();
  inline void clear_has_normal_distance();
  inline void set_has_cur_distance();
  inline void clear_has_cur_distance();
  inline void set_has_empty_distance();
  inline void clear_has_empty_distance();
  inline void set_has_night_distance();
  inline void clear_has_night_distance();
  inline void set_has_slow_time();
  inline void clear_has_slow_time();
  inline void set_has_slow_cur_time();
  inline void clear_has_slow_cur_time();
  inline void set_has_normal_fee();
  inline void clear_has_normal_fee();
  inline void set_has_normal_act_fee();
  inline void clear_has_normal_act_fee();
  inline void set_has_empty_fee();
  inline void clear_has_empty_fee();
  inline void set_has_empty_act_fee();
  inline void clear_has_empty_act_fee();
  inline void set_has_night_fee();
  inline void clear_has_night_fee();
  inline void set_has_night_act_fee();
  inline void clear_has_night_act_fee();
  inline void set_has_slow_fee();
  inline void clear_has_slow_fee();
  inline void set_has_display_fee();
  inline void clear_has_display_fee();
  inline void set_has_actual_fee();
  inline void clear_has_actual_fee();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_start_fee();
  inline void clear_has_start_fee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float normal_distance_;
  float cur_distance_;
  float empty_distance_;
  float night_distance_;
  ::google::protobuf::int32 slow_time_;
  ::google::protobuf::int32 slow_cur_time_;
  float normal_fee_;
  float normal_act_fee_;
  float empty_fee_;
  float empty_act_fee_;
  float night_fee_;
  float night_act_fee_;
  float slow_fee_;
  float display_fee_;
  float actual_fee_;
  ::google::protobuf::int32 timestamp_;
  float start_fee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
  friend void protobuf_AssignDesc_didi_5fprotocol_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_didi_5fprotocol_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static DrivingFeeInfo* default_instance_;
};
// -------------------------------------------------------------------

class DriverBroadcastOrderExtraInfo : public ::google::protobuf::Message {
 public:
  DriverBroadcastOrderExtraInfo();
  virtual ~DriverBroadcastOrderExtraInfo();

  DriverBroadcastOrderExtraInfo(const DriverBroadcastOrderExtraInfo& from);

  inline DriverBroadcastOrderExtraInfo& operator=(const DriverBroadcastOrderExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DriverBroadcastOrderExtraInfo& default_instance();

  void Swap(DriverBroadcastOrderExtraInfo* other);

  // implements Message ----------------------------------------------

  DriverBroadcastOrderExtraInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DriverBroadcastOrderExtraInfo& from);
  void MergeFrom(const DriverBroadcastOrderExtraInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 send_num = 1;
  inline bool has_send_num() const;
  inline void clear_send_num();
  static const int kSendNumFieldNumber = 1;
  inline ::google::protobuf::int32 send_num() const;
  inline void set_send_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DidiPush.DriverBroadcastOrderExtraInfo)
 private:
  inline void set_has_send_num();
  inline void clear_has_send_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 send_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_didi_5fprotocol_5fcommon_2eproto();
  friend void protobuf_AssignDesc_didi_5fprotocol_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_didi_5fprotocol_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static DriverBroadcastOrderExtraInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// LocationInfo

// required double x = 1;
inline bool LocationInfo::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocationInfo::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocationInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocationInfo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double LocationInfo::x() const {
  return x_;
}
inline void LocationInfo::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool LocationInfo::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocationInfo::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocationInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocationInfo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double LocationInfo::y() const {
  return y_;
}
inline void LocationInfo::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required .DidiPush.CoordinateType type = 3;
inline bool LocationInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocationInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocationInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocationInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::DidiPush::CoordinateType LocationInfo::type() const {
  return static_cast< ::DidiPush::CoordinateType >(type_);
}
inline void LocationInfo::set_type(::DidiPush::CoordinateType value) {
  assert(::DidiPush::CoordinateType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required double accuracy = 4;
inline bool LocationInfo::has_accuracy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocationInfo::set_has_accuracy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocationInfo::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocationInfo::clear_accuracy() {
  accuracy_ = 0;
  clear_has_accuracy();
}
inline double LocationInfo::accuracy() const {
  return accuracy_;
}
inline void LocationInfo::set_accuracy(double value) {
  set_has_accuracy();
  accuracy_ = value;
}

// required double direction = 5;
inline bool LocationInfo::has_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LocationInfo::set_has_direction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LocationInfo::clear_has_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LocationInfo::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline double LocationInfo::direction() const {
  return direction_;
}
inline void LocationInfo::set_direction(double value) {
  set_has_direction();
  direction_ = value;
}

// required double speed = 6;
inline bool LocationInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LocationInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LocationInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LocationInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double LocationInfo::speed() const {
  return speed_;
}
inline void LocationInfo::set_speed(double value) {
  set_has_speed();
  speed_ = value;
}

// required float acceleratedSpeedX = 7;
inline bool LocationInfo::has_acceleratedspeedx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LocationInfo::set_has_acceleratedspeedx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LocationInfo::clear_has_acceleratedspeedx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LocationInfo::clear_acceleratedspeedx() {
  acceleratedspeedx_ = 0;
  clear_has_acceleratedspeedx();
}
inline float LocationInfo::acceleratedspeedx() const {
  return acceleratedspeedx_;
}
inline void LocationInfo::set_acceleratedspeedx(float value) {
  set_has_acceleratedspeedx();
  acceleratedspeedx_ = value;
}

// required float acceleratedSpeedY = 8;
inline bool LocationInfo::has_acceleratedspeedy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LocationInfo::set_has_acceleratedspeedy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LocationInfo::clear_has_acceleratedspeedy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LocationInfo::clear_acceleratedspeedy() {
  acceleratedspeedy_ = 0;
  clear_has_acceleratedspeedy();
}
inline float LocationInfo::acceleratedspeedy() const {
  return acceleratedspeedy_;
}
inline void LocationInfo::set_acceleratedspeedy(float value) {
  set_has_acceleratedspeedy();
  acceleratedspeedy_ = value;
}

// required float acceleratedSpeedZ = 9;
inline bool LocationInfo::has_acceleratedspeedz() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LocationInfo::set_has_acceleratedspeedz() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LocationInfo::clear_has_acceleratedspeedz() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LocationInfo::clear_acceleratedspeedz() {
  acceleratedspeedz_ = 0;
  clear_has_acceleratedspeedz();
}
inline float LocationInfo::acceleratedspeedz() const {
  return acceleratedspeedz_;
}
inline void LocationInfo::set_acceleratedspeedz(float value) {
  set_has_acceleratedspeedz();
  acceleratedspeedz_ = value;
}

// required float includedAngleYaw = 10;
inline bool LocationInfo::has_includedangleyaw() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LocationInfo::set_has_includedangleyaw() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LocationInfo::clear_has_includedangleyaw() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LocationInfo::clear_includedangleyaw() {
  includedangleyaw_ = 0;
  clear_has_includedangleyaw();
}
inline float LocationInfo::includedangleyaw() const {
  return includedangleyaw_;
}
inline void LocationInfo::set_includedangleyaw(float value) {
  set_has_includedangleyaw();
  includedangleyaw_ = value;
}

// required float includedAngleRoll = 11;
inline bool LocationInfo::has_includedangleroll() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LocationInfo::set_has_includedangleroll() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LocationInfo::clear_has_includedangleroll() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LocationInfo::clear_includedangleroll() {
  includedangleroll_ = 0;
  clear_has_includedangleroll();
}
inline float LocationInfo::includedangleroll() const {
  return includedangleroll_;
}
inline void LocationInfo::set_includedangleroll(float value) {
  set_has_includedangleroll();
  includedangleroll_ = value;
}

// required float includedAnglePitch = 12;
inline bool LocationInfo::has_includedanglepitch() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LocationInfo::set_has_includedanglepitch() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LocationInfo::clear_has_includedanglepitch() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LocationInfo::clear_includedanglepitch() {
  includedanglepitch_ = 0;
  clear_has_includedanglepitch();
}
inline float LocationInfo::includedanglepitch() const {
  return includedanglepitch_;
}
inline void LocationInfo::set_includedanglepitch(float value) {
  set_has_includedanglepitch();
  includedanglepitch_ = value;
}

// required int32 timestamp = 13;
inline bool LocationInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LocationInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LocationInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LocationInfo::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 LocationInfo::timestamp() const {
  return timestamp_;
}
inline void LocationInfo::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .DidiPush.LocationType locType = 14;
inline bool LocationInfo::has_loctype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LocationInfo::set_has_loctype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LocationInfo::clear_has_loctype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LocationInfo::clear_loctype() {
  loctype_ = 1;
  clear_has_loctype();
}
inline ::DidiPush::LocationType LocationInfo::loctype() const {
  return static_cast< ::DidiPush::LocationType >(loctype_);
}
inline void LocationInfo::set_loctype(::DidiPush::LocationType value) {
  assert(::DidiPush::LocationType_IsValid(value));
  set_has_loctype();
  loctype_ = value;
}

// -------------------------------------------------------------------

// DrivingFeeInfo

// required float normal_distance = 1;
inline bool DrivingFeeInfo::has_normal_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrivingFeeInfo::set_has_normal_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrivingFeeInfo::clear_has_normal_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrivingFeeInfo::clear_normal_distance() {
  normal_distance_ = 0;
  clear_has_normal_distance();
}
inline float DrivingFeeInfo::normal_distance() const {
  return normal_distance_;
}
inline void DrivingFeeInfo::set_normal_distance(float value) {
  set_has_normal_distance();
  normal_distance_ = value;
}

// required float cur_distance = 2;
inline bool DrivingFeeInfo::has_cur_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrivingFeeInfo::set_has_cur_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrivingFeeInfo::clear_has_cur_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrivingFeeInfo::clear_cur_distance() {
  cur_distance_ = 0;
  clear_has_cur_distance();
}
inline float DrivingFeeInfo::cur_distance() const {
  return cur_distance_;
}
inline void DrivingFeeInfo::set_cur_distance(float value) {
  set_has_cur_distance();
  cur_distance_ = value;
}

// required float empty_distance = 3;
inline bool DrivingFeeInfo::has_empty_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrivingFeeInfo::set_has_empty_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrivingFeeInfo::clear_has_empty_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrivingFeeInfo::clear_empty_distance() {
  empty_distance_ = 0;
  clear_has_empty_distance();
}
inline float DrivingFeeInfo::empty_distance() const {
  return empty_distance_;
}
inline void DrivingFeeInfo::set_empty_distance(float value) {
  set_has_empty_distance();
  empty_distance_ = value;
}

// required float night_distance = 4;
inline bool DrivingFeeInfo::has_night_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DrivingFeeInfo::set_has_night_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DrivingFeeInfo::clear_has_night_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DrivingFeeInfo::clear_night_distance() {
  night_distance_ = 0;
  clear_has_night_distance();
}
inline float DrivingFeeInfo::night_distance() const {
  return night_distance_;
}
inline void DrivingFeeInfo::set_night_distance(float value) {
  set_has_night_distance();
  night_distance_ = value;
}

// required int32 slow_time = 5;
inline bool DrivingFeeInfo::has_slow_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DrivingFeeInfo::set_has_slow_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DrivingFeeInfo::clear_has_slow_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DrivingFeeInfo::clear_slow_time() {
  slow_time_ = 0;
  clear_has_slow_time();
}
inline ::google::protobuf::int32 DrivingFeeInfo::slow_time() const {
  return slow_time_;
}
inline void DrivingFeeInfo::set_slow_time(::google::protobuf::int32 value) {
  set_has_slow_time();
  slow_time_ = value;
}

// required int32 slow_cur_time = 6;
inline bool DrivingFeeInfo::has_slow_cur_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DrivingFeeInfo::set_has_slow_cur_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DrivingFeeInfo::clear_has_slow_cur_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DrivingFeeInfo::clear_slow_cur_time() {
  slow_cur_time_ = 0;
  clear_has_slow_cur_time();
}
inline ::google::protobuf::int32 DrivingFeeInfo::slow_cur_time() const {
  return slow_cur_time_;
}
inline void DrivingFeeInfo::set_slow_cur_time(::google::protobuf::int32 value) {
  set_has_slow_cur_time();
  slow_cur_time_ = value;
}

// required float normal_fee = 7;
inline bool DrivingFeeInfo::has_normal_fee() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DrivingFeeInfo::set_has_normal_fee() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DrivingFeeInfo::clear_has_normal_fee() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DrivingFeeInfo::clear_normal_fee() {
  normal_fee_ = 0;
  clear_has_normal_fee();
}
inline float DrivingFeeInfo::normal_fee() const {
  return normal_fee_;
}
inline void DrivingFeeInfo::set_normal_fee(float value) {
  set_has_normal_fee();
  normal_fee_ = value;
}

// required float normal_act_fee = 8;
inline bool DrivingFeeInfo::has_normal_act_fee() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DrivingFeeInfo::set_has_normal_act_fee() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DrivingFeeInfo::clear_has_normal_act_fee() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DrivingFeeInfo::clear_normal_act_fee() {
  normal_act_fee_ = 0;
  clear_has_normal_act_fee();
}
inline float DrivingFeeInfo::normal_act_fee() const {
  return normal_act_fee_;
}
inline void DrivingFeeInfo::set_normal_act_fee(float value) {
  set_has_normal_act_fee();
  normal_act_fee_ = value;
}

// required float empty_fee = 9;
inline bool DrivingFeeInfo::has_empty_fee() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DrivingFeeInfo::set_has_empty_fee() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DrivingFeeInfo::clear_has_empty_fee() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DrivingFeeInfo::clear_empty_fee() {
  empty_fee_ = 0;
  clear_has_empty_fee();
}
inline float DrivingFeeInfo::empty_fee() const {
  return empty_fee_;
}
inline void DrivingFeeInfo::set_empty_fee(float value) {
  set_has_empty_fee();
  empty_fee_ = value;
}

// required float empty_act_fee = 10;
inline bool DrivingFeeInfo::has_empty_act_fee() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DrivingFeeInfo::set_has_empty_act_fee() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DrivingFeeInfo::clear_has_empty_act_fee() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DrivingFeeInfo::clear_empty_act_fee() {
  empty_act_fee_ = 0;
  clear_has_empty_act_fee();
}
inline float DrivingFeeInfo::empty_act_fee() const {
  return empty_act_fee_;
}
inline void DrivingFeeInfo::set_empty_act_fee(float value) {
  set_has_empty_act_fee();
  empty_act_fee_ = value;
}

// required float night_fee = 11;
inline bool DrivingFeeInfo::has_night_fee() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DrivingFeeInfo::set_has_night_fee() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DrivingFeeInfo::clear_has_night_fee() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DrivingFeeInfo::clear_night_fee() {
  night_fee_ = 0;
  clear_has_night_fee();
}
inline float DrivingFeeInfo::night_fee() const {
  return night_fee_;
}
inline void DrivingFeeInfo::set_night_fee(float value) {
  set_has_night_fee();
  night_fee_ = value;
}

// required float night_act_fee = 12;
inline bool DrivingFeeInfo::has_night_act_fee() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DrivingFeeInfo::set_has_night_act_fee() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DrivingFeeInfo::clear_has_night_act_fee() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DrivingFeeInfo::clear_night_act_fee() {
  night_act_fee_ = 0;
  clear_has_night_act_fee();
}
inline float DrivingFeeInfo::night_act_fee() const {
  return night_act_fee_;
}
inline void DrivingFeeInfo::set_night_act_fee(float value) {
  set_has_night_act_fee();
  night_act_fee_ = value;
}

// required float slow_fee = 13;
inline bool DrivingFeeInfo::has_slow_fee() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DrivingFeeInfo::set_has_slow_fee() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DrivingFeeInfo::clear_has_slow_fee() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DrivingFeeInfo::clear_slow_fee() {
  slow_fee_ = 0;
  clear_has_slow_fee();
}
inline float DrivingFeeInfo::slow_fee() const {
  return slow_fee_;
}
inline void DrivingFeeInfo::set_slow_fee(float value) {
  set_has_slow_fee();
  slow_fee_ = value;
}

// required float display_fee = 14;
inline bool DrivingFeeInfo::has_display_fee() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DrivingFeeInfo::set_has_display_fee() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DrivingFeeInfo::clear_has_display_fee() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DrivingFeeInfo::clear_display_fee() {
  display_fee_ = 0;
  clear_has_display_fee();
}
inline float DrivingFeeInfo::display_fee() const {
  return display_fee_;
}
inline void DrivingFeeInfo::set_display_fee(float value) {
  set_has_display_fee();
  display_fee_ = value;
}

// required float actual_fee = 15;
inline bool DrivingFeeInfo::has_actual_fee() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DrivingFeeInfo::set_has_actual_fee() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DrivingFeeInfo::clear_has_actual_fee() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DrivingFeeInfo::clear_actual_fee() {
  actual_fee_ = 0;
  clear_has_actual_fee();
}
inline float DrivingFeeInfo::actual_fee() const {
  return actual_fee_;
}
inline void DrivingFeeInfo::set_actual_fee(float value) {
  set_has_actual_fee();
  actual_fee_ = value;
}

// required int32 timestamp = 16;
inline bool DrivingFeeInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DrivingFeeInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DrivingFeeInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DrivingFeeInfo::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 DrivingFeeInfo::timestamp() const {
  return timestamp_;
}
inline void DrivingFeeInfo::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required float start_fee = 17;
inline bool DrivingFeeInfo::has_start_fee() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DrivingFeeInfo::set_has_start_fee() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DrivingFeeInfo::clear_has_start_fee() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DrivingFeeInfo::clear_start_fee() {
  start_fee_ = 0;
  clear_has_start_fee();
}
inline float DrivingFeeInfo::start_fee() const {
  return start_fee_;
}
inline void DrivingFeeInfo::set_start_fee(float value) {
  set_has_start_fee();
  start_fee_ = value;
}

// -------------------------------------------------------------------

// DriverBroadcastOrderExtraInfo

// optional int32 send_num = 1;
inline bool DriverBroadcastOrderExtraInfo::has_send_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DriverBroadcastOrderExtraInfo::set_has_send_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DriverBroadcastOrderExtraInfo::clear_has_send_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DriverBroadcastOrderExtraInfo::clear_send_num() {
  send_num_ = 0;
  clear_has_send_num();
}
inline ::google::protobuf::int32 DriverBroadcastOrderExtraInfo::send_num() const {
  return send_num_;
}
inline void DriverBroadcastOrderExtraInfo::set_send_num(::google::protobuf::int32 value) {
  set_has_send_num();
  send_num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DidiPush

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DidiPush::LocationType>() {
  return ::DidiPush::LocationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DidiPush::DriverOrderFilterType>() {
  return ::DidiPush::DriverOrderFilterType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_didi_5fprotocol_5fcommon_2eproto__INCLUDED
