// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: didi_protocol_collectsvr.proto

#ifndef PROTOBUF_didi_5fprotocol_5fcollectsvr_2eproto__INCLUDED
#define PROTOBUF_didi_5fprotocol_5fcollectsvr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "didi_protocol.pb.h"
#include "didi_protocol_common.pb.h"
// @@protoc_insertion_point(includes)

namespace DidiPush {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_didi_5fprotocol_5fcollectsvr_2eproto();
void protobuf_AssignDesc_didi_5fprotocol_5fcollectsvr_2eproto();
void protobuf_ShutdownFile_didi_5fprotocol_5fcollectsvr_2eproto();

class CollectSvrCoordinateReq;
class CollectSvrOrderFilterReq;

enum CollectSvrMessageType {
  kCollectSvrMessageTypeCollectSvrCoordinateReq = 1,
  kCollectSvrMessageTypeCollectSvrOrderFilterReq = 2
};
bool CollectSvrMessageType_IsValid(int value);
const CollectSvrMessageType CollectSvrMessageType_MIN = kCollectSvrMessageTypeCollectSvrCoordinateReq;
const CollectSvrMessageType CollectSvrMessageType_MAX = kCollectSvrMessageTypeCollectSvrOrderFilterReq;
const int CollectSvrMessageType_ARRAYSIZE = CollectSvrMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CollectSvrMessageType_descriptor();
inline const ::std::string& CollectSvrMessageType_Name(CollectSvrMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CollectSvrMessageType_descriptor(), value);
}
inline bool CollectSvrMessageType_Parse(
    const ::std::string& name, CollectSvrMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollectSvrMessageType>(
    CollectSvrMessageType_descriptor(), name, value);
}
enum GPSSource {
  GPSSourceFromGPSModel = 0,
  GPSSourceFromNetwork = 1,
  GPSSourceFromUnknown = 2
};
bool GPSSource_IsValid(int value);
const GPSSource GPSSource_MIN = GPSSourceFromGPSModel;
const GPSSource GPSSource_MAX = GPSSourceFromUnknown;
const int GPSSource_ARRAYSIZE = GPSSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPSSource_descriptor();
inline const ::std::string& GPSSource_Name(GPSSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPSSource_descriptor(), value);
}
inline bool GPSSource_Parse(
    const ::std::string& name, GPSSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPSSource>(
    GPSSource_descriptor(), name, value);
}
enum DriverCollectSvrCoordinateReqState {
  DriverNotWorking = 0,
  DriverWorkingWithoutPassenger = 1,
  DriverWorkingWithPassenger = 2
};
bool DriverCollectSvrCoordinateReqState_IsValid(int value);
const DriverCollectSvrCoordinateReqState DriverCollectSvrCoordinateReqState_MIN = DriverNotWorking;
const DriverCollectSvrCoordinateReqState DriverCollectSvrCoordinateReqState_MAX = DriverWorkingWithPassenger;
const int DriverCollectSvrCoordinateReqState_ARRAYSIZE = DriverCollectSvrCoordinateReqState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DriverCollectSvrCoordinateReqState_descriptor();
inline const ::std::string& DriverCollectSvrCoordinateReqState_Name(DriverCollectSvrCoordinateReqState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DriverCollectSvrCoordinateReqState_descriptor(), value);
}
inline bool DriverCollectSvrCoordinateReqState_Parse(
    const ::std::string& name, DriverCollectSvrCoordinateReqState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DriverCollectSvrCoordinateReqState>(
    DriverCollectSvrCoordinateReqState_descriptor(), name, value);
}
enum PassengerState {
  PassengerStateNormal = 0,
  PassengerStateHasPaidOff = 1,
  PassengerStateHasCommented = 2
};
bool PassengerState_IsValid(int value);
const PassengerState PassengerState_MIN = PassengerStateNormal;
const PassengerState PassengerState_MAX = PassengerStateHasCommented;
const int PassengerState_ARRAYSIZE = PassengerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PassengerState_descriptor();
inline const ::std::string& PassengerState_Name(PassengerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PassengerState_descriptor(), value);
}
inline bool PassengerState_Parse(
    const ::std::string& name, PassengerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PassengerState>(
    PassengerState_descriptor(), name, value);
}
// ===================================================================

class CollectSvrCoordinateReq : public ::google::protobuf::Message {
 public:
  CollectSvrCoordinateReq();
  virtual ~CollectSvrCoordinateReq();

  CollectSvrCoordinateReq(const CollectSvrCoordinateReq& from);

  inline CollectSvrCoordinateReq& operator=(const CollectSvrCoordinateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectSvrCoordinateReq& default_instance();

  void Swap(CollectSvrCoordinateReq* other);

  // implements Message ----------------------------------------------

  CollectSvrCoordinateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectSvrCoordinateReq& from);
  void MergeFrom(const CollectSvrCoordinateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string phone = 1;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 1;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional double lng = 2;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 2;
  inline double lng() const;
  inline void set_lng(double value);

  // optional double lat = 3;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 3;
  inline double lat() const;
  inline void set_lat(double value);

  // optional .DidiPush.CoordinateType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::DidiPush::CoordinateType type() const;
  inline void set_type(::DidiPush::CoordinateType value);

  // optional double accuracy = 5;
  inline bool has_accuracy() const;
  inline void clear_accuracy();
  static const int kAccuracyFieldNumber = 5;
  inline double accuracy() const;
  inline void set_accuracy(double value);

  // optional double direction = 6;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 6;
  inline double direction() const;
  inline void set_direction(double value);

  // optional double speed = 7;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 7;
  inline double speed() const;
  inline void set_speed(double value);

  // optional float acceleratedSpeedX = 8;
  inline bool has_acceleratedspeedx() const;
  inline void clear_acceleratedspeedx();
  static const int kAcceleratedSpeedXFieldNumber = 8;
  inline float acceleratedspeedx() const;
  inline void set_acceleratedspeedx(float value);

  // optional float acceleratedSpeedY = 9;
  inline bool has_acceleratedspeedy() const;
  inline void clear_acceleratedspeedy();
  static const int kAcceleratedSpeedYFieldNumber = 9;
  inline float acceleratedspeedy() const;
  inline void set_acceleratedspeedy(float value);

  // optional float acceleratedSpeedZ = 10;
  inline bool has_acceleratedspeedz() const;
  inline void clear_acceleratedspeedz();
  static const int kAcceleratedSpeedZFieldNumber = 10;
  inline float acceleratedspeedz() const;
  inline void set_acceleratedspeedz(float value);

  // optional float includedAngleYaw = 11;
  inline bool has_includedangleyaw() const;
  inline void clear_includedangleyaw();
  static const int kIncludedAngleYawFieldNumber = 11;
  inline float includedangleyaw() const;
  inline void set_includedangleyaw(float value);

  // optional float includedAngleRoll = 12;
  inline bool has_includedangleroll() const;
  inline void clear_includedangleroll();
  static const int kIncludedAngleRollFieldNumber = 12;
  inline float includedangleroll() const;
  inline void set_includedangleroll(float value);

  // optional float includedAnglePitch = 13;
  inline bool has_includedanglepitch() const;
  inline void clear_includedanglepitch();
  static const int kIncludedAnglePitchFieldNumber = 13;
  inline float includedanglepitch() const;
  inline void set_includedanglepitch(float value);

  // optional bool pull_peer = 14;
  inline bool has_pull_peer() const;
  inline void clear_pull_peer();
  static const int kPullPeerFieldNumber = 14;
  inline bool pull_peer() const;
  inline void set_pull_peer(bool value);

  // optional double pre_lng = 15;
  inline bool has_pre_lng() const;
  inline void clear_pre_lng();
  static const int kPreLngFieldNumber = 15;
  inline double pre_lng() const;
  inline void set_pre_lng(double value);

  // optional double pre_lat = 16;
  inline bool has_pre_lat() const;
  inline void clear_pre_lat();
  static const int kPreLatFieldNumber = 16;
  inline double pre_lat() const;
  inline void set_pre_lat(double value);

  // optional uint32 state = 17;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 17;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 gps_source = 18;
  inline bool has_gps_source() const;
  inline void clear_gps_source();
  static const int kGpsSourceFieldNumber = 18;
  inline ::google::protobuf::uint32 gps_source() const;
  inline void set_gps_source(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DidiPush.CollectSvrCoordinateReq)
 private:
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_lng();
  inline void clear_has_lng();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accuracy();
  inline void clear_has_accuracy();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_acceleratedspeedx();
  inline void clear_has_acceleratedspeedx();
  inline void set_has_acceleratedspeedy();
  inline void clear_has_acceleratedspeedy();
  inline void set_has_acceleratedspeedz();
  inline void clear_has_acceleratedspeedz();
  inline void set_has_includedangleyaw();
  inline void clear_has_includedangleyaw();
  inline void set_has_includedangleroll();
  inline void clear_has_includedangleroll();
  inline void set_has_includedanglepitch();
  inline void clear_has_includedanglepitch();
  inline void set_has_pull_peer();
  inline void clear_has_pull_peer();
  inline void set_has_pre_lng();
  inline void clear_has_pre_lng();
  inline void set_has_pre_lat();
  inline void clear_has_pre_lat();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_gps_source();
  inline void clear_has_gps_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phone_;
  double lng_;
  double lat_;
  double accuracy_;
  double direction_;
  int type_;
  float acceleratedspeedx_;
  double speed_;
  float acceleratedspeedy_;
  float acceleratedspeedz_;
  float includedangleyaw_;
  float includedangleroll_;
  float includedanglepitch_;
  bool pull_peer_;
  double pre_lng_;
  double pre_lat_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 gps_source_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_didi_5fprotocol_5fcollectsvr_2eproto();
  friend void protobuf_AssignDesc_didi_5fprotocol_5fcollectsvr_2eproto();
  friend void protobuf_ShutdownFile_didi_5fprotocol_5fcollectsvr_2eproto();

  void InitAsDefaultInstance();
  static CollectSvrCoordinateReq* default_instance_;
};
// -------------------------------------------------------------------

class CollectSvrOrderFilterReq : public ::google::protobuf::Message {
 public:
  CollectSvrOrderFilterReq();
  virtual ~CollectSvrOrderFilterReq();

  CollectSvrOrderFilterReq(const CollectSvrOrderFilterReq& from);

  inline CollectSvrOrderFilterReq& operator=(const CollectSvrOrderFilterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectSvrOrderFilterReq& default_instance();

  void Swap(CollectSvrOrderFilterReq* other);

  // implements Message ----------------------------------------------

  CollectSvrOrderFilterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectSvrOrderFilterReq& from);
  void MergeFrom(const CollectSvrOrderFilterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_id = 1;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  inline const ::std::string& order_id() const;
  inline void set_order_id(const ::std::string& value);
  inline void set_order_id(const char* value);
  inline void set_order_id(const char* value, size_t size);
  inline ::std::string* mutable_order_id();
  inline ::std::string* release_order_id();
  inline void set_allocated_order_id(::std::string* order_id);

  // optional int32 filter_type = 2;
  inline bool has_filter_type() const;
  inline void clear_filter_type();
  static const int kFilterTypeFieldNumber = 2;
  inline ::google::protobuf::int32 filter_type() const;
  inline void set_filter_type(::google::protobuf::int32 value);

  // optional bytes send_info = 3;
  inline bool has_send_info() const;
  inline void clear_send_info();
  static const int kSendInfoFieldNumber = 3;
  inline const ::std::string& send_info() const;
  inline void set_send_info(const ::std::string& value);
  inline void set_send_info(const char* value);
  inline void set_send_info(const void* value, size_t size);
  inline ::std::string* mutable_send_info();
  inline ::std::string* release_send_info();
  inline void set_allocated_send_info(::std::string* send_info);

  // @@protoc_insertion_point(class_scope:DidiPush.CollectSvrOrderFilterReq)
 private:
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_filter_type();
  inline void clear_has_filter_type();
  inline void set_has_send_info();
  inline void clear_has_send_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_id_;
  ::std::string* send_info_;
  ::google::protobuf::int32 filter_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_didi_5fprotocol_5fcollectsvr_2eproto();
  friend void protobuf_AssignDesc_didi_5fprotocol_5fcollectsvr_2eproto();
  friend void protobuf_ShutdownFile_didi_5fprotocol_5fcollectsvr_2eproto();

  void InitAsDefaultInstance();
  static CollectSvrOrderFilterReq* default_instance_;
};
// ===================================================================


// ===================================================================

// CollectSvrCoordinateReq

// optional string phone = 1;
inline bool CollectSvrCoordinateReq::has_phone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_phone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectSvrCoordinateReq::clear_has_phone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectSvrCoordinateReq::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& CollectSvrCoordinateReq::phone() const {
  return *phone_;
}
inline void CollectSvrCoordinateReq::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CollectSvrCoordinateReq::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CollectSvrCoordinateReq::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectSvrCoordinateReq::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* CollectSvrCoordinateReq::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CollectSvrCoordinateReq::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double lng = 2;
inline bool CollectSvrCoordinateReq::has_lng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_lng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollectSvrCoordinateReq::clear_has_lng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollectSvrCoordinateReq::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline double CollectSvrCoordinateReq::lng() const {
  return lng_;
}
inline void CollectSvrCoordinateReq::set_lng(double value) {
  set_has_lng();
  lng_ = value;
}

// optional double lat = 3;
inline bool CollectSvrCoordinateReq::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_lat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CollectSvrCoordinateReq::clear_has_lat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CollectSvrCoordinateReq::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double CollectSvrCoordinateReq::lat() const {
  return lat_;
}
inline void CollectSvrCoordinateReq::set_lat(double value) {
  set_has_lat();
  lat_ = value;
}

// optional .DidiPush.CoordinateType type = 4;
inline bool CollectSvrCoordinateReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CollectSvrCoordinateReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CollectSvrCoordinateReq::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::DidiPush::CoordinateType CollectSvrCoordinateReq::type() const {
  return static_cast< ::DidiPush::CoordinateType >(type_);
}
inline void CollectSvrCoordinateReq::set_type(::DidiPush::CoordinateType value) {
  assert(::DidiPush::CoordinateType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional double accuracy = 5;
inline bool CollectSvrCoordinateReq::has_accuracy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_accuracy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CollectSvrCoordinateReq::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CollectSvrCoordinateReq::clear_accuracy() {
  accuracy_ = 0;
  clear_has_accuracy();
}
inline double CollectSvrCoordinateReq::accuracy() const {
  return accuracy_;
}
inline void CollectSvrCoordinateReq::set_accuracy(double value) {
  set_has_accuracy();
  accuracy_ = value;
}

// optional double direction = 6;
inline bool CollectSvrCoordinateReq::has_direction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_direction() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CollectSvrCoordinateReq::clear_has_direction() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CollectSvrCoordinateReq::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline double CollectSvrCoordinateReq::direction() const {
  return direction_;
}
inline void CollectSvrCoordinateReq::set_direction(double value) {
  set_has_direction();
  direction_ = value;
}

// optional double speed = 7;
inline bool CollectSvrCoordinateReq::has_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_speed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CollectSvrCoordinateReq::clear_has_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CollectSvrCoordinateReq::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double CollectSvrCoordinateReq::speed() const {
  return speed_;
}
inline void CollectSvrCoordinateReq::set_speed(double value) {
  set_has_speed();
  speed_ = value;
}

// optional float acceleratedSpeedX = 8;
inline bool CollectSvrCoordinateReq::has_acceleratedspeedx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_acceleratedspeedx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CollectSvrCoordinateReq::clear_has_acceleratedspeedx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CollectSvrCoordinateReq::clear_acceleratedspeedx() {
  acceleratedspeedx_ = 0;
  clear_has_acceleratedspeedx();
}
inline float CollectSvrCoordinateReq::acceleratedspeedx() const {
  return acceleratedspeedx_;
}
inline void CollectSvrCoordinateReq::set_acceleratedspeedx(float value) {
  set_has_acceleratedspeedx();
  acceleratedspeedx_ = value;
}

// optional float acceleratedSpeedY = 9;
inline bool CollectSvrCoordinateReq::has_acceleratedspeedy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_acceleratedspeedy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CollectSvrCoordinateReq::clear_has_acceleratedspeedy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CollectSvrCoordinateReq::clear_acceleratedspeedy() {
  acceleratedspeedy_ = 0;
  clear_has_acceleratedspeedy();
}
inline float CollectSvrCoordinateReq::acceleratedspeedy() const {
  return acceleratedspeedy_;
}
inline void CollectSvrCoordinateReq::set_acceleratedspeedy(float value) {
  set_has_acceleratedspeedy();
  acceleratedspeedy_ = value;
}

// optional float acceleratedSpeedZ = 10;
inline bool CollectSvrCoordinateReq::has_acceleratedspeedz() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_acceleratedspeedz() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CollectSvrCoordinateReq::clear_has_acceleratedspeedz() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CollectSvrCoordinateReq::clear_acceleratedspeedz() {
  acceleratedspeedz_ = 0;
  clear_has_acceleratedspeedz();
}
inline float CollectSvrCoordinateReq::acceleratedspeedz() const {
  return acceleratedspeedz_;
}
inline void CollectSvrCoordinateReq::set_acceleratedspeedz(float value) {
  set_has_acceleratedspeedz();
  acceleratedspeedz_ = value;
}

// optional float includedAngleYaw = 11;
inline bool CollectSvrCoordinateReq::has_includedangleyaw() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_includedangleyaw() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CollectSvrCoordinateReq::clear_has_includedangleyaw() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CollectSvrCoordinateReq::clear_includedangleyaw() {
  includedangleyaw_ = 0;
  clear_has_includedangleyaw();
}
inline float CollectSvrCoordinateReq::includedangleyaw() const {
  return includedangleyaw_;
}
inline void CollectSvrCoordinateReq::set_includedangleyaw(float value) {
  set_has_includedangleyaw();
  includedangleyaw_ = value;
}

// optional float includedAngleRoll = 12;
inline bool CollectSvrCoordinateReq::has_includedangleroll() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_includedangleroll() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CollectSvrCoordinateReq::clear_has_includedangleroll() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CollectSvrCoordinateReq::clear_includedangleroll() {
  includedangleroll_ = 0;
  clear_has_includedangleroll();
}
inline float CollectSvrCoordinateReq::includedangleroll() const {
  return includedangleroll_;
}
inline void CollectSvrCoordinateReq::set_includedangleroll(float value) {
  set_has_includedangleroll();
  includedangleroll_ = value;
}

// optional float includedAnglePitch = 13;
inline bool CollectSvrCoordinateReq::has_includedanglepitch() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_includedanglepitch() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CollectSvrCoordinateReq::clear_has_includedanglepitch() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CollectSvrCoordinateReq::clear_includedanglepitch() {
  includedanglepitch_ = 0;
  clear_has_includedanglepitch();
}
inline float CollectSvrCoordinateReq::includedanglepitch() const {
  return includedanglepitch_;
}
inline void CollectSvrCoordinateReq::set_includedanglepitch(float value) {
  set_has_includedanglepitch();
  includedanglepitch_ = value;
}

// optional bool pull_peer = 14;
inline bool CollectSvrCoordinateReq::has_pull_peer() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_pull_peer() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CollectSvrCoordinateReq::clear_has_pull_peer() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CollectSvrCoordinateReq::clear_pull_peer() {
  pull_peer_ = false;
  clear_has_pull_peer();
}
inline bool CollectSvrCoordinateReq::pull_peer() const {
  return pull_peer_;
}
inline void CollectSvrCoordinateReq::set_pull_peer(bool value) {
  set_has_pull_peer();
  pull_peer_ = value;
}

// optional double pre_lng = 15;
inline bool CollectSvrCoordinateReq::has_pre_lng() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_pre_lng() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CollectSvrCoordinateReq::clear_has_pre_lng() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CollectSvrCoordinateReq::clear_pre_lng() {
  pre_lng_ = 0;
  clear_has_pre_lng();
}
inline double CollectSvrCoordinateReq::pre_lng() const {
  return pre_lng_;
}
inline void CollectSvrCoordinateReq::set_pre_lng(double value) {
  set_has_pre_lng();
  pre_lng_ = value;
}

// optional double pre_lat = 16;
inline bool CollectSvrCoordinateReq::has_pre_lat() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_pre_lat() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CollectSvrCoordinateReq::clear_has_pre_lat() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CollectSvrCoordinateReq::clear_pre_lat() {
  pre_lat_ = 0;
  clear_has_pre_lat();
}
inline double CollectSvrCoordinateReq::pre_lat() const {
  return pre_lat_;
}
inline void CollectSvrCoordinateReq::set_pre_lat(double value) {
  set_has_pre_lat();
  pre_lat_ = value;
}

// optional uint32 state = 17;
inline bool CollectSvrCoordinateReq::has_state() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_state() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CollectSvrCoordinateReq::clear_has_state() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CollectSvrCoordinateReq::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 CollectSvrCoordinateReq::state() const {
  return state_;
}
inline void CollectSvrCoordinateReq::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint32 gps_source = 18;
inline bool CollectSvrCoordinateReq::has_gps_source() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CollectSvrCoordinateReq::set_has_gps_source() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CollectSvrCoordinateReq::clear_has_gps_source() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CollectSvrCoordinateReq::clear_gps_source() {
  gps_source_ = 0u;
  clear_has_gps_source();
}
inline ::google::protobuf::uint32 CollectSvrCoordinateReq::gps_source() const {
  return gps_source_;
}
inline void CollectSvrCoordinateReq::set_gps_source(::google::protobuf::uint32 value) {
  set_has_gps_source();
  gps_source_ = value;
}

// -------------------------------------------------------------------

// CollectSvrOrderFilterReq

// optional string order_id = 1;
inline bool CollectSvrOrderFilterReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectSvrOrderFilterReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectSvrOrderFilterReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectSvrOrderFilterReq::clear_order_id() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    order_id_->clear();
  }
  clear_has_order_id();
}
inline const ::std::string& CollectSvrOrderFilterReq::order_id() const {
  return *order_id_;
}
inline void CollectSvrOrderFilterReq::set_order_id(const ::std::string& value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void CollectSvrOrderFilterReq::set_order_id(const char* value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void CollectSvrOrderFilterReq::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectSvrOrderFilterReq::mutable_order_id() {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  return order_id_;
}
inline ::std::string* CollectSvrOrderFilterReq::release_order_id() {
  clear_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_id_;
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CollectSvrOrderFilterReq::set_allocated_order_id(::std::string* order_id) {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (order_id) {
    set_has_order_id();
    order_id_ = order_id;
  } else {
    clear_has_order_id();
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 filter_type = 2;
inline bool CollectSvrOrderFilterReq::has_filter_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectSvrOrderFilterReq::set_has_filter_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollectSvrOrderFilterReq::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollectSvrOrderFilterReq::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline ::google::protobuf::int32 CollectSvrOrderFilterReq::filter_type() const {
  return filter_type_;
}
inline void CollectSvrOrderFilterReq::set_filter_type(::google::protobuf::int32 value) {
  set_has_filter_type();
  filter_type_ = value;
}

// optional bytes send_info = 3;
inline bool CollectSvrOrderFilterReq::has_send_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollectSvrOrderFilterReq::set_has_send_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CollectSvrOrderFilterReq::clear_has_send_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CollectSvrOrderFilterReq::clear_send_info() {
  if (send_info_ != &::google::protobuf::internal::kEmptyString) {
    send_info_->clear();
  }
  clear_has_send_info();
}
inline const ::std::string& CollectSvrOrderFilterReq::send_info() const {
  return *send_info_;
}
inline void CollectSvrOrderFilterReq::set_send_info(const ::std::string& value) {
  set_has_send_info();
  if (send_info_ == &::google::protobuf::internal::kEmptyString) {
    send_info_ = new ::std::string;
  }
  send_info_->assign(value);
}
inline void CollectSvrOrderFilterReq::set_send_info(const char* value) {
  set_has_send_info();
  if (send_info_ == &::google::protobuf::internal::kEmptyString) {
    send_info_ = new ::std::string;
  }
  send_info_->assign(value);
}
inline void CollectSvrOrderFilterReq::set_send_info(const void* value, size_t size) {
  set_has_send_info();
  if (send_info_ == &::google::protobuf::internal::kEmptyString) {
    send_info_ = new ::std::string;
  }
  send_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectSvrOrderFilterReq::mutable_send_info() {
  set_has_send_info();
  if (send_info_ == &::google::protobuf::internal::kEmptyString) {
    send_info_ = new ::std::string;
  }
  return send_info_;
}
inline ::std::string* CollectSvrOrderFilterReq::release_send_info() {
  clear_has_send_info();
  if (send_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = send_info_;
    send_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CollectSvrOrderFilterReq::set_allocated_send_info(::std::string* send_info) {
  if (send_info_ != &::google::protobuf::internal::kEmptyString) {
    delete send_info_;
  }
  if (send_info) {
    set_has_send_info();
    send_info_ = send_info;
  } else {
    clear_has_send_info();
    send_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DidiPush

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DidiPush::CollectSvrMessageType>() {
  return ::DidiPush::CollectSvrMessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DidiPush::GPSSource>() {
  return ::DidiPush::GPSSource_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DidiPush::DriverCollectSvrCoordinateReqState>() {
  return ::DidiPush::DriverCollectSvrCoordinateReqState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DidiPush::PassengerState>() {
  return ::DidiPush::PassengerState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_didi_5fprotocol_5fcollectsvr_2eproto__INCLUDED
